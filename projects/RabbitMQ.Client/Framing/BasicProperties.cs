// Autogenerated code. Do not edit.

// This source code is dual-licensed under the Apache License, version
// 2.0, and the Mozilla Public License, version 1.1.
//
// The APL v2.0:
//
//---------------------------------------------------------------------------
//   Copyright (c) 2007-2020 VMware, Inc.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       https://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//---------------------------------------------------------------------------
//
// The MPL v1.1:
//
//---------------------------------------------------------------------------
//   The contents of this file are subject to the Mozilla Public License
//   Version 1.1 (the "License"); you may not use this file except in
//   compliance with the License. You may obtain a copy of the License at
//   https://www.rabbitmq.com/mpl.html
//
//   Software distributed under the License is distributed on an "AS IS"
//   basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//   License for the specific language governing rights and limitations
//   under the License.
//
//   The Original Code is RabbitMQ.
//
//   The Initial Developer of the Original Code is Pivotal Software, Inc.
//   Copyright (c) 2007-2020 VMware, Inc.  All rights reserved.
//---------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text;

using RabbitMQ.Client.Impl;
namespace RabbitMQ.Client.Framing
{
    /// <summary>Autogenerated type. AMQP specification content header properties for content class "basic"</summary>
    internal sealed class BasicProperties : RabbitMQ.Client.Impl.BasicProperties
    {
        private string _contentType;
        private string _contentEncoding;
        private IDictionary<string, object> _headers;
        private byte _deliveryMode;
        private byte _priority;
        private string _correlationId;
        private string _replyTo;
        private string _expiration;
        private string _messageId;
        private AmqpTimestamp _timestamp;
        private string _type;
        private string _userId;
        private string _appId;
        private string _clusterId;

        private bool _contentType_present = false;
        private bool _contentEncoding_present = false;
        private bool _headers_present = false;
        private bool _deliveryMode_present = false;
        private bool _priority_present = false;
        private bool _correlationId_present = false;
        private bool _replyTo_present = false;
        private bool _expiration_present = false;
        private bool _messageId_present = false;
        private bool _timestamp_present = false;
        private bool _type_present = false;
        private bool _userId_present = false;
        private bool _appId_present = false;
        private bool _clusterId_present = false;

        public override string ContentType
        {
            get => _contentType;
            set
            {
                _contentType_present = value != null;
                _contentType = value;
            }
        }

        public override string ContentEncoding
        {
            get => _contentEncoding;
            set
            {
                _contentEncoding_present = value != null;
                _contentEncoding = value;
            }
        }

        public override IDictionary<string, object> Headers
        {
            get => _headers;
            set
            {
                _headers_present = value != null;
                _headers = value;
            }
        }

        public override byte DeliveryMode
        {
            get => _deliveryMode;
            set
            {
                _deliveryMode_present = true;
                _deliveryMode = value;
            }
        }

        public override byte Priority
        {
            get => _priority;
            set
            {
                _priority_present = true;
                _priority = value;
            }
        }

        public override string CorrelationId
        {
            get => _correlationId;
            set
            {
                _correlationId_present = value != null;
                _correlationId = value;
            }
        }

        public override string ReplyTo
        {
            get => _replyTo;
            set
            {
                _replyTo_present = value != null;
                _replyTo = value;
            }
        }

        public override string Expiration
        {
            get => _expiration;
            set
            {
                _expiration_present = value != null;
                _expiration = value;
            }
        }

        public override string MessageId
        {
            get => _messageId;
            set
            {
                _messageId_present = value != null;
                _messageId = value;
            }
        }

        public override AmqpTimestamp Timestamp
        {
            get => _timestamp;
            set
            {
                _timestamp_present = true;
                _timestamp = value;
            }
        }

        public override string Type
        {
            get => _type;
            set
            {
                _type_present = value != null;
                _type = value;
            }
        }

        public override string UserId
        {
            get => _userId;
            set
            {
                _userId_present = value != null;
                _userId = value;
            }
        }

        public override string AppId
        {
            get => _appId;
            set
            {
                _appId_present = value != null;
                _appId = value;
            }
        }

        public override string ClusterId
        {
            get => _clusterId;
            set
            {
                _clusterId_present = value != null;
                _clusterId = value;
            }
        }

        public override void ClearContentType() => _contentType_present = false;

        public override void ClearContentEncoding() => _contentEncoding_present = false;

        public override void ClearHeaders() => _headers_present = false;

        public override void ClearDeliveryMode() => _deliveryMode_present = false;

        public override void ClearPriority() => _priority_present = false;

        public override void ClearCorrelationId() => _correlationId_present = false;

        public override void ClearReplyTo() => _replyTo_present = false;

        public override void ClearExpiration() => _expiration_present = false;

        public override void ClearMessageId() => _messageId_present = false;

        public override void ClearTimestamp() => _timestamp_present = false;

        public override void ClearType() => _type_present = false;

        public override void ClearUserId() => _userId_present = false;

        public override void ClearAppId() => _appId_present = false;

        public override void ClearClusterId() => _clusterId_present = false;

        public override bool IsContentTypePresent() => _contentType_present;

        public override bool IsContentEncodingPresent() => _contentEncoding_present;

        public override bool IsHeadersPresent() => _headers_present;

        public override bool IsDeliveryModePresent() => _deliveryMode_present;

        public override bool IsPriorityPresent() => _priority_present;

        public override bool IsCorrelationIdPresent() => _correlationId_present;

        public override bool IsReplyToPresent() => _replyTo_present;

        public override bool IsExpirationPresent() => _expiration_present;

        public override bool IsMessageIdPresent() => _messageId_present;

        public override bool IsTimestampPresent() => _timestamp_present;

        public override bool IsTypePresent() => _type_present;

        public override bool IsUserIdPresent() => _userId_present;

        public override bool IsAppIdPresent() => _appId_present;

        public override bool IsClusterIdPresent() => _clusterId_present;

        public BasicProperties() { }
        public override ushort ProtocolClassId => 60;
        public override string ProtocolClassName => "basic";

        internal override void ReadPropertiesFrom(ref Client.Impl.ContentHeaderPropertyReader reader)
        {
            _contentType_present = reader.ReadPresence();
            _contentEncoding_present = reader.ReadPresence();
            _headers_present = reader.ReadPresence();
            _deliveryMode_present = reader.ReadPresence();
            _priority_present = reader.ReadPresence();
            _correlationId_present = reader.ReadPresence();
            _replyTo_present = reader.ReadPresence();
            _expiration_present = reader.ReadPresence();
            _messageId_present = reader.ReadPresence();
            _timestamp_present = reader.ReadPresence();
            _type_present = reader.ReadPresence();
            _userId_present = reader.ReadPresence();
            _appId_present = reader.ReadPresence();
            _clusterId_present = reader.ReadPresence();
            reader.FinishPresence();
            if (_contentType_present) { _contentType = reader.ReadShortstr(); }
            if (_contentEncoding_present) { _contentEncoding = reader.ReadShortstr(); }
            if (_headers_present) { _headers = reader.ReadTable(); }
            if (_deliveryMode_present) { _deliveryMode = reader.ReadOctet(); }
            if (_priority_present) { _priority = reader.ReadOctet(); }
            if (_correlationId_present) { _correlationId = reader.ReadShortstr(); }
            if (_replyTo_present) { _replyTo = reader.ReadShortstr(); }
            if (_expiration_present) { _expiration = reader.ReadShortstr(); }
            if (_messageId_present) { _messageId = reader.ReadShortstr(); }
            if (_timestamp_present) { _timestamp = reader.ReadTimestamp(); }
            if (_type_present) { _type = reader.ReadShortstr(); }
            if (_userId_present) { _userId = reader.ReadShortstr(); }
            if (_appId_present) { _appId = reader.ReadShortstr(); }
            if (_clusterId_present) { _clusterId = reader.ReadShortstr(); }
        }

        internal override void WritePropertiesTo(ref Client.Impl.ContentHeaderPropertyWriter writer)
        {
            writer.WritePresence(_contentType_present);
            writer.WritePresence(_contentEncoding_present);
            writer.WritePresence(_headers_present);
            writer.WritePresence(_deliveryMode_present);
            writer.WritePresence(_priority_present);
            writer.WritePresence(_correlationId_present);
            writer.WritePresence(_replyTo_present);
            writer.WritePresence(_expiration_present);
            writer.WritePresence(_messageId_present);
            writer.WritePresence(_timestamp_present);
            writer.WritePresence(_type_present);
            writer.WritePresence(_userId_present);
            writer.WritePresence(_appId_present);
            writer.WritePresence(_clusterId_present);
            writer.FinishPresence();
            if (_contentType_present) { writer.WriteShortstr(_contentType); }
            if (_contentEncoding_present) { writer.WriteShortstr(_contentEncoding); }
            if (_headers_present) { writer.WriteTable(_headers); }
            if (_deliveryMode_present) { writer.WriteOctet(_deliveryMode); }
            if (_priority_present) { writer.WriteOctet(_priority); }
            if (_correlationId_present) { writer.WriteShortstr(_correlationId); }
            if (_replyTo_present) { writer.WriteShortstr(_replyTo); }
            if (_expiration_present) { writer.WriteShortstr(_expiration); }
            if (_messageId_present) { writer.WriteShortstr(_messageId); }
            if (_timestamp_present) { writer.WriteTimestamp(_timestamp); }
            if (_type_present) { writer.WriteShortstr(_type); }
            if (_userId_present) { writer.WriteShortstr(_userId); }
            if (_appId_present) { writer.WriteShortstr(_appId); }
            if (_clusterId_present) { writer.WriteShortstr(_clusterId); }
        }

        public override int GetRequiredPayloadBufferSize()
        {
            int bufferSize = 0;
            int fieldCount = 0;
            if (_contentType_present) { fieldCount++; bufferSize += 1 + Encoding.UTF8.GetByteCount(_contentType); } // _contentType in bytes
            if (_contentEncoding_present) { fieldCount++; bufferSize += 1 + Encoding.UTF8.GetByteCount(_contentEncoding); } // _contentEncoding in bytes
            if (_headers_present) { fieldCount++; bufferSize += WireFormatting.GetTableByteCount(_headers); } // _headers in bytes
            if (_deliveryMode_present) { fieldCount++; bufferSize++; } // _deliveryMode in bytes
            if (_priority_present) { fieldCount++; bufferSize++; } // _priority in bytes
            if (_correlationId_present) { fieldCount++; bufferSize += 1 + Encoding.UTF8.GetByteCount(_correlationId); } // _correlationId in bytes
            if (_replyTo_present) { fieldCount++; bufferSize += 1 + Encoding.UTF8.GetByteCount(_replyTo); } // _replyTo in bytes
            if (_expiration_present) { fieldCount++; bufferSize += 1 + Encoding.UTF8.GetByteCount(_expiration); } // _expiration in bytes
            if (_messageId_present) { fieldCount++; bufferSize += 1 + Encoding.UTF8.GetByteCount(_messageId); } // _messageId in bytes
            if (_timestamp_present) { fieldCount++; bufferSize += 8; } // _timestamp in bytes
            if (_type_present) { fieldCount++; bufferSize += 1 + Encoding.UTF8.GetByteCount(_type); } // _type in bytes
            if (_userId_present) { fieldCount++; bufferSize += 1 + Encoding.UTF8.GetByteCount(_userId); } // _userId in bytes
            if (_appId_present) { fieldCount++; bufferSize += 1 + Encoding.UTF8.GetByteCount(_appId); } // _appId in bytes
            if (_clusterId_present) { fieldCount++; bufferSize += 1 + Encoding.UTF8.GetByteCount(_clusterId); } // _clusterId in bytes
            bufferSize += Math.Max((int)Math.Ceiling(fieldCount / 15.0), 1) * 2; // number of presence fields in bytes
            return bufferSize;
        }

        public override void AppendPropertyDebugStringTo(StringBuilder sb)
        {
            sb.Append("(");
            sb.Append("content-type="); sb.Append(_contentType_present ? (_contentType == null ? "(null)" : _contentType.ToString()) : "_"); sb.Append(", ");
            sb.Append("content-encoding="); sb.Append(_contentEncoding_present ? (_contentEncoding == null ? "(null)" : _contentEncoding.ToString()) : "_"); sb.Append(", ");
            sb.Append("headers="); sb.Append(_headers_present ? (_headers == null ? "(null)" : _headers.ToString()) : "_"); sb.Append(", ");
            sb.Append("delivery-mode="); sb.Append(_deliveryMode_present ? _deliveryMode.ToString() : "_"); sb.Append(", ");
            sb.Append("priority="); sb.Append(_priority_present ? _priority.ToString() : "_"); sb.Append(", ");
            sb.Append("correlation-id="); sb.Append(_correlationId_present ? (_correlationId == null ? "(null)" : _correlationId.ToString()) : "_"); sb.Append(", ");
            sb.Append("reply-to="); sb.Append(_replyTo_present ? (_replyTo == null ? "(null)" : _replyTo.ToString()) : "_"); sb.Append(", ");
            sb.Append("expiration="); sb.Append(_expiration_present ? (_expiration == null ? "(null)" : _expiration.ToString()) : "_"); sb.Append(", ");
            sb.Append("message-id="); sb.Append(_messageId_present ? (_messageId == null ? "(null)" : _messageId.ToString()) : "_"); sb.Append(", ");
            sb.Append("timestamp="); sb.Append(_timestamp_present ? _timestamp.ToString() : "_"); sb.Append(", ");
            sb.Append("type="); sb.Append(_type_present ? (_type == null ? "(null)" : _type.ToString()) : "_"); sb.Append(", ");
            sb.Append("user-id="); sb.Append(_userId_present ? (_userId == null ? "(null)" : _userId.ToString()) : "_"); sb.Append(", ");
            sb.Append("app-id="); sb.Append(_appId_present ? (_appId == null ? "(null)" : _appId.ToString()) : "_"); sb.Append(", ");
            sb.Append("cluster-id="); sb.Append(_clusterId_present ? (_clusterId == null ? "(null)" : _clusterId.ToString()) : "_");
            sb.Append(")");
        }
    }
}

// This source code is dual-licensed under the Apache License, version
// 2.0, and the Mozilla Public License, version 1.1.
//
// The APL v2.0:
//
//---------------------------------------------------------------------------
//   Copyright (c) 2007-2020 VMware, Inc.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       https://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//---------------------------------------------------------------------------
//
// The MPL v1.1:
//
//---------------------------------------------------------------------------
//  The contents of this file are subject to the Mozilla Public License
//  Version 1.1 (the "License"); you may not use this file except in
//  compliance with the License. You may obtain a copy of the License
//  at https://www.mozilla.org/MPL/
//
//  Software distributed under the License is distributed on an "AS IS"
//  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
//  the License for the specific language governing rights and
//  limitations under the License.
//
//  The Original Code is RabbitMQ.
//
//  The Initial Developer of the Original Code is Pivotal Software, Inc.
//  Copyright (c) 2007-2020 VMware, Inc.  All rights reserved.
//---------------------------------------------------------------------------

using System;
using System.Threading.Tasks;

using RabbitMQ.Client.Apigen.Attributes;

namespace RabbitMQ.Client.Impl
{
    ///<summary>Not part of the public API. Extension of IModel to
    ///include utilities and connection-setup routines needed by the
    ///implementation side.</summary>
    ///
    ///<remarks>This interface is used by the API autogeneration
    ///process. The AMQP XML specifications are read by the spec
    ///compilation tool, and after the basic method interface and
    ///implementation classes are generated, this interface is
    ///scanned, and a spec-version-specific implementation is
    ///autogenerated. Annotations are used on certain methods, return
    ///types, and parameters, to customise the details of the
    ///autogeneration process.</remarks>
    ///
    ///<see cref="RabbitMQ.Client.Impl.ModelBase"/>
    ///<see cref="RabbitMQ.Client.Framing.Impl.Model"/>
    interface IFullModel : IModel
    {
        ///<summary>Handle incoming Basic.Ack methods. Signals a
        ///BasicAckEvent.</summary>
        ValueTask HandleBasicAck(ulong deliveryTag,bool multiple);

        ValueTask HandleBasicCancel(string consumerTag, bool nowait);

        ///<summary>Handle incoming Basic.CancelOk methods.</summary>
        ValueTask HandleBasicCancelOk(string consumerTag);

        ///<summary>Handle incoming Basic.ConsumeOk methods.</summary>
        [AmqpMethodDoNotImplement(null)]
        ValueTask HandleBasicConsumeOk(string consumerTag);

        ///<summary>Handle incoming Basic.Deliver methods. Dispatches
        ///to waiting consumers.</summary>
        ValueTask HandleBasicDeliver(string consumerTag,
            ulong deliveryTag,
            bool redelivered,
            string exchange,
            string routingKey,
            [AmqpContentHeaderMapping] IBasicProperties basicProperties,
            [AmqpContentBodyMapping] ReadOnlyMemory<byte> body);

        ///<summary>Handle incoming Basic.Nack methods. Signals a
        ///BasicNackEvent.</summary>
        ValueTask HandleBasicNack(ulong deliveryTag, bool multiple, bool requeue);

        ///<summary>Handle incoming Basic.RecoverOk methods
        ///received in reply to Basic.Recover.
        ///</summary>
        [AmqpMethodDoNotImplement(null)]
        ValueTask HandleBasicRecoverOk();

        ///<summary>Handle incoming Basic.Return methods. Signals a
        ///BasicReturnEvent.</summary>
        ValueTask HandleBasicReturn(ushort replyCode,
            string replyText,
            string exchange,
            string routingKey,
            [AmqpContentHeaderMapping] IBasicProperties basicProperties,
            [AmqpContentBodyMapping] ReadOnlyMemory<byte> body);

        ///<summary>Handle an incoming Channel.Close. Shuts down the
        ///session and model.</summary>
        ValueTask HandleChannelClose(ushort replyCode,
            string replyText,
            ushort classId,
            ushort methodId);

        ///<summary>Handle an incoming Channel.CloseOk.</summary>
        [AmqpMethodDoNotImplement(null)]
        ValueTask HandleChannelCloseOk();

        ///<summary>Handle incoming Channel.Flow methods. Either
        ///stops or resumes sending the methods that have content.</summary>
        ValueTask HandleChannelFlow(bool active);

        ///<summary>Handle incoming Queue.DeclareOk methods. Routes the
        ///information to a waiting Queue.DeclareOk continuation.</summary>
        [AmqpMethodDoNotImplement(null)]
        ValueTask HandleQueueDeclareOk(string queue,
            uint messageCount,
            uint consumerCount);
    }


    ///<summary>Essential information from an incoming Connection.Tune
    ///method.</summary>
    struct ConnectionTuneDetails
    {
        ///<summary>The peer's suggested channel-max parameter.</summary>
        public ushort m_channelMax;

        ///<summary>The peer's suggested frame-max parameter.</summary>
        public uint m_frameMax;

        ///<summary>The peer's suggested heartbeat parameter.</summary>
        public ushort m_heartbeatInSeconds;
    }


    class ConnectionSecureOrTune
    {
        public byte[] m_challenge;
        public ConnectionTuneDetails m_tuneDetails;
    }
}

namespace RabbitMQ.Client.Apigen.Attributes
{
    ///<summary>Base class for attributes for controlling the API
    ///autogeneration process.</summary>
    abstract class AmqpApigenAttribute : Attribute
    {
        ///<summary>The specification namespace (i.e. version) that
        ///this attribute applies to, or null for all specification
        ///versions.</summary>
        public string m_namespaceName;

        public AmqpApigenAttribute(string namespaceName)
        {
            m_namespaceName = namespaceName;
        }
    }


    ///<summary>Causes the API generator to ignore the attributed method.</summary>
    ///
    ///<remarks>Mostly used to declare convenience overloads of
    ///various AMQP methods in the IModel interface. Also used
    ///to omit an autogenerated implementation of a method which
    ///is not required for one protocol version. The API
    ///autogeneration process should of course not attempt to produce
    ///an implementation of the convenience methods, as they will be
    ///implemented by hand with sensible defaults, delegating to the
    ///autogenerated variant of the method concerned.</remarks>
    [AttributeUsage(AttributeTargets.All, AllowMultiple = true)]
    class AmqpMethodDoNotImplementAttribute : AmqpApigenAttribute
    {
        public AmqpMethodDoNotImplementAttribute(string namespaceName)
            : base(namespaceName)
        {
        }
    }


    ///<summary>Causes the API generator to generate asynchronous
    ///receive code for the attributed method.</summary>
    [AttributeUsage(AttributeTargets.All, AllowMultiple = true)]
    class AmqpAsynchronousHandlerAttribute : AmqpApigenAttribute
    {
        public AmqpAsynchronousHandlerAttribute(string namespaceName)
            : base(namespaceName)
        {
        }
    }


    ///<summary>Causes the API generator to generate
    ///exception-throwing code for, instead of simply ignoring, the
    ///attributed method.</summary>
    ///
    ///<see cref="AmqpMethodDoNotImplementAttribute"/>
    [AttributeUsage(AttributeTargets.All, AllowMultiple = true)]
    class AmqpUnsupportedAttribute : AmqpApigenAttribute
    {
        public AmqpUnsupportedAttribute(string namespaceName)
            : base(namespaceName)
        {
        }
    }


    ///<summary>Informs the API generator which AMQP method field to
    ///use for either a parameter in a request, or for a simple result
    ///in a reply.</summary>
    [AttributeUsage(AttributeTargets.All, AllowMultiple = true)]
    class AmqpFieldMappingAttribute : AmqpApigenAttribute
    {
        public string m_fieldName;

        public AmqpFieldMappingAttribute(string namespaceName,
            string fieldName)
            : base(namespaceName)
        {
            m_fieldName = fieldName;
        }
    }


    ///<summary>Informs the API generator which AMQP method to use for
    ///either a request (if applied to an IModel method) or a reply
    ///(if applied to an IModel method result).</summary>
    [AttributeUsage(AttributeTargets.All, AllowMultiple = true)]
    class AmqpMethodMappingAttribute : AmqpApigenAttribute
    {
        public string m_className;
        public string m_methodName;

        public AmqpMethodMappingAttribute(string namespaceName,
            string className,
            string methodName)
            : base(namespaceName)
        {
            m_className = className;
            m_methodName = methodName;
        }
    }


    ///<summary>This attribute, if placed on a parameter in an IModel
    ///method, causes it to be interpreted as a "nowait" parameter for
    ///the purposes of autogenerated RPC reply continuation management
    ///and control.</summary>
    [AttributeUsage(AttributeTargets.All, AllowMultiple = true)]
    class AmqpNowaitArgumentAttribute : AmqpApigenAttribute
    {
        public string m_replacementExpression;

        public AmqpNowaitArgumentAttribute(string namespaceName)
            : this(namespaceName, null)
        {
        }

        public AmqpNowaitArgumentAttribute(string namespaceName,
            string replacementExpression)
            : base(namespaceName)
        {
            m_replacementExpression = replacementExpression;
        }
    }


    ///<summary>This attribute, if placed on a method in IModel,
    ///causes the method to be interpreted as a factory method
    ///producing a protocol-specific implementation of a common
    ///content header interface.</summary>
    class AmqpContentHeaderFactoryAttribute : Attribute
    {
        public string m_contentClass;

        public AmqpContentHeaderFactoryAttribute(string contentClass)
        {
            m_contentClass = contentClass;
        }
    }


    ///<summary>This attribute, if placed on a parameter in a
    ///content-carrying IModel method, causes it to be sent as part of
    ///the content header frame.</summary>
    class AmqpContentHeaderMappingAttribute : Attribute
    {
    }


    ///<summary>This attribute, if placed on a parameter in a
    ///content-carrying IModel method, causes it to be sent as part of
    ///the content body frame.</summary>
    class AmqpContentBodyMappingAttribute : Attribute
    {
    }


    ///<summary>This attribute, placed on an IModel method, causes
    ///what would normally be an RPC, sent with ModelRpc, to be sent
    ///as if it were oneway, with ModelSend. The assumption that this
    ///is for a custom continuation (e.g. for BasicConsume/BasicCancel
    ///etc.)</summary>
    class AmqpForceOneWayAttribute : Attribute
    {
    }
}

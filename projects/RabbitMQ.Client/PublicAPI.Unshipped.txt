abstract RabbitMQ.Client.Exceptions.ProtocolException.ReplyCode.get -> ushort
const RabbitMQ.Client.AmqpTcpEndpoint.DefaultAmqpSslPort = 5671 -> int
const RabbitMQ.Client.AmqpTcpEndpoint.UseDefaultPort = -1 -> int
const RabbitMQ.Client.ConnectionFactory.DefaultChannelMax = 2047 -> ushort
const RabbitMQ.Client.ConnectionFactory.DefaultCopyBodyToMemoryThreshold = 2147483647 -> int
const RabbitMQ.Client.ConnectionFactory.DefaultFrameMax = 0 -> uint
const RabbitMQ.Client.ConnectionFactory.DefaultMaxMessageSize = 134217728 -> uint
const RabbitMQ.Client.ConnectionFactory.DefaultPass = "guest" -> string
const RabbitMQ.Client.ConnectionFactory.DefaultUser = "guest" -> string
const RabbitMQ.Client.ConnectionFactory.DefaultVHost = "/" -> string
const RabbitMQ.Client.ConnectionFactory.MaximumMaxMessageSize = 536870912 -> uint
const RabbitMQ.Client.Constants.AccessRefused = 403 -> int
const RabbitMQ.Client.Constants.ChannelError = 504 -> int
const RabbitMQ.Client.Constants.CommandInvalid = 503 -> int
const RabbitMQ.Client.Constants.ConnectionForced = 320 -> int
const RabbitMQ.Client.Constants.ContentTooLarge = 311 -> int
const RabbitMQ.Client.Constants.FrameBody = 3 -> int
const RabbitMQ.Client.Constants.FrameEnd = 206 -> int
const RabbitMQ.Client.Constants.FrameError = 501 -> int
const RabbitMQ.Client.Constants.FrameHeader = 2 -> int
const RabbitMQ.Client.Constants.FrameHeartbeat = 8 -> int
const RabbitMQ.Client.Constants.FrameMethod = 1 -> int
const RabbitMQ.Client.Constants.FrameMinSize = 4096 -> int
const RabbitMQ.Client.Constants.InternalError = 541 -> int
const RabbitMQ.Client.Constants.InvalidPath = 402 -> int
const RabbitMQ.Client.Constants.NoConsumers = 313 -> int
const RabbitMQ.Client.Constants.NoRoute = 312 -> int
const RabbitMQ.Client.Constants.NotAllowed = 530 -> int
const RabbitMQ.Client.Constants.NotFound = 404 -> int
const RabbitMQ.Client.Constants.NotImplemented = 540 -> int
const RabbitMQ.Client.Constants.PreconditionFailed = 406 -> int
const RabbitMQ.Client.Constants.ReplySuccess = 200 -> int
const RabbitMQ.Client.Constants.ResourceError = 506 -> int
const RabbitMQ.Client.Constants.ResourceLocked = 405 -> int
const RabbitMQ.Client.Constants.SyntaxError = 502 -> int
const RabbitMQ.Client.Constants.UnexpectedFrame = 505 -> int
const RabbitMQ.Client.ExchangeType.Direct = "direct" -> string
const RabbitMQ.Client.ExchangeType.Fanout = "fanout" -> string
const RabbitMQ.Client.ExchangeType.Headers = "headers" -> string
const RabbitMQ.Client.ExchangeType.Topic = "topic" -> string
const RabbitMQ.Client.Headers.AlternateExchange = "alternate-exchange" -> string
const RabbitMQ.Client.Headers.XDeadLetterExchange = "x-dead-letter-exchange" -> string
const RabbitMQ.Client.Headers.XDeadLetterRoutingKey = "x-dead-letter-routing-key" -> string
const RabbitMQ.Client.Headers.XExpires = "x-expires" -> string
const RabbitMQ.Client.Headers.XMaxAge = "x-max-age" -> string
const RabbitMQ.Client.Headers.XMaxLength = "x-max-length" -> string
const RabbitMQ.Client.Headers.XMaxLengthInBytes = "x-max-length-bytes" -> string
const RabbitMQ.Client.Headers.XMaxPriority = "x-max-priority" -> string
const RabbitMQ.Client.Headers.XMessageTTL = "x-message-ttl" -> string
const RabbitMQ.Client.Headers.XOverflow = "x-overflow" -> string
const RabbitMQ.Client.Headers.XPriority = "x-priority" -> string
const RabbitMQ.Client.Headers.XQueueMode = "x-queue-mode" -> string
const RabbitMQ.Client.Headers.XQueueType = "x-queue-type" -> string
const RabbitMQ.Client.Headers.XQuorumInitialGroupSize = "x-quorum-initial-group-size" -> string
const RabbitMQ.Client.Headers.XSingleActiveConsumer = "x-single-active-consumer" -> string
const RabbitMQ.Client.Headers.XStreamMaxSegmentSizeInBytes = "x-stream-max-segment-size-bytes" -> string
const RabbitMQ.Client.Headers.XStreamOffset = "x-stream-offset" -> string
override RabbitMQ.Client.AmqpTcpEndpoint.Equals(object obj) -> bool
override RabbitMQ.Client.AmqpTcpEndpoint.GetHashCode() -> int
override RabbitMQ.Client.AmqpTcpEndpoint.ToString() -> string
override RabbitMQ.Client.AmqpTimestamp.Equals(object obj) -> bool
override RabbitMQ.Client.AmqpTimestamp.GetHashCode() -> int
override RabbitMQ.Client.AmqpTimestamp.ToString() -> string
override RabbitMQ.Client.Events.AsyncEventingBasicConsumer.HandleBasicCancelOk(string consumerTag) -> System.Threading.Tasks.Task
override RabbitMQ.Client.Events.AsyncEventingBasicConsumer.HandleBasicConsumeOk(string consumerTag) -> System.Threading.Tasks.Task
override RabbitMQ.Client.Events.AsyncEventingBasicConsumer.HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, in RabbitMQ.Client.ReadOnlyBasicProperties properties, System.ReadOnlyMemory<byte> body) -> System.Threading.Tasks.Task
override RabbitMQ.Client.Events.AsyncEventingBasicConsumer.HandleChannelShutdown(object channel, RabbitMQ.Client.ShutdownEventArgs reason) -> System.Threading.Tasks.Task
override RabbitMQ.Client.Events.EventingBasicConsumer.HandleBasicCancelOk(string consumerTag) -> void
override RabbitMQ.Client.Events.EventingBasicConsumer.HandleBasicConsumeOk(string consumerTag) -> void
override RabbitMQ.Client.Events.EventingBasicConsumer.HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, in RabbitMQ.Client.ReadOnlyBasicProperties properties, System.ReadOnlyMemory<byte> body) -> void
override RabbitMQ.Client.Events.EventingBasicConsumer.HandleChannelShutdown(object channel, RabbitMQ.Client.ShutdownEventArgs reason) -> void
override RabbitMQ.Client.Exceptions.MalformedFrameException.ReplyCode.get -> ushort
override RabbitMQ.Client.Exceptions.SyntaxErrorException.ReplyCode.get -> ushort
override RabbitMQ.Client.Exceptions.UnexpectedFrameException.ReplyCode.get -> ushort
override RabbitMQ.Client.Exceptions.UnknownClassOrMethodException.ReplyCode.get -> ushort
override RabbitMQ.Client.Exceptions.UnknownClassOrMethodException.ToString() -> string
override RabbitMQ.Client.Logging.RabbitMqExceptionDetail.ToString() -> string
override RabbitMQ.Client.PublicationAddress.ToString() -> string
override RabbitMQ.Client.ShutdownEventArgs.ToString() -> string
override RabbitMQ.Client.ShutdownReportEntry.ToString() -> string
RabbitMQ.Client.AmqpTcpEndpoint
RabbitMQ.Client.AmqpTcpEndpoint.AddressFamily.get -> System.Net.Sockets.AddressFamily
RabbitMQ.Client.AmqpTcpEndpoint.AddressFamily.set -> void
RabbitMQ.Client.AmqpTcpEndpoint.AmqpTcpEndpoint() -> void
RabbitMQ.Client.AmqpTcpEndpoint.AmqpTcpEndpoint(string hostName, int portOrMinusOne = -1) -> void
RabbitMQ.Client.AmqpTcpEndpoint.AmqpTcpEndpoint(string hostName, int portOrMinusOne, RabbitMQ.Client.SslOption ssl) -> void
RabbitMQ.Client.AmqpTcpEndpoint.AmqpTcpEndpoint(string hostName, int portOrMinusOne, RabbitMQ.Client.SslOption ssl, uint maxMessageSize) -> void
RabbitMQ.Client.AmqpTcpEndpoint.AmqpTcpEndpoint(System.Uri uri) -> void
RabbitMQ.Client.AmqpTcpEndpoint.AmqpTcpEndpoint(System.Uri uri, RabbitMQ.Client.SslOption ssl) -> void
RabbitMQ.Client.AmqpTcpEndpoint.Clone() -> object
RabbitMQ.Client.AmqpTcpEndpoint.CloneWithHostname(string hostname) -> RabbitMQ.Client.AmqpTcpEndpoint
RabbitMQ.Client.AmqpTcpEndpoint.HostName.get -> string
RabbitMQ.Client.AmqpTcpEndpoint.HostName.set -> void
RabbitMQ.Client.AmqpTcpEndpoint.MaxMessageSize.get -> uint
RabbitMQ.Client.AmqpTcpEndpoint.Port.get -> int
RabbitMQ.Client.AmqpTcpEndpoint.Port.set -> void
RabbitMQ.Client.AmqpTcpEndpoint.Protocol.get -> RabbitMQ.Client.IProtocol
RabbitMQ.Client.AmqpTcpEndpoint.Ssl.get -> RabbitMQ.Client.SslOption
RabbitMQ.Client.AmqpTcpEndpoint.Ssl.set -> void
RabbitMQ.Client.AmqpTimestamp
RabbitMQ.Client.AmqpTimestamp.AmqpTimestamp() -> void
RabbitMQ.Client.AmqpTimestamp.AmqpTimestamp(long unixTime) -> void
RabbitMQ.Client.AmqpTimestamp.Equals(RabbitMQ.Client.AmqpTimestamp other) -> bool
RabbitMQ.Client.AsyncDefaultBasicConsumer
RabbitMQ.Client.AsyncDefaultBasicConsumer.AsyncDefaultBasicConsumer() -> void
RabbitMQ.Client.AsyncDefaultBasicConsumer.AsyncDefaultBasicConsumer(RabbitMQ.Client.IChannel channel) -> void
RabbitMQ.Client.AsyncDefaultBasicConsumer.Channel.get -> RabbitMQ.Client.IChannel
RabbitMQ.Client.AsyncDefaultBasicConsumer.Channel.set -> void
RabbitMQ.Client.AsyncDefaultBasicConsumer.ConsumerCancelled -> RabbitMQ.Client.Events.AsyncEventHandler<RabbitMQ.Client.Events.ConsumerEventArgs>
RabbitMQ.Client.AsyncDefaultBasicConsumer.ConsumerTags.get -> string[]
RabbitMQ.Client.AsyncDefaultBasicConsumer.IsRunning.get -> bool
RabbitMQ.Client.AsyncDefaultBasicConsumer.IsRunning.set -> void
RabbitMQ.Client.AsyncDefaultBasicConsumer.ShutdownReason.get -> RabbitMQ.Client.ShutdownEventArgs
RabbitMQ.Client.AsyncDefaultBasicConsumer.ShutdownReason.set -> void
RabbitMQ.Client.BasicCredentialsProvider
RabbitMQ.Client.BasicCredentialsProvider.BasicCredentialsProvider(string name, string userName, string password) -> void
RabbitMQ.Client.BasicCredentialsProvider.Name.get -> string
RabbitMQ.Client.BasicCredentialsProvider.Password.get -> string
RabbitMQ.Client.BasicCredentialsProvider.Refresh() -> void
RabbitMQ.Client.BasicCredentialsProvider.UserName.get -> string
RabbitMQ.Client.BasicCredentialsProvider.ValidUntil.get -> System.TimeSpan?
RabbitMQ.Client.BasicGetResult
RabbitMQ.Client.BasicGetResult.BasicGetResult(ulong deliveryTag, bool redelivered, string exchange, string routingKey, uint messageCount, in RabbitMQ.Client.ReadOnlyBasicProperties basicProperties, System.ReadOnlyMemory<byte> body) -> void
RabbitMQ.Client.BasicProperties
RabbitMQ.Client.BasicProperties.AppId.get -> string
RabbitMQ.Client.BasicProperties.AppId.set -> void
RabbitMQ.Client.BasicProperties.BasicProperties() -> void
RabbitMQ.Client.BasicProperties.BasicProperties(in RabbitMQ.Client.ReadOnlyBasicProperties input) -> void
RabbitMQ.Client.BasicProperties.ClearAppId() -> void
RabbitMQ.Client.BasicProperties.ClearClusterId() -> void
RabbitMQ.Client.BasicProperties.ClearContentEncoding() -> void
RabbitMQ.Client.BasicProperties.ClearContentType() -> void
RabbitMQ.Client.BasicProperties.ClearCorrelationId() -> void
RabbitMQ.Client.BasicProperties.ClearDeliveryMode() -> void
RabbitMQ.Client.BasicProperties.ClearExpiration() -> void
RabbitMQ.Client.BasicProperties.ClearHeaders() -> void
RabbitMQ.Client.BasicProperties.ClearMessageId() -> void
RabbitMQ.Client.BasicProperties.ClearPriority() -> void
RabbitMQ.Client.BasicProperties.ClearReplyTo() -> void
RabbitMQ.Client.BasicProperties.ClearTimestamp() -> void
RabbitMQ.Client.BasicProperties.ClearType() -> void
RabbitMQ.Client.BasicProperties.ClearUserId() -> void
RabbitMQ.Client.BasicProperties.ClusterId.get -> string
RabbitMQ.Client.BasicProperties.ClusterId.set -> void
RabbitMQ.Client.BasicProperties.ContentEncoding.get -> string
RabbitMQ.Client.BasicProperties.ContentEncoding.set -> void
RabbitMQ.Client.BasicProperties.ContentType.get -> string
RabbitMQ.Client.BasicProperties.ContentType.set -> void
RabbitMQ.Client.BasicProperties.CorrelationId.get -> string
RabbitMQ.Client.BasicProperties.CorrelationId.set -> void
RabbitMQ.Client.BasicProperties.DeliveryMode.get -> RabbitMQ.Client.DeliveryModes
RabbitMQ.Client.BasicProperties.DeliveryMode.set -> void
RabbitMQ.Client.BasicProperties.Expiration.get -> string
RabbitMQ.Client.BasicProperties.Expiration.set -> void
RabbitMQ.Client.BasicProperties.Headers.get -> System.Collections.Generic.IDictionary<string, object>
RabbitMQ.Client.BasicProperties.Headers.set -> void
RabbitMQ.Client.BasicProperties.IsAppIdPresent() -> bool
RabbitMQ.Client.BasicProperties.IsClusterIdPresent() -> bool
RabbitMQ.Client.BasicProperties.IsContentEncodingPresent() -> bool
RabbitMQ.Client.BasicProperties.IsContentTypePresent() -> bool
RabbitMQ.Client.BasicProperties.IsCorrelationIdPresent() -> bool
RabbitMQ.Client.BasicProperties.IsDeliveryModePresent() -> bool
RabbitMQ.Client.BasicProperties.IsExpirationPresent() -> bool
RabbitMQ.Client.BasicProperties.IsHeadersPresent() -> bool
RabbitMQ.Client.BasicProperties.IsMessageIdPresent() -> bool
RabbitMQ.Client.BasicProperties.IsPriorityPresent() -> bool
RabbitMQ.Client.BasicProperties.IsReplyToPresent() -> bool
RabbitMQ.Client.BasicProperties.IsTimestampPresent() -> bool
RabbitMQ.Client.BasicProperties.IsTypePresent() -> bool
RabbitMQ.Client.BasicProperties.IsUserIdPresent() -> bool
RabbitMQ.Client.BasicProperties.MessageId.get -> string
RabbitMQ.Client.BasicProperties.MessageId.set -> void
RabbitMQ.Client.BasicProperties.Persistent.get -> bool
RabbitMQ.Client.BasicProperties.Persistent.set -> void
RabbitMQ.Client.BasicProperties.Priority.get -> byte
RabbitMQ.Client.BasicProperties.Priority.set -> void
RabbitMQ.Client.BasicProperties.ReplyTo.get -> string
RabbitMQ.Client.BasicProperties.ReplyTo.set -> void
RabbitMQ.Client.BasicProperties.ReplyToAddress.get -> RabbitMQ.Client.PublicationAddress
RabbitMQ.Client.BasicProperties.ReplyToAddress.set -> void
RabbitMQ.Client.BasicProperties.Timestamp.get -> RabbitMQ.Client.AmqpTimestamp
RabbitMQ.Client.BasicProperties.Timestamp.set -> void
RabbitMQ.Client.BasicProperties.Type.get -> string
RabbitMQ.Client.BasicProperties.Type.set -> void
RabbitMQ.Client.BasicProperties.UserId.get -> string
RabbitMQ.Client.BasicProperties.UserId.set -> void
RabbitMQ.Client.BinaryTableValue
RabbitMQ.Client.BinaryTableValue.BinaryTableValue() -> void
RabbitMQ.Client.BinaryTableValue.BinaryTableValue(byte[] bytes) -> void
RabbitMQ.Client.BinaryTableValue.Bytes.get -> byte[]
RabbitMQ.Client.BinaryTableValue.Bytes.set -> void
RabbitMQ.Client.CachedString
RabbitMQ.Client.CachedString.CachedString(string value) -> void
RabbitMQ.Client.CachedString.CachedString(string value, System.ReadOnlyMemory<byte> bytes) -> void
RabbitMQ.Client.CachedString.CachedString(System.ReadOnlyMemory<byte> bytes) -> void
RabbitMQ.Client.ConnectionConfig
RabbitMQ.Client.ConnectionConfig.CredentialsProvider -> RabbitMQ.Client.ICredentialsProvider
RabbitMQ.Client.ConnectionConfig.CredentialsRefresher -> RabbitMQ.Client.ICredentialsRefresher
RabbitMQ.Client.ConnectionFactory
RabbitMQ.Client.ConnectionFactory.AmqpUriSslProtocols.get -> System.Security.Authentication.SslProtocols
RabbitMQ.Client.ConnectionFactory.AmqpUriSslProtocols.set -> void
RabbitMQ.Client.ConnectionFactory.AuthMechanismFactory(System.Collections.Generic.IEnumerable<string> argServerMechanismNames) -> RabbitMQ.Client.IAuthMechanismFactory
RabbitMQ.Client.ConnectionFactory.AuthMechanisms.get -> System.Collections.Generic.IEnumerable<RabbitMQ.Client.IAuthMechanismFactory>
RabbitMQ.Client.ConnectionFactory.AuthMechanisms.set -> void
RabbitMQ.Client.ConnectionFactory.AutomaticRecoveryEnabled.get -> bool
RabbitMQ.Client.ConnectionFactory.AutomaticRecoveryEnabled.set -> void
RabbitMQ.Client.ConnectionFactory.ClientProperties.get -> System.Collections.Generic.IDictionary<string, object>
RabbitMQ.Client.ConnectionFactory.ClientProperties.set -> void
RabbitMQ.Client.ConnectionFactory.ClientProvidedName.get -> string
RabbitMQ.Client.ConnectionFactory.ClientProvidedName.set -> void
RabbitMQ.Client.ConnectionFactory.ConnectionFactory() -> void
RabbitMQ.Client.ConnectionFactory.ConsumerDispatchConcurrency.get -> int
RabbitMQ.Client.ConnectionFactory.ConsumerDispatchConcurrency.set -> void
RabbitMQ.Client.ConnectionFactory.ContinuationTimeout.get -> System.TimeSpan
RabbitMQ.Client.ConnectionFactory.ContinuationTimeout.set -> void
RabbitMQ.Client.ConnectionFactory.CopyBodyToMemoryThreshold.get -> int
RabbitMQ.Client.ConnectionFactory.CopyBodyToMemoryThreshold.set -> void
RabbitMQ.Client.ConnectionFactory.CreateConnection() -> RabbitMQ.Client.IConnection
RabbitMQ.Client.ConnectionFactory.CreateConnection(RabbitMQ.Client.IEndpointResolver endpointResolver, string clientProvidedName) -> RabbitMQ.Client.IConnection
RabbitMQ.Client.ConnectionFactory.CreateConnection(string clientProvidedName) -> RabbitMQ.Client.IConnection
RabbitMQ.Client.ConnectionFactory.CreateConnection(System.Collections.Generic.IEnumerable<RabbitMQ.Client.AmqpTcpEndpoint> endpoints) -> RabbitMQ.Client.IConnection
RabbitMQ.Client.ConnectionFactory.CreateConnection(System.Collections.Generic.IEnumerable<RabbitMQ.Client.AmqpTcpEndpoint> endpoints, string clientProvidedName) -> RabbitMQ.Client.IConnection
RabbitMQ.Client.ConnectionFactory.CreateConnection(System.Collections.Generic.IEnumerable<string> hostnames) -> RabbitMQ.Client.IConnection
RabbitMQ.Client.ConnectionFactory.CreateConnection(System.Collections.Generic.IEnumerable<string> hostnames, string clientProvidedName) -> RabbitMQ.Client.IConnection
RabbitMQ.Client.ConnectionFactory.CreateConnectionAsync(RabbitMQ.Client.IEndpointResolver endpointResolver, string clientProvidedName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<RabbitMQ.Client.IConnection>
RabbitMQ.Client.ConnectionFactory.CreateConnectionAsync(string clientProvidedName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<RabbitMQ.Client.IConnection>
RabbitMQ.Client.ConnectionFactory.CreateConnectionAsync(System.Collections.Generic.IEnumerable<RabbitMQ.Client.AmqpTcpEndpoint> endpoints, string clientProvidedName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<RabbitMQ.Client.IConnection>
RabbitMQ.Client.ConnectionFactory.CreateConnectionAsync(System.Collections.Generic.IEnumerable<RabbitMQ.Client.AmqpTcpEndpoint> endpoints, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<RabbitMQ.Client.IConnection>
RabbitMQ.Client.ConnectionFactory.CreateConnectionAsync(System.Collections.Generic.IEnumerable<string> hostnames, string clientProvidedName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<RabbitMQ.Client.IConnection>
RabbitMQ.Client.ConnectionFactory.CreateConnectionAsync(System.Collections.Generic.IEnumerable<string> hostnames, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<RabbitMQ.Client.IConnection>
RabbitMQ.Client.ConnectionFactory.CreateConnectionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<RabbitMQ.Client.IConnection>
RabbitMQ.Client.ConnectionFactory.CredentialsProvider.get -> RabbitMQ.Client.ICredentialsProvider
RabbitMQ.Client.ConnectionFactory.CredentialsProvider.set -> void
RabbitMQ.Client.ConnectionFactory.CredentialsRefresher.get -> RabbitMQ.Client.ICredentialsRefresher
RabbitMQ.Client.ConnectionFactory.CredentialsRefresher.set -> void
RabbitMQ.Client.ConnectionFactory.DispatchConsumersAsync.get -> bool
RabbitMQ.Client.ConnectionFactory.DispatchConsumersAsync.set -> void
RabbitMQ.Client.ConnectionFactory.Endpoint.get -> RabbitMQ.Client.AmqpTcpEndpoint
RabbitMQ.Client.ConnectionFactory.Endpoint.set -> void
RabbitMQ.Client.ConnectionFactory.EndpointResolverFactory.get -> System.Func<System.Collections.Generic.IEnumerable<RabbitMQ.Client.AmqpTcpEndpoint>, RabbitMQ.Client.IEndpointResolver>
RabbitMQ.Client.ConnectionFactory.EndpointResolverFactory.set -> void
RabbitMQ.Client.ConnectionFactory.HandshakeContinuationTimeout.get -> System.TimeSpan
RabbitMQ.Client.ConnectionFactory.HandshakeContinuationTimeout.set -> void
RabbitMQ.Client.ConnectionFactory.HostName.get -> string
RabbitMQ.Client.ConnectionFactory.HostName.set -> void
RabbitMQ.Client.ConnectionFactory.MaxMessageSize.get -> uint
RabbitMQ.Client.ConnectionFactory.MaxMessageSize.set -> void
RabbitMQ.Client.ConnectionFactory.NetworkRecoveryInterval.get -> System.TimeSpan
RabbitMQ.Client.ConnectionFactory.NetworkRecoveryInterval.set -> void
RabbitMQ.Client.ConnectionFactory.Password.get -> string
RabbitMQ.Client.ConnectionFactory.Password.set -> void
RabbitMQ.Client.ConnectionFactory.Port.get -> int
RabbitMQ.Client.ConnectionFactory.Port.set -> void
RabbitMQ.Client.ConnectionFactory.RequestedChannelMax.get -> ushort
RabbitMQ.Client.ConnectionFactory.RequestedChannelMax.set -> void
RabbitMQ.Client.ConnectionFactory.RequestedConnectionTimeout.get -> System.TimeSpan
RabbitMQ.Client.ConnectionFactory.RequestedConnectionTimeout.set -> void
RabbitMQ.Client.ConnectionFactory.RequestedFrameMax.get -> uint
RabbitMQ.Client.ConnectionFactory.RequestedFrameMax.set -> void
RabbitMQ.Client.ConnectionFactory.RequestedHeartbeat.get -> System.TimeSpan
RabbitMQ.Client.ConnectionFactory.RequestedHeartbeat.set -> void
RabbitMQ.Client.ConnectionFactory.SocketReadTimeout.get -> System.TimeSpan
RabbitMQ.Client.ConnectionFactory.SocketReadTimeout.set -> void
RabbitMQ.Client.ConnectionFactory.SocketWriteTimeout.get -> System.TimeSpan
RabbitMQ.Client.ConnectionFactory.SocketWriteTimeout.set -> void
RabbitMQ.Client.ConnectionFactory.Ssl.get -> RabbitMQ.Client.SslOption
RabbitMQ.Client.ConnectionFactory.Ssl.set -> void
RabbitMQ.Client.ConnectionFactory.TopologyRecoveryEnabled.get -> bool
RabbitMQ.Client.ConnectionFactory.TopologyRecoveryEnabled.set -> void
RabbitMQ.Client.ConnectionFactory.TopologyRecoveryExceptionHandler.get -> RabbitMQ.Client.TopologyRecoveryExceptionHandler
RabbitMQ.Client.ConnectionFactory.TopologyRecoveryExceptionHandler.set -> void
RabbitMQ.Client.ConnectionFactory.TopologyRecoveryFilter.get -> RabbitMQ.Client.TopologyRecoveryFilter
RabbitMQ.Client.ConnectionFactory.TopologyRecoveryFilter.set -> void
RabbitMQ.Client.ConnectionFactory.Uri.get -> System.Uri
RabbitMQ.Client.ConnectionFactory.Uri.set -> void
RabbitMQ.Client.ConnectionFactory.UserName.get -> string
RabbitMQ.Client.ConnectionFactory.UserName.set -> void
RabbitMQ.Client.ConnectionFactory.VirtualHost.get -> string
RabbitMQ.Client.ConnectionFactory.VirtualHost.set -> void
RabbitMQ.Client.ConnectionFactoryBase
RabbitMQ.Client.ConnectionFactoryBase.ConnectionFactoryBase() -> void
RabbitMQ.Client.ConnectionFactoryBase.SocketFactory -> System.Func<System.Net.Sockets.AddressFamily, RabbitMQ.Client.ITcpClient>
RabbitMQ.Client.Constants
RabbitMQ.Client.DefaultBasicConsumer
RabbitMQ.Client.DefaultBasicConsumer.Channel.get -> RabbitMQ.Client.IChannel
RabbitMQ.Client.DefaultBasicConsumer.Channel.set -> void
RabbitMQ.Client.DefaultBasicConsumer.ConsumerCancelled -> System.EventHandler<RabbitMQ.Client.Events.ConsumerEventArgs>
RabbitMQ.Client.DefaultBasicConsumer.ConsumerTags.get -> string[]
RabbitMQ.Client.DefaultBasicConsumer.DefaultBasicConsumer() -> void
RabbitMQ.Client.DefaultBasicConsumer.DefaultBasicConsumer(RabbitMQ.Client.IChannel channel) -> void
RabbitMQ.Client.DefaultBasicConsumer.IsRunning.get -> bool
RabbitMQ.Client.DefaultBasicConsumer.IsRunning.set -> void
RabbitMQ.Client.DefaultBasicConsumer.ShutdownReason.get -> RabbitMQ.Client.ShutdownEventArgs
RabbitMQ.Client.DefaultBasicConsumer.ShutdownReason.set -> void
RabbitMQ.Client.DefaultEndpointResolver
RabbitMQ.Client.DefaultEndpointResolver.All() -> System.Collections.Generic.IEnumerable<RabbitMQ.Client.AmqpTcpEndpoint>
RabbitMQ.Client.DefaultEndpointResolver.DefaultEndpointResolver(System.Collections.Generic.IEnumerable<RabbitMQ.Client.AmqpTcpEndpoint> tcpEndpoints) -> void
RabbitMQ.Client.DeliveryModes
RabbitMQ.Client.DeliveryModes.Persistent = 2 -> RabbitMQ.Client.DeliveryModes
RabbitMQ.Client.DeliveryModes.Transient = 1 -> RabbitMQ.Client.DeliveryModes
RabbitMQ.Client.EndpointResolverExtensions
RabbitMQ.Client.Events.AsyncEventHandler<TEvent>
RabbitMQ.Client.Events.AsyncEventingBasicConsumer
RabbitMQ.Client.Events.AsyncEventingBasicConsumer.AsyncEventingBasicConsumer(RabbitMQ.Client.IChannel channel) -> void
RabbitMQ.Client.Events.AsyncEventingBasicConsumer.Received -> RabbitMQ.Client.Events.AsyncEventHandler<RabbitMQ.Client.Events.BasicDeliverEventArgs>
RabbitMQ.Client.Events.AsyncEventingBasicConsumer.Registered -> RabbitMQ.Client.Events.AsyncEventHandler<RabbitMQ.Client.Events.ConsumerEventArgs>
RabbitMQ.Client.Events.AsyncEventingBasicConsumer.Shutdown -> RabbitMQ.Client.Events.AsyncEventHandler<RabbitMQ.Client.ShutdownEventArgs>
RabbitMQ.Client.Events.AsyncEventingBasicConsumer.Unregistered -> RabbitMQ.Client.Events.AsyncEventHandler<RabbitMQ.Client.Events.ConsumerEventArgs>
RabbitMQ.Client.Events.BaseExceptionEventArgs
RabbitMQ.Client.Events.BaseExceptionEventArgs.BaseExceptionEventArgs(System.Collections.Generic.IDictionary<string, object> detail, System.Exception exception) -> void
RabbitMQ.Client.Events.BasicAckEventArgs
RabbitMQ.Client.Events.BasicAckEventArgs.BasicAckEventArgs(ulong deliveryTag, bool multiple) -> void
RabbitMQ.Client.Events.BasicDeliverEventArgs
RabbitMQ.Client.Events.BasicDeliverEventArgs.BasicDeliverEventArgs(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, in RabbitMQ.Client.ReadOnlyBasicProperties properties, System.ReadOnlyMemory<byte> body) -> void
RabbitMQ.Client.Events.BasicNackEventArgs
RabbitMQ.Client.Events.BasicNackEventArgs.BasicNackEventArgs(ulong deliveryTag, bool multiple, bool requeue) -> void
RabbitMQ.Client.Events.BasicReturnEventArgs
RabbitMQ.Client.Events.BasicReturnEventArgs.BasicReturnEventArgs(ushort replyCode, string replyText, string exchange, string routingKey, RabbitMQ.Client.ReadOnlyBasicProperties basicProperties, System.ReadOnlyMemory<byte> body) -> void
RabbitMQ.Client.Events.CallbackExceptionEventArgs
RabbitMQ.Client.Events.CallbackExceptionEventArgs.CallbackExceptionEventArgs(System.Collections.Generic.IDictionary<string, object> detail, System.Exception exception) -> void
RabbitMQ.Client.Events.ConnectionBlockedEventArgs
RabbitMQ.Client.Events.ConnectionBlockedEventArgs.ConnectionBlockedEventArgs(string reason) -> void
RabbitMQ.Client.Events.ConnectionRecoveryErrorEventArgs
RabbitMQ.Client.Events.ConnectionRecoveryErrorEventArgs.ConnectionRecoveryErrorEventArgs(System.Exception ex) -> void
RabbitMQ.Client.Events.ConsumerEventArgs
RabbitMQ.Client.Events.ConsumerEventArgs.ConsumerEventArgs(string[] consumerTags) -> void
RabbitMQ.Client.Events.ConsumerTagChangedAfterRecoveryEventArgs
RabbitMQ.Client.Events.ConsumerTagChangedAfterRecoveryEventArgs.ConsumerTagChangedAfterRecoveryEventArgs(string tagBefore, string tagAfter) -> void
RabbitMQ.Client.Events.EventingBasicConsumer
RabbitMQ.Client.Events.EventingBasicConsumer.EventingBasicConsumer(RabbitMQ.Client.IChannel channel) -> void
RabbitMQ.Client.Events.EventingBasicConsumer.Received -> System.EventHandler<RabbitMQ.Client.Events.BasicDeliverEventArgs>
RabbitMQ.Client.Events.EventingBasicConsumer.Registered -> System.EventHandler<RabbitMQ.Client.Events.ConsumerEventArgs>
RabbitMQ.Client.Events.EventingBasicConsumer.Shutdown -> System.EventHandler<RabbitMQ.Client.ShutdownEventArgs>
RabbitMQ.Client.Events.EventingBasicConsumer.Unregistered -> System.EventHandler<RabbitMQ.Client.Events.ConsumerEventArgs>
RabbitMQ.Client.Events.FlowControlEventArgs
RabbitMQ.Client.Events.FlowControlEventArgs.FlowControlEventArgs(bool active) -> void
RabbitMQ.Client.Events.QueueNameChangedAfterRecoveryEventArgs
RabbitMQ.Client.Events.QueueNameChangedAfterRecoveryEventArgs.QueueNameChangedAfterRecoveryEventArgs(string nameBefore, string nameAfter) -> void
RabbitMQ.Client.Events.RecoveringConsumerEventArgs
RabbitMQ.Client.Events.RecoveringConsumerEventArgs.ConsumerArguments.get -> System.Collections.Generic.IDictionary<string, object>
RabbitMQ.Client.Events.RecoveringConsumerEventArgs.ConsumerTag.get -> string
RabbitMQ.Client.Events.RecoveringConsumerEventArgs.RecoveringConsumerEventArgs(string consumerTag, System.Collections.Generic.IDictionary<string, object> consumerArguments) -> void
RabbitMQ.Client.Exceptions.AlreadyClosedException
RabbitMQ.Client.Exceptions.AlreadyClosedException.AlreadyClosedException(RabbitMQ.Client.ShutdownEventArgs reason) -> void
RabbitMQ.Client.Exceptions.AuthenticationFailureException
RabbitMQ.Client.Exceptions.AuthenticationFailureException.AuthenticationFailureException(string msg) -> void
RabbitMQ.Client.Exceptions.BrokerUnreachableException
RabbitMQ.Client.Exceptions.BrokerUnreachableException.BrokerUnreachableException(System.Exception Inner) -> void
RabbitMQ.Client.Exceptions.ChannelAllocationException
RabbitMQ.Client.Exceptions.ChannelAllocationException.Channel.get -> int
RabbitMQ.Client.Exceptions.ChannelAllocationException.ChannelAllocationException() -> void
RabbitMQ.Client.Exceptions.ChannelAllocationException.ChannelAllocationException(int channel) -> void
RabbitMQ.Client.Exceptions.ConnectFailureException
RabbitMQ.Client.Exceptions.ConnectFailureException.ConnectFailureException(string msg, System.Exception inner) -> void
RabbitMQ.Client.Exceptions.HardProtocolException
RabbitMQ.Client.Exceptions.HardProtocolException.CanShutdownCleanly.get -> bool
RabbitMQ.Client.Exceptions.HardProtocolException.HardProtocolException(string message) -> void
RabbitMQ.Client.Exceptions.HardProtocolException.HardProtocolException(string message, bool canShutdownCleanly) -> void
RabbitMQ.Client.Exceptions.MalformedFrameException
RabbitMQ.Client.Exceptions.MalformedFrameException.MalformedFrameException(string message) -> void
RabbitMQ.Client.Exceptions.MalformedFrameException.MalformedFrameException(string message, bool canShutdownCleanly) -> void
RabbitMQ.Client.Exceptions.OperationInterruptedException
RabbitMQ.Client.Exceptions.OperationInterruptedException.OperationInterruptedException() -> void
RabbitMQ.Client.Exceptions.OperationInterruptedException.OperationInterruptedException(RabbitMQ.Client.ShutdownEventArgs reason) -> void
RabbitMQ.Client.Exceptions.OperationInterruptedException.OperationInterruptedException(RabbitMQ.Client.ShutdownEventArgs reason, string prefix) -> void
RabbitMQ.Client.Exceptions.OperationInterruptedException.OperationInterruptedException(string message) -> void
RabbitMQ.Client.Exceptions.OperationInterruptedException.OperationInterruptedException(string message, System.Exception inner) -> void
RabbitMQ.Client.Exceptions.OperationInterruptedException.ShutdownReason.get -> RabbitMQ.Client.ShutdownEventArgs
RabbitMQ.Client.Exceptions.OperationInterruptedException.ShutdownReason.set -> void
RabbitMQ.Client.Exceptions.PacketNotRecognizedException
RabbitMQ.Client.Exceptions.PacketNotRecognizedException.PacketNotRecognizedException(int transportHigh, int transportLow, int serverMajor, int serverMinor) -> void
RabbitMQ.Client.Exceptions.PacketNotRecognizedException.ServerMajor.get -> int
RabbitMQ.Client.Exceptions.PacketNotRecognizedException.ServerMinor.get -> int
RabbitMQ.Client.Exceptions.PacketNotRecognizedException.TransportHigh.get -> int
RabbitMQ.Client.Exceptions.PacketNotRecognizedException.TransportLow.get -> int
RabbitMQ.Client.Exceptions.PossibleAuthenticationFailureException
RabbitMQ.Client.Exceptions.PossibleAuthenticationFailureException.PossibleAuthenticationFailureException(string msg) -> void
RabbitMQ.Client.Exceptions.PossibleAuthenticationFailureException.PossibleAuthenticationFailureException(string msg, System.Exception inner) -> void
RabbitMQ.Client.Exceptions.ProtocolException
RabbitMQ.Client.Exceptions.ProtocolException.ProtocolException(string message) -> void
RabbitMQ.Client.Exceptions.ProtocolVersionMismatchException
RabbitMQ.Client.Exceptions.ProtocolVersionMismatchException.ClientMajor.get -> int
RabbitMQ.Client.Exceptions.ProtocolVersionMismatchException.ClientMinor.get -> int
RabbitMQ.Client.Exceptions.ProtocolVersionMismatchException.ProtocolVersionMismatchException(int clientMajor, int clientMinor, int serverMajor, int serverMinor) -> void
RabbitMQ.Client.Exceptions.ProtocolVersionMismatchException.ServerMajor.get -> int
RabbitMQ.Client.Exceptions.ProtocolVersionMismatchException.ServerMinor.get -> int
RabbitMQ.Client.Exceptions.ProtocolViolationException
RabbitMQ.Client.Exceptions.ProtocolViolationException.ProtocolViolationException() -> void
RabbitMQ.Client.Exceptions.ProtocolViolationException.ProtocolViolationException(string message) -> void
RabbitMQ.Client.Exceptions.ProtocolViolationException.ProtocolViolationException(string message, System.Exception inner) -> void
RabbitMQ.Client.Exceptions.RabbitMQClientException
RabbitMQ.Client.Exceptions.RabbitMQClientException.RabbitMQClientException() -> void
RabbitMQ.Client.Exceptions.RabbitMQClientException.RabbitMQClientException(string message) -> void
RabbitMQ.Client.Exceptions.RabbitMQClientException.RabbitMQClientException(string message, System.Exception innerException) -> void
RabbitMQ.Client.Exceptions.SyntaxErrorException
RabbitMQ.Client.Exceptions.SyntaxErrorException.SyntaxErrorException(string message) -> void
RabbitMQ.Client.Exceptions.TopologyRecoveryException
RabbitMQ.Client.Exceptions.TopologyRecoveryException.TopologyRecoveryException(string message, System.Exception cause) -> void
RabbitMQ.Client.Exceptions.UnexpectedFrameException
RabbitMQ.Client.Exceptions.UnexpectedMethodException
RabbitMQ.Client.Exceptions.UnexpectedMethodException.ExpectedProtocolClassId.get -> ushort
RabbitMQ.Client.Exceptions.UnexpectedMethodException.ExpectedProtocolMethodId.get -> ushort
RabbitMQ.Client.Exceptions.UnexpectedMethodException.ExpectedProtocolMethodName.get -> string
RabbitMQ.Client.Exceptions.UnexpectedMethodException.ProtocolClassId.get -> ushort
RabbitMQ.Client.Exceptions.UnexpectedMethodException.ProtocolMethodId.get -> ushort
RabbitMQ.Client.Exceptions.UnexpectedMethodException.ProtocolMethodName.get -> string
RabbitMQ.Client.Exceptions.UnknownClassOrMethodException
RabbitMQ.Client.Exceptions.UnknownClassOrMethodException.ClassId.get -> ushort
RabbitMQ.Client.Exceptions.UnknownClassOrMethodException.MethodId.get -> ushort
RabbitMQ.Client.Exceptions.UnknownClassOrMethodException.UnknownClassOrMethodException(ushort classId, ushort methodId) -> void
RabbitMQ.Client.Exceptions.WireFormattingException
RabbitMQ.Client.Exceptions.WireFormattingException.Offender.get -> object
RabbitMQ.Client.Exceptions.WireFormattingException.WireFormattingException(string message) -> void
RabbitMQ.Client.Exceptions.WireFormattingException.WireFormattingException(string message, object offender) -> void
RabbitMQ.Client.ExchangeType
RabbitMQ.Client.ExternalMechanism
RabbitMQ.Client.ExternalMechanism.ExternalMechanism() -> void
RabbitMQ.Client.ExternalMechanism.handleChallenge(byte[] challenge, RabbitMQ.Client.ConnectionConfig config) -> byte[]
RabbitMQ.Client.ExternalMechanismFactory
RabbitMQ.Client.ExternalMechanismFactory.ExternalMechanismFactory() -> void
RabbitMQ.Client.ExternalMechanismFactory.GetInstance() -> RabbitMQ.Client.IAuthMechanism
RabbitMQ.Client.ExternalMechanismFactory.Name.get -> string
RabbitMQ.Client.Headers
RabbitMQ.Client.IAmqpHeader
RabbitMQ.Client.IAmqpHeader.ProtocolClassId.get -> ushort
RabbitMQ.Client.IAmqpWriteable
RabbitMQ.Client.IAmqpWriteable.GetRequiredBufferSize() -> int
RabbitMQ.Client.IAmqpWriteable.WriteTo(System.Span<byte> span) -> int
RabbitMQ.Client.IAsyncBasicConsumer
RabbitMQ.Client.IAsyncBasicConsumer.Channel.get -> RabbitMQ.Client.IChannel
RabbitMQ.Client.IAsyncBasicConsumer.ConsumerCancelled -> RabbitMQ.Client.Events.AsyncEventHandler<RabbitMQ.Client.Events.ConsumerEventArgs>
RabbitMQ.Client.IAsyncBasicConsumer.HandleBasicCancel(string consumerTag) -> System.Threading.Tasks.Task
RabbitMQ.Client.IAsyncBasicConsumer.HandleBasicCancelOk(string consumerTag) -> System.Threading.Tasks.Task
RabbitMQ.Client.IAsyncBasicConsumer.HandleBasicConsumeOk(string consumerTag) -> System.Threading.Tasks.Task
RabbitMQ.Client.IAsyncBasicConsumer.HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, in RabbitMQ.Client.ReadOnlyBasicProperties properties, System.ReadOnlyMemory<byte> body) -> System.Threading.Tasks.Task
RabbitMQ.Client.IAsyncBasicConsumer.HandleChannelShutdown(object channel, RabbitMQ.Client.ShutdownEventArgs reason) -> System.Threading.Tasks.Task
RabbitMQ.Client.IAuthMechanism
RabbitMQ.Client.IAuthMechanism.handleChallenge(byte[] challenge, RabbitMQ.Client.ConnectionConfig config) -> byte[]
RabbitMQ.Client.IAuthMechanismFactory
RabbitMQ.Client.IAuthMechanismFactory.GetInstance() -> RabbitMQ.Client.IAuthMechanism
RabbitMQ.Client.IAuthMechanismFactory.Name.get -> string
RabbitMQ.Client.IBasicConsumer
RabbitMQ.Client.IBasicConsumer.Channel.get -> RabbitMQ.Client.IChannel
RabbitMQ.Client.IBasicConsumer.ConsumerCancelled -> System.EventHandler<RabbitMQ.Client.Events.ConsumerEventArgs>
RabbitMQ.Client.IBasicConsumer.HandleBasicCancel(string consumerTag) -> void
RabbitMQ.Client.IBasicConsumer.HandleBasicCancelOk(string consumerTag) -> void
RabbitMQ.Client.IBasicConsumer.HandleBasicConsumeOk(string consumerTag) -> void
RabbitMQ.Client.IBasicConsumer.HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, in RabbitMQ.Client.ReadOnlyBasicProperties properties, System.ReadOnlyMemory<byte> body) -> void
RabbitMQ.Client.IBasicConsumer.HandleChannelShutdown(object channel, RabbitMQ.Client.ShutdownEventArgs reason) -> void
RabbitMQ.Client.IBasicProperties
RabbitMQ.Client.IBasicProperties.AppId.get -> string
RabbitMQ.Client.IBasicProperties.AppId.set -> void
RabbitMQ.Client.IBasicProperties.ClearAppId() -> void
RabbitMQ.Client.IBasicProperties.ClearClusterId() -> void
RabbitMQ.Client.IBasicProperties.ClearContentEncoding() -> void
RabbitMQ.Client.IBasicProperties.ClearContentType() -> void
RabbitMQ.Client.IBasicProperties.ClearCorrelationId() -> void
RabbitMQ.Client.IBasicProperties.ClearDeliveryMode() -> void
RabbitMQ.Client.IBasicProperties.ClearExpiration() -> void
RabbitMQ.Client.IBasicProperties.ClearHeaders() -> void
RabbitMQ.Client.IBasicProperties.ClearMessageId() -> void
RabbitMQ.Client.IBasicProperties.ClearPriority() -> void
RabbitMQ.Client.IBasicProperties.ClearReplyTo() -> void
RabbitMQ.Client.IBasicProperties.ClearTimestamp() -> void
RabbitMQ.Client.IBasicProperties.ClearType() -> void
RabbitMQ.Client.IBasicProperties.ClearUserId() -> void
RabbitMQ.Client.IBasicProperties.ClusterId.get -> string
RabbitMQ.Client.IBasicProperties.ClusterId.set -> void
RabbitMQ.Client.IBasicProperties.ContentEncoding.get -> string
RabbitMQ.Client.IBasicProperties.ContentEncoding.set -> void
RabbitMQ.Client.IBasicProperties.ContentType.get -> string
RabbitMQ.Client.IBasicProperties.ContentType.set -> void
RabbitMQ.Client.IBasicProperties.CorrelationId.get -> string
RabbitMQ.Client.IBasicProperties.CorrelationId.set -> void
RabbitMQ.Client.IBasicProperties.DeliveryMode.get -> RabbitMQ.Client.DeliveryModes
RabbitMQ.Client.IBasicProperties.DeliveryMode.set -> void
RabbitMQ.Client.IBasicProperties.Expiration.get -> string
RabbitMQ.Client.IBasicProperties.Expiration.set -> void
RabbitMQ.Client.IBasicProperties.Headers.get -> System.Collections.Generic.IDictionary<string, object>
RabbitMQ.Client.IBasicProperties.Headers.set -> void
RabbitMQ.Client.IBasicProperties.MessageId.get -> string
RabbitMQ.Client.IBasicProperties.MessageId.set -> void
RabbitMQ.Client.IBasicProperties.Persistent.get -> bool
RabbitMQ.Client.IBasicProperties.Persistent.set -> void
RabbitMQ.Client.IBasicProperties.Priority.get -> byte
RabbitMQ.Client.IBasicProperties.Priority.set -> void
RabbitMQ.Client.IBasicProperties.ReplyTo.get -> string
RabbitMQ.Client.IBasicProperties.ReplyTo.set -> void
RabbitMQ.Client.IBasicProperties.ReplyToAddress.get -> RabbitMQ.Client.PublicationAddress
RabbitMQ.Client.IBasicProperties.ReplyToAddress.set -> void
RabbitMQ.Client.IBasicProperties.Timestamp.get -> RabbitMQ.Client.AmqpTimestamp
RabbitMQ.Client.IBasicProperties.Timestamp.set -> void
RabbitMQ.Client.IBasicProperties.Type.get -> string
RabbitMQ.Client.IBasicProperties.Type.set -> void
RabbitMQ.Client.IBasicProperties.UserId.get -> string
RabbitMQ.Client.IBasicProperties.UserId.set -> void
RabbitMQ.Client.IChannel
RabbitMQ.Client.IChannel.BasicAck(ulong deliveryTag, bool multiple) -> void
RabbitMQ.Client.IChannel.BasicAckAsync(ulong deliveryTag, bool multiple) -> System.Threading.Tasks.ValueTask
RabbitMQ.Client.IChannel.BasicAcks -> System.EventHandler<RabbitMQ.Client.Events.BasicAckEventArgs>
RabbitMQ.Client.IChannel.BasicCancel(string consumerTag) -> void
RabbitMQ.Client.IChannel.BasicCancelAsync(string consumerTag) -> System.Threading.Tasks.ValueTask
RabbitMQ.Client.IChannel.BasicCancelNoWait(string consumerTag) -> void
RabbitMQ.Client.IChannel.BasicConsume(string queue, bool autoAck, string consumerTag, bool noLocal, bool exclusive, System.Collections.Generic.IDictionary<string, object> arguments, RabbitMQ.Client.IBasicConsumer consumer) -> string
RabbitMQ.Client.IChannel.BasicConsumeAsync(string queue, bool autoAck, string consumerTag, bool noLocal, bool exclusive, System.Collections.Generic.IDictionary<string, object> arguments, RabbitMQ.Client.IBasicConsumer consumer) -> System.Threading.Tasks.ValueTask<string>
RabbitMQ.Client.IChannel.BasicGet(string queue, bool autoAck) -> RabbitMQ.Client.BasicGetResult
RabbitMQ.Client.IChannel.BasicGetAsync(string queue, bool autoAck) -> System.Threading.Tasks.ValueTask<RabbitMQ.Client.BasicGetResult>
RabbitMQ.Client.IChannel.BasicNack(ulong deliveryTag, bool multiple, bool requeue) -> void
RabbitMQ.Client.IChannel.BasicNackAsync(ulong deliveryTag, bool multiple, bool requeue) -> System.Threading.Tasks.ValueTask
RabbitMQ.Client.IChannel.BasicNacks -> System.EventHandler<RabbitMQ.Client.Events.BasicNackEventArgs>
RabbitMQ.Client.IChannel.BasicPublish<TProperties>(RabbitMQ.Client.CachedString exchange, RabbitMQ.Client.CachedString routingKey, in TProperties basicProperties, System.ReadOnlyMemory<byte> body = default(System.ReadOnlyMemory<byte>), bool mandatory = false) -> void
RabbitMQ.Client.IChannel.BasicPublish<TProperties>(string exchange, string routingKey, in TProperties basicProperties, System.ReadOnlyMemory<byte> body = default(System.ReadOnlyMemory<byte>), bool mandatory = false) -> void
RabbitMQ.Client.IChannel.BasicPublishAsync<TProperties>(RabbitMQ.Client.CachedString! exchange, RabbitMQ.Client.CachedString! routingKey, in TProperties basicProperties, System.Buffers.ReadOnlySequence<byte> body = default(System.Buffers.ReadOnlySequence<byte>), bool mandatory = false, bool? copyBody = null) -> System.Threading.Tasks.ValueTask
RabbitMQ.Client.IChannel.BasicPublishAsync<TProperties>(RabbitMQ.Client.CachedString! exchange, RabbitMQ.Client.CachedString! routingKey, in TProperties basicProperties, System.ReadOnlyMemory<byte> body = default(System.ReadOnlyMemory<byte>), bool mandatory = false, bool? copyBody = null) -> System.Threading.Tasks.ValueTask
RabbitMQ.Client.IChannel.BasicPublishAsync<TProperties>(string! exchange, string! routingKey, in TProperties basicProperties, System.Buffers.ReadOnlySequence<byte> body = default(System.Buffers.ReadOnlySequence<byte>), bool mandatory = false, bool? copyBody = null) -> System.Threading.Tasks.ValueTask
RabbitMQ.Client.IChannel.BasicPublishAsync<TProperties>(string! exchange, string! routingKey, in TProperties basicProperties, System.ReadOnlyMemory<byte> body = default(System.ReadOnlyMemory<byte>), bool mandatory = false, bool? copyBody = null) -> System.Threading.Tasks.ValueTask
RabbitMQ.Client.IChannel.BasicQos(uint prefetchSize, ushort prefetchCount, bool global) -> void
RabbitMQ.Client.IChannel.BasicQosAsync(uint prefetchSize, ushort prefetchCount, bool global) -> System.Threading.Tasks.ValueTask
RabbitMQ.Client.IChannel.BasicReject(ulong deliveryTag, bool requeue) -> void
RabbitMQ.Client.IChannel.BasicRejectAsync(ulong deliveryTag, bool requeue) -> System.Threading.Tasks.ValueTask
RabbitMQ.Client.IChannel.BasicReturn -> System.EventHandler<RabbitMQ.Client.Events.BasicReturnEventArgs>
RabbitMQ.Client.IChannel.CallbackException -> System.EventHandler<RabbitMQ.Client.Events.CallbackExceptionEventArgs>
RabbitMQ.Client.IChannel.ChannelNumber.get -> int
RabbitMQ.Client.IChannel.ChannelShutdown -> System.EventHandler<RabbitMQ.Client.ShutdownEventArgs>
RabbitMQ.Client.IChannel.Close(ushort replyCode, string replyText, bool abort) -> void
RabbitMQ.Client.IChannel.CloseAsync(RabbitMQ.Client.ShutdownEventArgs reason, bool abort) -> System.Threading.Tasks.ValueTask
RabbitMQ.Client.IChannel.CloseAsync(ushort replyCode, string replyText, bool abort) -> System.Threading.Tasks.ValueTask
RabbitMQ.Client.IChannel.CloseReason.get -> RabbitMQ.Client.ShutdownEventArgs
RabbitMQ.Client.IChannel.ConfirmSelect() -> void
RabbitMQ.Client.IChannel.ConfirmSelectAsync() -> System.Threading.Tasks.ValueTask
RabbitMQ.Client.IChannel.ConsumerCount(string queue) -> uint
RabbitMQ.Client.IChannel.ContinuationTimeout.get -> System.TimeSpan
RabbitMQ.Client.IChannel.ContinuationTimeout.set -> void
RabbitMQ.Client.IChannel.CurrentQueue.get -> string
RabbitMQ.Client.IChannel.DefaultConsumer.get -> RabbitMQ.Client.IBasicConsumer
RabbitMQ.Client.IChannel.DefaultConsumer.set -> void
RabbitMQ.Client.IChannel.ExchangeBind(string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments) -> void
RabbitMQ.Client.IChannel.ExchangeBindAsync(string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments) -> System.Threading.Tasks.ValueTask
RabbitMQ.Client.IChannel.ExchangeBindNoWait(string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments) -> void
RabbitMQ.Client.IChannel.ExchangeDeclare(string exchange, string type, bool durable, bool autoDelete, System.Collections.Generic.IDictionary<string, object> arguments) -> void
RabbitMQ.Client.IChannel.ExchangeDeclareAsync(string exchange, string type, bool passive, bool durable, bool autoDelete, System.Collections.Generic.IDictionary<string, object> arguments) -> System.Threading.Tasks.ValueTask
RabbitMQ.Client.IChannel.ExchangeDeclareNoWait(string exchange, string type, bool durable, bool autoDelete, System.Collections.Generic.IDictionary<string, object> arguments) -> void
RabbitMQ.Client.IChannel.ExchangeDeclarePassive(string exchange) -> void
RabbitMQ.Client.IChannel.ExchangeDelete(string exchange, bool ifUnused) -> void
RabbitMQ.Client.IChannel.ExchangeDeleteAsync(string exchange, bool ifUnused) -> System.Threading.Tasks.ValueTask
RabbitMQ.Client.IChannel.ExchangeDeleteNoWait(string exchange, bool ifUnused) -> void
RabbitMQ.Client.IChannel.ExchangeUnbind(string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments) -> void
RabbitMQ.Client.IChannel.ExchangeUnbindAsync(string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments) -> System.Threading.Tasks.ValueTask
RabbitMQ.Client.IChannel.ExchangeUnbindNoWait(string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments) -> void
RabbitMQ.Client.IChannel.FlowControl -> System.EventHandler<RabbitMQ.Client.Events.FlowControlEventArgs>
RabbitMQ.Client.IChannel.IsClosed.get -> bool
RabbitMQ.Client.IChannel.IsOpen.get -> bool
RabbitMQ.Client.IChannel.MessageCount(string queue) -> uint
RabbitMQ.Client.IChannel.NextPublishSeqNo.get -> ulong
RabbitMQ.Client.IChannel.QueueBind(string queue, string exchange, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments) -> void
RabbitMQ.Client.IChannel.QueueBindAsync(string queue, string exchange, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments) -> System.Threading.Tasks.ValueTask
RabbitMQ.Client.IChannel.QueueBindNoWait(string queue, string exchange, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments) -> void
RabbitMQ.Client.IChannel.QueueDeclare(string queue, bool durable, bool exclusive, bool autoDelete, System.Collections.Generic.IDictionary<string, object> arguments) -> RabbitMQ.Client.QueueDeclareOk
RabbitMQ.Client.IChannel.QueueDeclareAsync(string queue, bool passive, bool durable, bool exclusive, bool autoDelete, System.Collections.Generic.IDictionary<string, object> arguments) -> System.Threading.Tasks.ValueTask<RabbitMQ.Client.QueueDeclareOk>
RabbitMQ.Client.IChannel.QueueDeclareNoWait(string queue, bool durable, bool exclusive, bool autoDelete, System.Collections.Generic.IDictionary<string, object> arguments) -> void
RabbitMQ.Client.IChannel.QueueDeclarePassive(string queue) -> RabbitMQ.Client.QueueDeclareOk
RabbitMQ.Client.IChannel.QueueDelete(string queue, bool ifUnused, bool ifEmpty) -> uint
RabbitMQ.Client.IChannel.QueueDeleteAsync(string queue, bool ifUnused, bool ifEmpty) -> System.Threading.Tasks.ValueTask<uint>
RabbitMQ.Client.IChannel.QueueDeleteNoWait(string queue, bool ifUnused, bool ifEmpty) -> void
RabbitMQ.Client.IChannel.QueuePurge(string queue) -> uint
RabbitMQ.Client.IChannel.QueuePurgeAsync(string queue) -> System.Threading.Tasks.ValueTask<uint>
RabbitMQ.Client.IChannel.QueueUnbind(string queue, string exchange, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments) -> void
RabbitMQ.Client.IChannel.QueueUnbindAsync(string queue, string exchange, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments) -> System.Threading.Tasks.ValueTask
RabbitMQ.Client.IChannel.TxCommit() -> void
RabbitMQ.Client.IChannel.TxCommitAsync() -> System.Threading.Tasks.ValueTask
RabbitMQ.Client.IChannel.TxRollback() -> void
RabbitMQ.Client.IChannel.TxRollbackAsync() -> System.Threading.Tasks.ValueTask
RabbitMQ.Client.IChannel.TxSelect() -> void
RabbitMQ.Client.IChannel.TxSelectAsync() -> System.Threading.Tasks.ValueTask
RabbitMQ.Client.IChannel.WaitForConfirmsAsync(System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>
RabbitMQ.Client.IChannel.WaitForConfirmsOrDieAsync(System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
RabbitMQ.Client.IChannelExtensions
RabbitMQ.Client.IConnection
RabbitMQ.Client.IConnection.CallbackException -> System.EventHandler<RabbitMQ.Client.Events.CallbackExceptionEventArgs>
RabbitMQ.Client.IConnection.ChannelMax.get -> ushort
RabbitMQ.Client.IConnection.ClientProperties.get -> System.Collections.Generic.IDictionary<string, object>
RabbitMQ.Client.IConnection.ClientProvidedName.get -> string
RabbitMQ.Client.IConnection.Close(ushort reasonCode, string reasonText, System.TimeSpan timeout, bool abort) -> void
RabbitMQ.Client.IConnection.CloseAsync(ushort reasonCode, string reasonText, System.TimeSpan timeout, bool abort) -> System.Threading.Tasks.ValueTask
RabbitMQ.Client.IConnection.CloseReason.get -> RabbitMQ.Client.ShutdownEventArgs
RabbitMQ.Client.IConnection.ConnectionBlocked -> System.EventHandler<RabbitMQ.Client.Events.ConnectionBlockedEventArgs>
RabbitMQ.Client.IConnection.ConnectionRecoveryError -> System.EventHandler<RabbitMQ.Client.Events.ConnectionRecoveryErrorEventArgs>
RabbitMQ.Client.IConnection.ConnectionShutdown -> System.EventHandler<RabbitMQ.Client.ShutdownEventArgs>
RabbitMQ.Client.IConnection.ConnectionUnblocked -> System.EventHandler<System.EventArgs>
RabbitMQ.Client.IConnection.ConsumerTagChangeAfterRecovery -> System.EventHandler<RabbitMQ.Client.Events.ConsumerTagChangedAfterRecoveryEventArgs>
RabbitMQ.Client.IConnection.CopyBodyToMemoryThreshold.get -> int
RabbitMQ.Client.IConnection.CreateChannel() -> RabbitMQ.Client.IChannel
RabbitMQ.Client.IConnection.CreateChannelAsync() -> System.Threading.Tasks.ValueTask<RabbitMQ.Client.IChannel>
RabbitMQ.Client.IConnection.Endpoint.get -> RabbitMQ.Client.AmqpTcpEndpoint
RabbitMQ.Client.IConnection.FrameMax.get -> uint
RabbitMQ.Client.IConnection.Heartbeat.get -> System.TimeSpan
RabbitMQ.Client.IConnection.IsOpen.get -> bool
RabbitMQ.Client.IConnection.Protocol.get -> RabbitMQ.Client.IProtocol
RabbitMQ.Client.IConnection.QueueNameChangedAfterRecovery -> System.EventHandler<RabbitMQ.Client.Events.QueueNameChangedAfterRecoveryEventArgs>
RabbitMQ.Client.IConnection.RecoveringConsumer -> System.EventHandler<RabbitMQ.Client.Events.RecoveringConsumerEventArgs>
RabbitMQ.Client.IConnection.RecoverySucceeded -> System.EventHandler<System.EventArgs>
RabbitMQ.Client.IConnection.ServerProperties.get -> System.Collections.Generic.IDictionary<string, object>
RabbitMQ.Client.IConnection.ShutdownReport.get -> System.Collections.Generic.IEnumerable<RabbitMQ.Client.ShutdownReportEntry>
RabbitMQ.Client.IConnection.UpdateSecret(string newSecret, string reason) -> void
RabbitMQ.Client.IConnectionExtensions
RabbitMQ.Client.IConnectionFactory
RabbitMQ.Client.IConnectionFactory.AuthMechanismFactory(System.Collections.Generic.IEnumerable<string> mechanismNames) -> RabbitMQ.Client.IAuthMechanismFactory
RabbitMQ.Client.IConnectionFactory.ClientProperties.get -> System.Collections.Generic.IDictionary<string, object>
RabbitMQ.Client.IConnectionFactory.ClientProperties.set -> void
RabbitMQ.Client.IConnectionFactory.ClientProvidedName.get -> string
RabbitMQ.Client.IConnectionFactory.ClientProvidedName.set -> void
RabbitMQ.Client.IConnectionFactory.ConsumerDispatchConcurrency.get -> int
RabbitMQ.Client.IConnectionFactory.ConsumerDispatchConcurrency.set -> void
RabbitMQ.Client.IConnectionFactory.ContinuationTimeout.get -> System.TimeSpan
RabbitMQ.Client.IConnectionFactory.ContinuationTimeout.set -> void
RabbitMQ.Client.IConnectionFactory.CreateConnection() -> RabbitMQ.Client.IConnection
RabbitMQ.Client.IConnectionFactory.CreateConnection(string clientProvidedName) -> RabbitMQ.Client.IConnection
RabbitMQ.Client.IConnectionFactory.CreateConnection(System.Collections.Generic.IEnumerable<RabbitMQ.Client.AmqpTcpEndpoint> endpoints) -> RabbitMQ.Client.IConnection
RabbitMQ.Client.IConnectionFactory.CreateConnection(System.Collections.Generic.IEnumerable<RabbitMQ.Client.AmqpTcpEndpoint> endpoints, string clientProvidedName) -> RabbitMQ.Client.IConnection
RabbitMQ.Client.IConnectionFactory.CreateConnection(System.Collections.Generic.IEnumerable<string> hostnames) -> RabbitMQ.Client.IConnection
RabbitMQ.Client.IConnectionFactory.CreateConnection(System.Collections.Generic.IEnumerable<string> hostnames, string clientProvidedName) -> RabbitMQ.Client.IConnection
RabbitMQ.Client.IConnectionFactory.CreateConnectionAsync(string clientProvidedName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<RabbitMQ.Client.IConnection>
RabbitMQ.Client.IConnectionFactory.CreateConnectionAsync(System.Collections.Generic.IEnumerable<RabbitMQ.Client.AmqpTcpEndpoint> endpoints, string clientProvidedName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<RabbitMQ.Client.IConnection>
RabbitMQ.Client.IConnectionFactory.CreateConnectionAsync(System.Collections.Generic.IEnumerable<RabbitMQ.Client.AmqpTcpEndpoint> endpoints, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<RabbitMQ.Client.IConnection>
RabbitMQ.Client.IConnectionFactory.CreateConnectionAsync(System.Collections.Generic.IEnumerable<string> hostnames, string clientProvidedName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<RabbitMQ.Client.IConnection>
RabbitMQ.Client.IConnectionFactory.CreateConnectionAsync(System.Collections.Generic.IEnumerable<string> hostnames, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<RabbitMQ.Client.IConnection>
RabbitMQ.Client.IConnectionFactory.CreateConnectionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<RabbitMQ.Client.IConnection>
RabbitMQ.Client.IConnectionFactory.CredentialsProvider.get -> RabbitMQ.Client.ICredentialsProvider
RabbitMQ.Client.IConnectionFactory.CredentialsProvider.set -> void
RabbitMQ.Client.IConnectionFactory.CredentialsRefresher.get -> RabbitMQ.Client.ICredentialsRefresher
RabbitMQ.Client.IConnectionFactory.CredentialsRefresher.set -> void
RabbitMQ.Client.IConnectionFactory.DispatchConsumersAsync.get -> bool
RabbitMQ.Client.IConnectionFactory.DispatchConsumersAsync.set -> void
RabbitMQ.Client.IConnectionFactory.HandshakeContinuationTimeout.get -> System.TimeSpan
RabbitMQ.Client.IConnectionFactory.HandshakeContinuationTimeout.set -> void
RabbitMQ.Client.IConnectionFactory.Password.get -> string
RabbitMQ.Client.IConnectionFactory.Password.set -> void
RabbitMQ.Client.IConnectionFactory.RequestedChannelMax.get -> ushort
RabbitMQ.Client.IConnectionFactory.RequestedChannelMax.set -> void
RabbitMQ.Client.IConnectionFactory.RequestedFrameMax.get -> uint
RabbitMQ.Client.IConnectionFactory.RequestedFrameMax.set -> void
RabbitMQ.Client.IConnectionFactory.RequestedHeartbeat.get -> System.TimeSpan
RabbitMQ.Client.IConnectionFactory.RequestedHeartbeat.set -> void
RabbitMQ.Client.IConnectionFactory.Uri.get -> System.Uri
RabbitMQ.Client.IConnectionFactory.Uri.set -> void
RabbitMQ.Client.IConnectionFactory.UserName.get -> string
RabbitMQ.Client.IConnectionFactory.UserName.set -> void
RabbitMQ.Client.IConnectionFactory.VirtualHost.get -> string
RabbitMQ.Client.IConnectionFactory.VirtualHost.set -> void
RabbitMQ.Client.ICredentialsProvider
RabbitMQ.Client.ICredentialsProvider.Name.get -> string
RabbitMQ.Client.ICredentialsProvider.Password.get -> string
RabbitMQ.Client.ICredentialsProvider.Refresh() -> void
RabbitMQ.Client.ICredentialsProvider.UserName.get -> string
RabbitMQ.Client.ICredentialsProvider.ValidUntil.get -> System.TimeSpan?
RabbitMQ.Client.ICredentialsRefresher
RabbitMQ.Client.ICredentialsRefresher.NotifyCredentialRefreshed
RabbitMQ.Client.ICredentialsRefresher.Register(RabbitMQ.Client.ICredentialsProvider provider, RabbitMQ.Client.ICredentialsRefresher.NotifyCredentialRefreshed callback) -> RabbitMQ.Client.ICredentialsProvider
RabbitMQ.Client.ICredentialsRefresher.Unregister(RabbitMQ.Client.ICredentialsProvider provider) -> bool
RabbitMQ.Client.IEndpointResolver
RabbitMQ.Client.IEndpointResolver.All() -> System.Collections.Generic.IEnumerable<RabbitMQ.Client.AmqpTcpEndpoint>
RabbitMQ.Client.INetworkConnection
RabbitMQ.Client.INetworkConnection.LocalPort.get -> int
RabbitMQ.Client.INetworkConnection.RemotePort.get -> int
RabbitMQ.Client.IProtocol
RabbitMQ.Client.IProtocol.ApiName.get -> string
RabbitMQ.Client.IProtocol.DefaultPort.get -> int
RabbitMQ.Client.IProtocol.MajorVersion.get -> int
RabbitMQ.Client.IProtocol.MinorVersion.get -> int
RabbitMQ.Client.IProtocol.Revision.get -> int
RabbitMQ.Client.IReadOnlyBasicProperties
RabbitMQ.Client.IReadOnlyBasicProperties.AppId.get -> string
RabbitMQ.Client.IReadOnlyBasicProperties.ClusterId.get -> string
RabbitMQ.Client.IReadOnlyBasicProperties.ContentEncoding.get -> string
RabbitMQ.Client.IReadOnlyBasicProperties.ContentType.get -> string
RabbitMQ.Client.IReadOnlyBasicProperties.CorrelationId.get -> string
RabbitMQ.Client.IReadOnlyBasicProperties.DeliveryMode.get -> RabbitMQ.Client.DeliveryModes
RabbitMQ.Client.IReadOnlyBasicProperties.Expiration.get -> string
RabbitMQ.Client.IReadOnlyBasicProperties.Headers.get -> System.Collections.Generic.IDictionary<string, object>
RabbitMQ.Client.IReadOnlyBasicProperties.IsAppIdPresent() -> bool
RabbitMQ.Client.IReadOnlyBasicProperties.IsClusterIdPresent() -> bool
RabbitMQ.Client.IReadOnlyBasicProperties.IsContentEncodingPresent() -> bool
RabbitMQ.Client.IReadOnlyBasicProperties.IsContentTypePresent() -> bool
RabbitMQ.Client.IReadOnlyBasicProperties.IsCorrelationIdPresent() -> bool
RabbitMQ.Client.IReadOnlyBasicProperties.IsDeliveryModePresent() -> bool
RabbitMQ.Client.IReadOnlyBasicProperties.IsExpirationPresent() -> bool
RabbitMQ.Client.IReadOnlyBasicProperties.IsHeadersPresent() -> bool
RabbitMQ.Client.IReadOnlyBasicProperties.IsMessageIdPresent() -> bool
RabbitMQ.Client.IReadOnlyBasicProperties.IsPriorityPresent() -> bool
RabbitMQ.Client.IReadOnlyBasicProperties.IsReplyToPresent() -> bool
RabbitMQ.Client.IReadOnlyBasicProperties.IsTimestampPresent() -> bool
RabbitMQ.Client.IReadOnlyBasicProperties.IsTypePresent() -> bool
RabbitMQ.Client.IReadOnlyBasicProperties.IsUserIdPresent() -> bool
RabbitMQ.Client.IReadOnlyBasicProperties.MessageId.get -> string
RabbitMQ.Client.IReadOnlyBasicProperties.Persistent.get -> bool
RabbitMQ.Client.IReadOnlyBasicProperties.Priority.get -> byte
RabbitMQ.Client.IReadOnlyBasicProperties.ReplyTo.get -> string
RabbitMQ.Client.IReadOnlyBasicProperties.ReplyToAddress.get -> RabbitMQ.Client.PublicationAddress
RabbitMQ.Client.IReadOnlyBasicProperties.Timestamp.get -> RabbitMQ.Client.AmqpTimestamp
RabbitMQ.Client.IReadOnlyBasicProperties.Type.get -> string
RabbitMQ.Client.IReadOnlyBasicProperties.UserId.get -> string
RabbitMQ.Client.IRecordedBinding
RabbitMQ.Client.IRecordedBinding.Arguments.get -> System.Collections.Generic.IDictionary<string, object>
RabbitMQ.Client.IRecordedBinding.Destination.get -> string
RabbitMQ.Client.IRecordedBinding.RoutingKey.get -> string
RabbitMQ.Client.IRecordedBinding.Source.get -> string
RabbitMQ.Client.IRecordedConsumer
RabbitMQ.Client.IRecordedConsumer.Arguments.get -> System.Collections.Generic.IDictionary<string, object>
RabbitMQ.Client.IRecordedConsumer.AutoAck.get -> bool
RabbitMQ.Client.IRecordedConsumer.ConsumerTag.get -> string
RabbitMQ.Client.IRecordedConsumer.Exclusive.get -> bool
RabbitMQ.Client.IRecordedConsumer.Queue.get -> string
RabbitMQ.Client.IRecordedExchange
RabbitMQ.Client.IRecordedExchange.Arguments.get -> System.Collections.Generic.IDictionary<string, object>
RabbitMQ.Client.IRecordedExchange.AutoDelete.get -> bool
RabbitMQ.Client.IRecordedExchange.Durable.get -> bool
RabbitMQ.Client.IRecordedExchange.Name.get -> string
RabbitMQ.Client.IRecordedExchange.Type.get -> string
RabbitMQ.Client.IRecordedQueue
RabbitMQ.Client.IRecordedQueue.Arguments.get -> System.Collections.Generic.IDictionary<string, object>
RabbitMQ.Client.IRecordedQueue.AutoDelete.get -> bool
RabbitMQ.Client.IRecordedQueue.Durable.get -> bool
RabbitMQ.Client.IRecordedQueue.Exclusive.get -> bool
RabbitMQ.Client.IRecordedQueue.IsServerNamed.get -> bool
RabbitMQ.Client.IRecordedQueue.Name.get -> string
RabbitMQ.Client.IRecoverable
RabbitMQ.Client.IRecoverable.Recovery -> System.EventHandler<System.EventArgs>
RabbitMQ.Client.ITcpClient
RabbitMQ.Client.ITcpClient.Client.get -> System.Net.Sockets.Socket
RabbitMQ.Client.ITcpClient.Close() -> void
RabbitMQ.Client.ITcpClient.ConnectAsync(System.Net.IPAddress host, int port, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
RabbitMQ.Client.ITcpClient.Connected.get -> bool
RabbitMQ.Client.ITcpClient.GetStream() -> System.Net.Sockets.NetworkStream
RabbitMQ.Client.ITcpClient.ReceiveTimeout.get -> System.TimeSpan
RabbitMQ.Client.ITcpClient.ReceiveTimeout.set -> void
RabbitMQ.Client.Logging.RabbitMqExceptionDetail
RabbitMQ.Client.Logging.RabbitMqExceptionDetail.InnerException.get -> string
RabbitMQ.Client.Logging.RabbitMqExceptionDetail.Message.get -> string
RabbitMQ.Client.Logging.RabbitMqExceptionDetail.RabbitMqExceptionDetail(System.Collections.Generic.IDictionary<string, object> ex) -> void
RabbitMQ.Client.Logging.RabbitMqExceptionDetail.RabbitMqExceptionDetail(System.Exception ex) -> void
RabbitMQ.Client.Logging.RabbitMqExceptionDetail.StackTrace.get -> string
RabbitMQ.Client.Logging.RabbitMqExceptionDetail.Type.get -> string
RabbitMQ.Client.PlainMechanism
RabbitMQ.Client.PlainMechanism.handleChallenge(byte[] challenge, RabbitMQ.Client.ConnectionConfig config) -> byte[]
RabbitMQ.Client.PlainMechanism.PlainMechanism() -> void
RabbitMQ.Client.PlainMechanismFactory
RabbitMQ.Client.PlainMechanismFactory.GetInstance() -> RabbitMQ.Client.IAuthMechanism
RabbitMQ.Client.PlainMechanismFactory.Name.get -> string
RabbitMQ.Client.PlainMechanismFactory.PlainMechanismFactory() -> void
RabbitMQ.Client.Protocols
RabbitMQ.Client.PublicationAddress
RabbitMQ.Client.PublicationAddress.PublicationAddress(string exchangeType, string exchangeName, string routingKey) -> void
RabbitMQ.Client.QueueDeclareOk
RabbitMQ.Client.QueueDeclareOk.QueueDeclareOk(string queueName, uint messageCount, uint consumerCount) -> void
RabbitMQ.Client.ReadOnlyBasicProperties
RabbitMQ.Client.ReadOnlyBasicProperties.AppId.get -> string
RabbitMQ.Client.ReadOnlyBasicProperties.ClusterId.get -> string
RabbitMQ.Client.ReadOnlyBasicProperties.ContentEncoding.get -> string
RabbitMQ.Client.ReadOnlyBasicProperties.ContentType.get -> string
RabbitMQ.Client.ReadOnlyBasicProperties.CorrelationId.get -> string
RabbitMQ.Client.ReadOnlyBasicProperties.DeliveryMode.get -> RabbitMQ.Client.DeliveryModes
RabbitMQ.Client.ReadOnlyBasicProperties.Expiration.get -> string
RabbitMQ.Client.ReadOnlyBasicProperties.Headers.get -> System.Collections.Generic.IDictionary<string, object>
RabbitMQ.Client.ReadOnlyBasicProperties.IsAppIdPresent() -> bool
RabbitMQ.Client.ReadOnlyBasicProperties.IsClusterIdPresent() -> bool
RabbitMQ.Client.ReadOnlyBasicProperties.IsContentEncodingPresent() -> bool
RabbitMQ.Client.ReadOnlyBasicProperties.IsContentTypePresent() -> bool
RabbitMQ.Client.ReadOnlyBasicProperties.IsCorrelationIdPresent() -> bool
RabbitMQ.Client.ReadOnlyBasicProperties.IsDeliveryModePresent() -> bool
RabbitMQ.Client.ReadOnlyBasicProperties.IsExpirationPresent() -> bool
RabbitMQ.Client.ReadOnlyBasicProperties.IsHeadersPresent() -> bool
RabbitMQ.Client.ReadOnlyBasicProperties.IsMessageIdPresent() -> bool
RabbitMQ.Client.ReadOnlyBasicProperties.IsPriorityPresent() -> bool
RabbitMQ.Client.ReadOnlyBasicProperties.IsReplyToPresent() -> bool
RabbitMQ.Client.ReadOnlyBasicProperties.IsTimestampPresent() -> bool
RabbitMQ.Client.ReadOnlyBasicProperties.IsTypePresent() -> bool
RabbitMQ.Client.ReadOnlyBasicProperties.IsUserIdPresent() -> bool
RabbitMQ.Client.ReadOnlyBasicProperties.MessageId.get -> string
RabbitMQ.Client.ReadOnlyBasicProperties.Persistent.get -> bool
RabbitMQ.Client.ReadOnlyBasicProperties.Priority.get -> byte
RabbitMQ.Client.ReadOnlyBasicProperties.ReadOnlyBasicProperties() -> void
RabbitMQ.Client.ReadOnlyBasicProperties.ReadOnlyBasicProperties(System.ReadOnlySpan<byte> span) -> void
RabbitMQ.Client.ReadOnlyBasicProperties.ReplyTo.get -> string
RabbitMQ.Client.ReadOnlyBasicProperties.ReplyToAddress.get -> RabbitMQ.Client.PublicationAddress
RabbitMQ.Client.ReadOnlyBasicProperties.Timestamp.get -> RabbitMQ.Client.AmqpTimestamp
RabbitMQ.Client.ReadOnlyBasicProperties.Type.get -> string
RabbitMQ.Client.ReadOnlyBasicProperties.UserId.get -> string
RabbitMQ.Client.ShutdownEventArgs
RabbitMQ.Client.ShutdownEventArgs.Cause.get -> object
RabbitMQ.Client.ShutdownEventArgs.ClassId.get -> ushort
RabbitMQ.Client.ShutdownEventArgs.Exception.get -> System.Exception
RabbitMQ.Client.ShutdownEventArgs.Initiator.get -> RabbitMQ.Client.ShutdownInitiator
RabbitMQ.Client.ShutdownEventArgs.MethodId.get -> ushort
RabbitMQ.Client.ShutdownEventArgs.ReplyCode.get -> ushort
RabbitMQ.Client.ShutdownEventArgs.ReplyText.get -> string
RabbitMQ.Client.ShutdownEventArgs.ShutdownEventArgs(RabbitMQ.Client.ShutdownInitiator initiator, ushort replyCode, string replyText, object cause = null) -> void
RabbitMQ.Client.ShutdownEventArgs.ShutdownEventArgs(RabbitMQ.Client.ShutdownInitiator initiator, ushort replyCode, string replyText, System.Exception exception) -> void
RabbitMQ.Client.ShutdownEventArgs.ShutdownEventArgs(RabbitMQ.Client.ShutdownInitiator initiator, ushort replyCode, string replyText, ushort classId, ushort methodId, object cause = null) -> void
RabbitMQ.Client.ShutdownInitiator
RabbitMQ.Client.ShutdownInitiator.Application = 0 -> RabbitMQ.Client.ShutdownInitiator
RabbitMQ.Client.ShutdownInitiator.Library = 1 -> RabbitMQ.Client.ShutdownInitiator
RabbitMQ.Client.ShutdownInitiator.Peer = 2 -> RabbitMQ.Client.ShutdownInitiator
RabbitMQ.Client.ShutdownReportEntry
RabbitMQ.Client.ShutdownReportEntry.Description.get -> string
RabbitMQ.Client.ShutdownReportEntry.Description.set -> void
RabbitMQ.Client.ShutdownReportEntry.Exception.get -> System.Exception
RabbitMQ.Client.ShutdownReportEntry.Exception.set -> void
RabbitMQ.Client.ShutdownReportEntry.ShutdownReportEntry(string description, System.Exception exception) -> void
RabbitMQ.Client.SslOption
RabbitMQ.Client.SslOption.AcceptablePolicyErrors.get -> System.Net.Security.SslPolicyErrors
RabbitMQ.Client.SslOption.AcceptablePolicyErrors.set -> void
RabbitMQ.Client.SslOption.CertificateSelectionCallback.get -> System.Net.Security.LocalCertificateSelectionCallback
RabbitMQ.Client.SslOption.CertificateSelectionCallback.set -> void
RabbitMQ.Client.SslOption.CertificateValidationCallback.get -> System.Net.Security.RemoteCertificateValidationCallback
RabbitMQ.Client.SslOption.CertificateValidationCallback.set -> void
RabbitMQ.Client.SslOption.CertPassphrase.get -> string
RabbitMQ.Client.SslOption.CertPassphrase.set -> void
RabbitMQ.Client.SslOption.CertPath.get -> string
RabbitMQ.Client.SslOption.CertPath.set -> void
RabbitMQ.Client.SslOption.Certs.get -> System.Security.Cryptography.X509Certificates.X509CertificateCollection
RabbitMQ.Client.SslOption.Certs.set -> void
RabbitMQ.Client.SslOption.CheckCertificateRevocation.get -> bool
RabbitMQ.Client.SslOption.CheckCertificateRevocation.set -> void
RabbitMQ.Client.SslOption.Enabled.get -> bool
RabbitMQ.Client.SslOption.Enabled.set -> void
RabbitMQ.Client.SslOption.ServerName.get -> string
RabbitMQ.Client.SslOption.ServerName.set -> void
RabbitMQ.Client.SslOption.SslOption() -> void
RabbitMQ.Client.SslOption.SslOption(string serverName, string certificatePath = "", bool enabled = false) -> void
RabbitMQ.Client.SslOption.Version.get -> System.Security.Authentication.SslProtocols
RabbitMQ.Client.SslOption.Version.set -> void
RabbitMQ.Client.TcpClientAdapter
RabbitMQ.Client.TcpClientAdapter.Dispose() -> void
RabbitMQ.Client.TcpClientAdapter.TcpClientAdapter(System.Net.Sockets.Socket socket) -> void
RabbitMQ.Client.TimerBasedCredentialRefresher
RabbitMQ.Client.TimerBasedCredentialRefresher.Register(RabbitMQ.Client.ICredentialsProvider provider, RabbitMQ.Client.ICredentialsRefresher.NotifyCredentialRefreshed callback) -> RabbitMQ.Client.ICredentialsProvider
RabbitMQ.Client.TimerBasedCredentialRefresher.TimerBasedCredentialRefresher() -> void
RabbitMQ.Client.TimerBasedCredentialRefresher.Unregister(RabbitMQ.Client.ICredentialsProvider provider) -> bool
RabbitMQ.Client.TimerBasedCredentialRefresherEventSource
RabbitMQ.Client.TimerBasedCredentialRefresherEventSource.AlreadyRegistered(string name) -> void
RabbitMQ.Client.TimerBasedCredentialRefresherEventSource.RefreshedCredentials(string name, bool succesfully) -> void
RabbitMQ.Client.TimerBasedCredentialRefresherEventSource.Registered(string name) -> void
RabbitMQ.Client.TimerBasedCredentialRefresherEventSource.ScheduledTimer(string name, double interval) -> void
RabbitMQ.Client.TimerBasedCredentialRefresherEventSource.TimerBasedCredentialRefresherEventSource() -> void
RabbitMQ.Client.TimerBasedCredentialRefresherEventSource.TriggeredTimer(string name) -> void
RabbitMQ.Client.TimerBasedCredentialRefresherEventSource.Unregistered(string name) -> void
RabbitMQ.Client.TopologyRecoveryExceptionHandler
RabbitMQ.Client.TopologyRecoveryExceptionHandler.BindingRecoveryExceptionCondition.get -> System.Func<RabbitMQ.Client.IRecordedBinding, System.Exception, bool>
RabbitMQ.Client.TopologyRecoveryExceptionHandler.BindingRecoveryExceptionCondition.set -> void
RabbitMQ.Client.TopologyRecoveryExceptionHandler.BindingRecoveryExceptionHandler.get -> System.Action<RabbitMQ.Client.IRecordedBinding, System.Exception, RabbitMQ.Client.IConnection>
RabbitMQ.Client.TopologyRecoveryExceptionHandler.BindingRecoveryExceptionHandler.set -> void
RabbitMQ.Client.TopologyRecoveryExceptionHandler.ConsumerRecoveryExceptionCondition.get -> System.Func<RabbitMQ.Client.IRecordedConsumer, System.Exception, bool>
RabbitMQ.Client.TopologyRecoveryExceptionHandler.ConsumerRecoveryExceptionCondition.set -> void
RabbitMQ.Client.TopologyRecoveryExceptionHandler.ConsumerRecoveryExceptionHandler.get -> System.Action<RabbitMQ.Client.IRecordedConsumer, System.Exception, RabbitMQ.Client.IConnection>
RabbitMQ.Client.TopologyRecoveryExceptionHandler.ConsumerRecoveryExceptionHandler.set -> void
RabbitMQ.Client.TopologyRecoveryExceptionHandler.ExchangeRecoveryExceptionCondition.get -> System.Func<RabbitMQ.Client.IRecordedExchange, System.Exception, bool>
RabbitMQ.Client.TopologyRecoveryExceptionHandler.ExchangeRecoveryExceptionCondition.set -> void
RabbitMQ.Client.TopologyRecoveryExceptionHandler.ExchangeRecoveryExceptionHandler.get -> System.Action<RabbitMQ.Client.IRecordedExchange, System.Exception, RabbitMQ.Client.IConnection>
RabbitMQ.Client.TopologyRecoveryExceptionHandler.ExchangeRecoveryExceptionHandler.set -> void
RabbitMQ.Client.TopologyRecoveryExceptionHandler.QueueRecoveryExceptionCondition.get -> System.Func<RabbitMQ.Client.IRecordedQueue, System.Exception, bool>
RabbitMQ.Client.TopologyRecoveryExceptionHandler.QueueRecoveryExceptionCondition.set -> void
RabbitMQ.Client.TopologyRecoveryExceptionHandler.QueueRecoveryExceptionHandler.get -> System.Action<RabbitMQ.Client.IRecordedQueue, System.Exception, RabbitMQ.Client.IConnection>
RabbitMQ.Client.TopologyRecoveryExceptionHandler.QueueRecoveryExceptionHandler.set -> void
RabbitMQ.Client.TopologyRecoveryExceptionHandler.TopologyRecoveryExceptionHandler() -> void
RabbitMQ.Client.TopologyRecoveryFilter
RabbitMQ.Client.TopologyRecoveryFilter.BindingFilter.get -> System.Func<RabbitMQ.Client.IRecordedBinding, bool>
RabbitMQ.Client.TopologyRecoveryFilter.BindingFilter.set -> void
RabbitMQ.Client.TopologyRecoveryFilter.ConsumerFilter.get -> System.Func<RabbitMQ.Client.IRecordedConsumer, bool>
RabbitMQ.Client.TopologyRecoveryFilter.ConsumerFilter.set -> void
RabbitMQ.Client.TopologyRecoveryFilter.ExchangeFilter.get -> System.Func<RabbitMQ.Client.IRecordedExchange, bool>
RabbitMQ.Client.TopologyRecoveryFilter.ExchangeFilter.set -> void
RabbitMQ.Client.TopologyRecoveryFilter.QueueFilter.get -> System.Func<RabbitMQ.Client.IRecordedQueue, bool>
RabbitMQ.Client.TopologyRecoveryFilter.QueueFilter.set -> void
RabbitMQ.Client.TopologyRecoveryFilter.TopologyRecoveryFilter() -> void
readonly RabbitMQ.Client.AmqpTimestamp.UnixTime -> long
readonly RabbitMQ.Client.BasicGetResult.BasicProperties -> RabbitMQ.Client.ReadOnlyBasicProperties
readonly RabbitMQ.Client.BasicGetResult.Body -> System.ReadOnlyMemory<byte>
readonly RabbitMQ.Client.BasicGetResult.DeliveryTag -> ulong
readonly RabbitMQ.Client.BasicGetResult.Exchange -> string
readonly RabbitMQ.Client.BasicGetResult.MessageCount -> uint
readonly RabbitMQ.Client.BasicGetResult.Redelivered -> bool
readonly RabbitMQ.Client.BasicGetResult.RoutingKey -> string
readonly RabbitMQ.Client.CachedString.Bytes -> System.ReadOnlyMemory<byte>
readonly RabbitMQ.Client.CachedString.Value -> string
readonly RabbitMQ.Client.ConnectionConfig.AuthMechanisms -> System.Collections.Generic.IEnumerable<RabbitMQ.Client.IAuthMechanismFactory>
readonly RabbitMQ.Client.ConnectionConfig.ClientProperties -> System.Collections.Generic.IDictionary<string, object>
readonly RabbitMQ.Client.ConnectionConfig.ClientProvidedName -> string
readonly RabbitMQ.Client.ConnectionConfig.ContinuationTimeout -> System.TimeSpan
readonly RabbitMQ.Client.ConnectionConfig.CopyBodyToMemoryThreshold -> int
readonly RabbitMQ.Client.ConnectionConfig.DispatchConsumerConcurrency -> int
readonly RabbitMQ.Client.ConnectionConfig.DispatchConsumersAsync -> bool
readonly RabbitMQ.Client.ConnectionConfig.HandshakeContinuationTimeout -> System.TimeSpan
readonly RabbitMQ.Client.ConnectionConfig.HeartbeatInterval -> System.TimeSpan
readonly RabbitMQ.Client.ConnectionConfig.MaxChannelCount -> ushort
readonly RabbitMQ.Client.ConnectionConfig.MaxFrameSize -> uint
readonly RabbitMQ.Client.ConnectionConfig.NetworkRecoveryInterval -> System.TimeSpan
readonly RabbitMQ.Client.ConnectionConfig.Password -> string
readonly RabbitMQ.Client.ConnectionConfig.RequestedConnectionTimeout -> System.TimeSpan
readonly RabbitMQ.Client.ConnectionConfig.TopologyRecoveryEnabled -> bool
readonly RabbitMQ.Client.ConnectionConfig.TopologyRecoveryExceptionHandler -> RabbitMQ.Client.TopologyRecoveryExceptionHandler
readonly RabbitMQ.Client.ConnectionConfig.TopologyRecoveryFilter -> RabbitMQ.Client.TopologyRecoveryFilter
readonly RabbitMQ.Client.ConnectionConfig.UserName -> string
readonly RabbitMQ.Client.ConnectionConfig.VirtualHost -> string
readonly RabbitMQ.Client.Events.BaseExceptionEventArgs.Detail -> System.Collections.Generic.IDictionary<string, object>
readonly RabbitMQ.Client.Events.BaseExceptionEventArgs.Exception -> System.Exception
readonly RabbitMQ.Client.Events.BasicAckEventArgs.DeliveryTag -> ulong
readonly RabbitMQ.Client.Events.BasicAckEventArgs.Multiple -> bool
readonly RabbitMQ.Client.Events.BasicDeliverEventArgs.BasicProperties -> RabbitMQ.Client.ReadOnlyBasicProperties
readonly RabbitMQ.Client.Events.BasicDeliverEventArgs.Body -> System.ReadOnlyMemory<byte>
readonly RabbitMQ.Client.Events.BasicDeliverEventArgs.ConsumerTag -> string
readonly RabbitMQ.Client.Events.BasicDeliverEventArgs.DeliveryTag -> ulong
readonly RabbitMQ.Client.Events.BasicDeliverEventArgs.Exchange -> string
readonly RabbitMQ.Client.Events.BasicDeliverEventArgs.Redelivered -> bool
readonly RabbitMQ.Client.Events.BasicDeliverEventArgs.RoutingKey -> string
readonly RabbitMQ.Client.Events.BasicNackEventArgs.DeliveryTag -> ulong
readonly RabbitMQ.Client.Events.BasicNackEventArgs.Multiple -> bool
readonly RabbitMQ.Client.Events.BasicNackEventArgs.Requeue -> bool
readonly RabbitMQ.Client.Events.BasicReturnEventArgs.BasicProperties -> RabbitMQ.Client.ReadOnlyBasicProperties
readonly RabbitMQ.Client.Events.BasicReturnEventArgs.Body -> System.ReadOnlyMemory<byte>
readonly RabbitMQ.Client.Events.BasicReturnEventArgs.Exchange -> string
readonly RabbitMQ.Client.Events.BasicReturnEventArgs.ReplyCode -> ushort
readonly RabbitMQ.Client.Events.BasicReturnEventArgs.ReplyText -> string
readonly RabbitMQ.Client.Events.BasicReturnEventArgs.RoutingKey -> string
readonly RabbitMQ.Client.Events.ConnectionBlockedEventArgs.Reason -> string
readonly RabbitMQ.Client.Events.ConnectionRecoveryErrorEventArgs.Exception -> System.Exception
readonly RabbitMQ.Client.Events.ConsumerEventArgs.ConsumerTags -> string[]
readonly RabbitMQ.Client.Events.ConsumerTagChangedAfterRecoveryEventArgs.TagAfter -> string
readonly RabbitMQ.Client.Events.ConsumerTagChangedAfterRecoveryEventArgs.TagBefore -> string
readonly RabbitMQ.Client.Events.FlowControlEventArgs.Active -> bool
readonly RabbitMQ.Client.Events.QueueNameChangedAfterRecoveryEventArgs.NameAfter -> string
readonly RabbitMQ.Client.Events.QueueNameChangedAfterRecoveryEventArgs.NameBefore -> string
readonly RabbitMQ.Client.Exceptions.HardProtocolException._canShutdownCleanly -> bool
readonly RabbitMQ.Client.PublicationAddress.ExchangeName -> string
readonly RabbitMQ.Client.PublicationAddress.ExchangeType -> string
readonly RabbitMQ.Client.PublicationAddress.RoutingKey -> string
readonly RabbitMQ.Client.QueueDeclareOk.ConsumerCount -> uint
readonly RabbitMQ.Client.QueueDeclareOk.MessageCount -> uint
readonly RabbitMQ.Client.QueueDeclareOk.QueueName -> string
static RabbitMQ.Client.AmqpTcpEndpoint.Parse(string address) -> RabbitMQ.Client.AmqpTcpEndpoint
static RabbitMQ.Client.AmqpTcpEndpoint.ParseMultiple(string addresses) -> RabbitMQ.Client.AmqpTcpEndpoint[]
static RabbitMQ.Client.AmqpTimestamp.operator !=(RabbitMQ.Client.AmqpTimestamp left, RabbitMQ.Client.AmqpTimestamp right) -> bool
static RabbitMQ.Client.AmqpTimestamp.operator ==(RabbitMQ.Client.AmqpTimestamp left, RabbitMQ.Client.AmqpTimestamp right) -> bool
static RabbitMQ.Client.ConnectionFactory.DefaultAddressFamily.get -> System.Net.Sockets.AddressFamily
static RabbitMQ.Client.ConnectionFactory.DefaultAddressFamily.set -> void
static RabbitMQ.Client.ConnectionFactory.DefaultAmqpUriSslProtocols.get -> System.Security.Authentication.SslProtocols
static RabbitMQ.Client.ConnectionFactory.DefaultAmqpUriSslProtocols.set -> void
static RabbitMQ.Client.ConnectionFactoryBase.DefaultSocketFactory(System.Net.Sockets.AddressFamily addressFamily) -> RabbitMQ.Client.ITcpClient
static RabbitMQ.Client.EndpointResolverExtensions.SelectOneAsync<T>(this RabbitMQ.Client.IEndpointResolver resolver, System.Func<RabbitMQ.Client.AmqpTcpEndpoint, System.Threading.CancellationToken, System.Threading.Tasks.Task<T>> selector, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<T>
static RabbitMQ.Client.Events.CallbackExceptionEventArgs.Build(System.Exception e, string context) -> RabbitMQ.Client.Events.CallbackExceptionEventArgs
static RabbitMQ.Client.Events.CallbackExceptionEventArgs.Build(System.Exception e, string context, object consumer) -> RabbitMQ.Client.Events.CallbackExceptionEventArgs
static RabbitMQ.Client.ExchangeType.All() -> System.Collections.Generic.ICollection<string>
static RabbitMQ.Client.IChannelExtensions.Abort(this RabbitMQ.Client.IChannel channel) -> void
static RabbitMQ.Client.IChannelExtensions.Abort(this RabbitMQ.Client.IChannel channel, ushort replyCode, string replyText) -> void
static RabbitMQ.Client.IChannelExtensions.AbortAsync(this RabbitMQ.Client.IChannel channel) -> System.Threading.Tasks.ValueTask
static RabbitMQ.Client.IChannelExtensions.BasicConsume(this RabbitMQ.Client.IChannel channel, RabbitMQ.Client.IBasicConsumer consumer, string queue, bool autoAck = false, string consumerTag = "", bool noLocal = false, bool exclusive = false, System.Collections.Generic.IDictionary<string, object> arguments = null) -> string
static RabbitMQ.Client.IChannelExtensions.BasicConsume(this RabbitMQ.Client.IChannel channel, string queue, bool autoAck, RabbitMQ.Client.IBasicConsumer consumer) -> string
static RabbitMQ.Client.IChannelExtensions.BasicConsume(this RabbitMQ.Client.IChannel channel, string queue, bool autoAck, string consumerTag, RabbitMQ.Client.IBasicConsumer consumer) -> string
static RabbitMQ.Client.IChannelExtensions.BasicConsume(this RabbitMQ.Client.IChannel channel, string queue, bool autoAck, string consumerTag, System.Collections.Generic.IDictionary<string, object> arguments, RabbitMQ.Client.IBasicConsumer consumer) -> string
static RabbitMQ.Client.IChannelExtensions.BasicConsumeAsync(this RabbitMQ.Client.IChannel channel, RabbitMQ.Client.IBasicConsumer consumer, string queue, bool autoAck = false, string consumerTag = "", bool noLocal = false, bool exclusive = false, System.Collections.Generic.IDictionary<string, object> arguments = null) -> System.Threading.Tasks.ValueTask<string>
static RabbitMQ.Client.IChannelExtensions.BasicConsumeAsync(this RabbitMQ.Client.IChannel channel, string queue, bool autoAck, RabbitMQ.Client.IBasicConsumer consumer) -> System.Threading.Tasks.ValueTask<string>
static RabbitMQ.Client.IChannelExtensions.BasicConsumeAsync(this RabbitMQ.Client.IChannel channel, string queue, bool autoAck, string consumerTag, RabbitMQ.Client.IBasicConsumer consumer) -> System.Threading.Tasks.ValueTask<string>
static RabbitMQ.Client.IChannelExtensions.BasicConsumeAsync(this RabbitMQ.Client.IChannel channel, string queue, bool autoAck, string consumerTag, System.Collections.Generic.IDictionary<string, object> arguments, RabbitMQ.Client.IBasicConsumer consumer) -> System.Threading.Tasks.ValueTask<string>
static RabbitMQ.Client.IChannelExtensions.BasicPublish(this RabbitMQ.Client.IChannel channel, string exchange, string routingKey, System.ReadOnlyMemory<byte> body = default(System.ReadOnlyMemory<byte>), bool mandatory = false) -> void
static RabbitMQ.Client.IChannelExtensions.BasicPublish(this RabbitMQ.Client.IChannel! channel, RabbitMQ.Client.CachedString! exchange, RabbitMQ.Client.CachedString! routingKey, System.ReadOnlyMemory<byte> body = default(System.ReadOnlyMemory<byte>), bool mandatory = false, bool? copyBody = null) -> void
static RabbitMQ.Client.IChannelExtensions.BasicPublish<T>(this RabbitMQ.Client.IChannel channel, RabbitMQ.Client.PublicationAddress addr, in T basicProperties, System.ReadOnlyMemory<byte> body) -> void
static RabbitMQ.Client.IChannelExtensions.BasicPublishAsync(this RabbitMQ.Client.IChannel! channel, RabbitMQ.Client.CachedString! exchange, RabbitMQ.Client.CachedString! routingKey, System.ReadOnlyMemory<byte> body = default(System.ReadOnlyMemory<byte>), bool mandatory = false, bool? copyBody = null) -> System.Threading.Tasks.ValueTask
static RabbitMQ.Client.IChannelExtensions.BasicPublishAsync(this RabbitMQ.Client.IChannel! channel, string! exchange, string! routingKey, System.ReadOnlyMemory<byte> body = default(System.ReadOnlyMemory<byte>), bool mandatory = false, bool? copyBody = null) -> System.Threading.Tasks.ValueTask
static RabbitMQ.Client.IChannelExtensions.BasicPublishAsync<T>(this RabbitMQ.Client.IChannel channel, RabbitMQ.Client.PublicationAddress addr, in T basicProperties, System.ReadOnlyMemory<byte> body) -> System.Threading.Tasks.ValueTask
static RabbitMQ.Client.IChannelExtensions.Close(this RabbitMQ.Client.IChannel channel) -> void
static RabbitMQ.Client.IChannelExtensions.Close(this RabbitMQ.Client.IChannel channel, ushort replyCode, string replyText) -> void
static RabbitMQ.Client.IChannelExtensions.CloseAsync(this RabbitMQ.Client.IChannel channel) -> System.Threading.Tasks.ValueTask
static RabbitMQ.Client.IChannelExtensions.CloseAsync(this RabbitMQ.Client.IChannel channel, ushort replyCode, string replyText) -> System.Threading.Tasks.ValueTask
static RabbitMQ.Client.IChannelExtensions.ExchangeBind(this RabbitMQ.Client.IChannel channel, string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments = null) -> void
static RabbitMQ.Client.IChannelExtensions.ExchangeBindAsync(this RabbitMQ.Client.IChannel channel, string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments = null) -> System.Threading.Tasks.ValueTask
static RabbitMQ.Client.IChannelExtensions.ExchangeBindNoWait(this RabbitMQ.Client.IChannel channel, string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments = null) -> void
static RabbitMQ.Client.IChannelExtensions.ExchangeDeclare(this RabbitMQ.Client.IChannel channel, string exchange, string type, bool durable = false, bool autoDelete = false, System.Collections.Generic.IDictionary<string, object> arguments = null) -> void
static RabbitMQ.Client.IChannelExtensions.ExchangeDeclareAsync(this RabbitMQ.Client.IChannel channel, string exchange, string type, bool durable = false, bool autoDelete = false, System.Collections.Generic.IDictionary<string, object> arguments = null) -> System.Threading.Tasks.ValueTask
static RabbitMQ.Client.IChannelExtensions.ExchangeDeclareNoWait(this RabbitMQ.Client.IChannel channel, string exchange, string type, bool durable = false, bool autoDelete = false, System.Collections.Generic.IDictionary<string, object> arguments = null) -> void
static RabbitMQ.Client.IChannelExtensions.ExchangeDelete(this RabbitMQ.Client.IChannel channel, string exchange, bool ifUnused = false) -> void
static RabbitMQ.Client.IChannelExtensions.ExchangeDeleteAsync(this RabbitMQ.Client.IChannel channel, string exchange, bool ifUnused = false) -> System.Threading.Tasks.ValueTask
static RabbitMQ.Client.IChannelExtensions.ExchangeDeleteNoWait(this RabbitMQ.Client.IChannel channel, string exchange, bool ifUnused = false) -> void
static RabbitMQ.Client.IChannelExtensions.ExchangeUnbind(this RabbitMQ.Client.IChannel channel, string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments = null) -> void
static RabbitMQ.Client.IChannelExtensions.ExchangeUnbindAsync(this RabbitMQ.Client.IChannel channel, string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments = null) -> System.Threading.Tasks.ValueTask
static RabbitMQ.Client.IChannelExtensions.QueueBind(this RabbitMQ.Client.IChannel channel, string queue, string exchange, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments = null) -> void
static RabbitMQ.Client.IChannelExtensions.QueueBindAsync(this RabbitMQ.Client.IChannel channel, string queue, string exchange, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments = null) -> System.Threading.Tasks.ValueTask
static RabbitMQ.Client.IChannelExtensions.QueueDeclare(this RabbitMQ.Client.IChannel channel, string queue = "", bool durable = false, bool exclusive = true, bool autoDelete = true, System.Collections.Generic.IDictionary<string, object> arguments = null) -> RabbitMQ.Client.QueueDeclareOk
static RabbitMQ.Client.IChannelExtensions.QueueDeclareAsync(this RabbitMQ.Client.IChannel channel, string queue = "", bool durable = false, bool exclusive = true, bool autoDelete = true, System.Collections.Generic.IDictionary<string, object> arguments = null) -> System.Threading.Tasks.ValueTask<RabbitMQ.Client.QueueDeclareOk>
static RabbitMQ.Client.IChannelExtensions.QueueDelete(this RabbitMQ.Client.IChannel channel, string queue, bool ifUnused = false, bool ifEmpty = false) -> uint
static RabbitMQ.Client.IChannelExtensions.QueueDeleteAsync(this RabbitMQ.Client.IChannel channel, string queue, bool ifUnused = false, bool ifEmpty = false) -> System.Threading.Tasks.ValueTask<uint>
static RabbitMQ.Client.IChannelExtensions.QueueDeleteNoWait(this RabbitMQ.Client.IChannel channel, string queue, bool ifUnused = false, bool ifEmpty = false) -> void
static RabbitMQ.Client.IChannelExtensions.QueueUnbind(this RabbitMQ.Client.IChannel channel, string queue, string exchange, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments = null) -> void
static RabbitMQ.Client.IChannelExtensions.QueueUnbindAsync(this RabbitMQ.Client.IChannel channel, string queue, string exchange, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments = null) -> System.Threading.Tasks.ValueTask
static RabbitMQ.Client.IConnectionExtensions.Abort(this RabbitMQ.Client.IConnection connection) -> void
static RabbitMQ.Client.IConnectionExtensions.Abort(this RabbitMQ.Client.IConnection connection, System.TimeSpan timeout) -> void
static RabbitMQ.Client.IConnectionExtensions.Abort(this RabbitMQ.Client.IConnection connection, ushort reasonCode, string reasonText) -> void
static RabbitMQ.Client.IConnectionExtensions.Abort(this RabbitMQ.Client.IConnection connection, ushort reasonCode, string reasonText, System.TimeSpan timeout) -> void
static RabbitMQ.Client.IConnectionExtensions.AbortAsync(this RabbitMQ.Client.IConnection connection) -> System.Threading.Tasks.ValueTask
static RabbitMQ.Client.IConnectionExtensions.AbortAsync(this RabbitMQ.Client.IConnection connection, System.TimeSpan timeout) -> System.Threading.Tasks.ValueTask
static RabbitMQ.Client.IConnectionExtensions.AbortAsync(this RabbitMQ.Client.IConnection connection, ushort reasonCode, string reasonText) -> System.Threading.Tasks.ValueTask
static RabbitMQ.Client.IConnectionExtensions.AbortAsync(this RabbitMQ.Client.IConnection connection, ushort reasonCode, string reasonText, System.TimeSpan timeout) -> System.Threading.Tasks.ValueTask
static RabbitMQ.Client.IConnectionExtensions.Close(this RabbitMQ.Client.IConnection connection) -> void
static RabbitMQ.Client.IConnectionExtensions.Close(this RabbitMQ.Client.IConnection connection, System.TimeSpan timeout) -> void
static RabbitMQ.Client.IConnectionExtensions.Close(this RabbitMQ.Client.IConnection connection, ushort reasonCode, string reasonText) -> void
static RabbitMQ.Client.IConnectionExtensions.Close(this RabbitMQ.Client.IConnection connection, ushort reasonCode, string reasonText, System.TimeSpan timeout) -> void
static RabbitMQ.Client.IConnectionExtensions.CloseAsync(this RabbitMQ.Client.IConnection connection) -> System.Threading.Tasks.ValueTask
static RabbitMQ.Client.IConnectionExtensions.CloseAsync(this RabbitMQ.Client.IConnection connection, System.TimeSpan timeout) -> System.Threading.Tasks.ValueTask
static RabbitMQ.Client.IConnectionExtensions.CloseAsync(this RabbitMQ.Client.IConnection connection, ushort reasonCode, string reasonText) -> System.Threading.Tasks.ValueTask
static RabbitMQ.Client.IConnectionExtensions.CloseAsync(this RabbitMQ.Client.IConnection connection, ushort reasonCode, string reasonText, System.TimeSpan timeout) -> System.Threading.Tasks.ValueTask
static RabbitMQ.Client.PublicationAddress.Parse(string uriLikeString) -> RabbitMQ.Client.PublicationAddress
static RabbitMQ.Client.PublicationAddress.TryParse(string uriLikeString, out RabbitMQ.Client.PublicationAddress result) -> bool
static RabbitMQ.Client.QueueDeclareOk.implicit operator string(RabbitMQ.Client.QueueDeclareOk declareOk) -> string
static RabbitMQ.Client.TcpClientAdapter.GetMatchingHost(System.Collections.Generic.IReadOnlyCollection<System.Net.IPAddress> addresses, System.Net.Sockets.AddressFamily addressFamily) -> System.Net.IPAddress
static RabbitMQ.Client.TimerBasedCredentialRefresherEventSource.Log.get -> RabbitMQ.Client.TimerBasedCredentialRefresherEventSource
static readonly RabbitMQ.Client.CachedString.Empty -> RabbitMQ.Client.CachedString
static readonly RabbitMQ.Client.ConnectionFactory.DefaultAuthMechanisms -> System.Collections.Generic.IEnumerable<RabbitMQ.Client.IAuthMechanismFactory>
static readonly RabbitMQ.Client.ConnectionFactory.DefaultConnectionTimeout -> System.TimeSpan
static readonly RabbitMQ.Client.ConnectionFactory.DefaultCredentialsRefresher -> RabbitMQ.Client.ICredentialsRefresher
static readonly RabbitMQ.Client.ConnectionFactory.DefaultHeartbeat -> System.TimeSpan
static readonly RabbitMQ.Client.Protocols.AMQP_0_9_1 -> RabbitMQ.Client.IProtocol
static readonly RabbitMQ.Client.Protocols.DefaultProtocol -> RabbitMQ.Client.IProtocol
static readonly RabbitMQ.Client.PublicationAddress.PSEUDO_URI_PARSER -> System.Text.RegularExpressions.Regex
virtual RabbitMQ.Client.AsyncDefaultBasicConsumer.HandleBasicCancel(string consumerTag) -> System.Threading.Tasks.Task
virtual RabbitMQ.Client.AsyncDefaultBasicConsumer.HandleBasicCancelOk(string consumerTag) -> System.Threading.Tasks.Task
virtual RabbitMQ.Client.AsyncDefaultBasicConsumer.HandleBasicConsumeOk(string consumerTag) -> System.Threading.Tasks.Task
virtual RabbitMQ.Client.AsyncDefaultBasicConsumer.HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, in RabbitMQ.Client.ReadOnlyBasicProperties properties, System.ReadOnlyMemory<byte> body) -> System.Threading.Tasks.Task
virtual RabbitMQ.Client.AsyncDefaultBasicConsumer.HandleChannelShutdown(object channel, RabbitMQ.Client.ShutdownEventArgs reason) -> System.Threading.Tasks.Task
virtual RabbitMQ.Client.AsyncDefaultBasicConsumer.OnCancel(params string[] consumerTags) -> System.Threading.Tasks.Task
virtual RabbitMQ.Client.DefaultBasicConsumer.HandleBasicCancel(string consumerTag) -> void
virtual RabbitMQ.Client.DefaultBasicConsumer.HandleBasicCancelOk(string consumerTag) -> void
virtual RabbitMQ.Client.DefaultBasicConsumer.HandleBasicConsumeOk(string consumerTag) -> void
virtual RabbitMQ.Client.DefaultBasicConsumer.HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, in RabbitMQ.Client.ReadOnlyBasicProperties properties, System.ReadOnlyMemory<byte> body) -> void
virtual RabbitMQ.Client.DefaultBasicConsumer.HandleChannelShutdown(object channel, RabbitMQ.Client.ShutdownEventArgs reason) -> void
virtual RabbitMQ.Client.DefaultBasicConsumer.OnCancel(params string[] consumerTags) -> void
virtual RabbitMQ.Client.Exceptions.ProtocolException.ShutdownReason.get -> RabbitMQ.Client.ShutdownEventArgs
virtual RabbitMQ.Client.TcpClientAdapter.Client.get -> System.Net.Sockets.Socket
virtual RabbitMQ.Client.TcpClientAdapter.Close() -> void
virtual RabbitMQ.Client.TcpClientAdapter.ConnectAsync(System.Net.IPAddress ep, int port, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
virtual RabbitMQ.Client.TcpClientAdapter.Connected.get -> bool
virtual RabbitMQ.Client.TcpClientAdapter.Dispose(bool disposing) -> void
virtual RabbitMQ.Client.TcpClientAdapter.GetStream() -> System.Net.Sockets.NetworkStream
virtual RabbitMQ.Client.TcpClientAdapter.ReceiveTimeout.get -> System.TimeSpan
virtual RabbitMQ.Client.TcpClientAdapter.ReceiveTimeout.set -> void

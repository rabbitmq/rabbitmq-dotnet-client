[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute("Unit")]
namespace RabbitMQ.Client
{
    public class AmqpTcpEndpoint
    {
        public const int DefaultAmqpSslPort = 5671;
        public const int UseDefaultPort = -1;
        public AmqpTcpEndpoint(string hostName, int portOrMinusOne, RabbitMQ.Client.SslOption ssl) { }
        public AmqpTcpEndpoint(string hostName, int portOrMinusOne = -1) { }
        public AmqpTcpEndpoint() { }
        public AmqpTcpEndpoint(System.Uri uri, RabbitMQ.Client.SslOption ssl) { }
        public AmqpTcpEndpoint(System.Uri uri) { }
        public System.Net.Sockets.AddressFamily AddressFamily { get; set; }
        public string HostName { get; set; }
        public int Port { get; set; }
        public RabbitMQ.Client.IProtocol Protocol { get; }
        public RabbitMQ.Client.SslOption Ssl { get; set; }
        public object Clone() { }
        public RabbitMQ.Client.AmqpTcpEndpoint CloneWithHostname(string hostname) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public static RabbitMQ.Client.AmqpTcpEndpoint Parse(string address) { }
        public static RabbitMQ.Client.AmqpTcpEndpoint[] ParseMultiple(string addresses) { }
        public override string ToString() { }
    }
    public struct AmqpTimestamp
    {
        public AmqpTimestamp(long unixTime) { }
        public long UnixTime { get; }
        public override string ToString() { }
    }
    public class AmqpVersion
    {
        public AmqpVersion(int major, int minor) { }
        public int Major { get; }
        public int Minor { get; }
        public override bool Equals(object other) { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
    public class AsyncDefaultBasicConsumer : RabbitMQ.Client.IAsyncBasicConsumer, RabbitMQ.Client.IBasicConsumer
    {
        public AsyncDefaultBasicConsumer() { }
        public AsyncDefaultBasicConsumer(RabbitMQ.Client.IModel model) { }
        public string[] ConsumerTags { get; }
        public bool IsRunning { get; set; }
        public RabbitMQ.Client.IModel Model { get; set; }
        public RabbitMQ.Client.ShutdownEventArgs ShutdownReason { get; set; }
        public event RabbitMQ.Client.Events.AsyncEventHandler<RabbitMQ.Client.Events.ConsumerEventArgs> ConsumerCancelled;
        public event System.EventHandler<RabbitMQ.Client.Events.ConsumerEventArgs> RabbitMQ.Client.IBasicConsumer.ConsumerCancelled;
        public virtual System.Threading.Tasks.Task HandleBasicCancel(string consumerTag) { }
        public virtual System.Threading.Tasks.Task HandleBasicCancelOk(string consumerTag) { }
        public virtual System.Threading.Tasks.Task HandleBasicConsumeOk(string consumerTag) { }
        public virtual System.Threading.Tasks.Task HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, RabbitMQ.Client.IBasicProperties properties, byte[] body) { }
        public virtual System.Threading.Tasks.Task HandleModelShutdown(object model, RabbitMQ.Client.ShutdownEventArgs reason) { }
        public virtual System.Threading.Tasks.Task OnCancel(params string[] consumerTags) { }
    }
    public interface AuthMechanism
    {
        byte[] handleChallenge(byte[] challenge, RabbitMQ.Client.IConnectionFactory factory);
    }
    public interface AuthMechanismFactory
    {
        string Name { get; }
        RabbitMQ.Client.AuthMechanism GetInstance();
    }
    public class BasicGetResult
    {
        public BasicGetResult(ulong deliveryTag, bool redelivered, string exchange, string routingKey, uint messageCount, RabbitMQ.Client.IBasicProperties basicProperties, byte[] body) { }
        public RabbitMQ.Client.IBasicProperties BasicProperties { get; }
        public byte[] Body { get; }
        public ulong DeliveryTag { get; }
        public string Exchange { get; }
        public uint MessageCount { get; }
        public bool Redelivered { get; }
        public string RoutingKey { get; }
    }
    public class BinaryTableValue
    {
        public BinaryTableValue() { }
        public BinaryTableValue(byte[] bytes) { }
        public byte[] Bytes { get; set; }
    }
    public sealed class ConnectionFactory : RabbitMQ.Client.ConnectionFactoryBase, RabbitMQ.Client.IAsyncConnectionFactory, RabbitMQ.Client.IConnectionFactory
    {
        public static readonly System.Collections.Generic.IList<RabbitMQ.Client.AuthMechanismFactory> DefaultAuthMechanisms;
        public const ushort DefaultChannelMax = 2047;
        public static readonly System.TimeSpan DefaultConnectionTimeout;
        public const uint DefaultFrameMax = 0u;
        public static readonly System.TimeSpan DefaultHeartbeat;
        public const string DefaultPass = "guest";
        public const string DefaultUser = "guest";
        public const string DefaultVHost = "/";
        public ConnectionFactory() { }
        public System.Security.Authentication.SslProtocols AmqpUriSslProtocols { get; set; }
        public System.Collections.Generic.IList<RabbitMQ.Client.AuthMechanismFactory> AuthMechanisms { get; set; }
        public bool AutomaticRecoveryEnabled { get; set; }
        public System.Collections.Generic.IDictionary<string, object> ClientProperties { get; set; }
        public string ClientProvidedName { get; set; }
        public System.TimeSpan ContinuationTimeout { get; set; }
        public static System.Net.Sockets.AddressFamily DefaultAddressFamily { get; set; }
        public static System.Security.Authentication.SslProtocols DefaultAmqpUriSslProtocols { get; set; }
        public bool DispatchConsumersAsync { get; set; }
        public RabbitMQ.Client.AmqpTcpEndpoint Endpoint { get; set; }
        public System.Func<System.Collections.Generic.IEnumerable<RabbitMQ.Client.AmqpTcpEndpoint>, RabbitMQ.Client.IEndpointResolver> EndpointResolverFactory { get; set; }
        public System.TimeSpan HandshakeContinuationTimeout { get; set; }
        public string HostName { get; set; }
        public System.TimeSpan NetworkRecoveryInterval { get; set; }
        public string Password { get; set; }
        public int Port { get; set; }
        public ushort RequestedChannelMax { get; set; }
        public System.TimeSpan RequestedConnectionTimeout { get; set; }
        public uint RequestedFrameMax { get; set; }
        public System.TimeSpan RequestedHeartbeat { get; set; }
        public System.TimeSpan SocketReadTimeout { get; set; }
        public System.TimeSpan SocketWriteTimeout { get; set; }
        public RabbitMQ.Client.SslOption Ssl { get; set; }
        public bool TopologyRecoveryEnabled { get; set; }
        public System.Uri Uri { get; set; }
        public bool UseBackgroundThreadsForIO { get; set; }
        public string UserName { get; set; }
        public string VirtualHost { get; set; }
        public RabbitMQ.Client.AuthMechanismFactory AuthMechanismFactory(System.Collections.Generic.IList<string> mechanismNames) { }
        public RabbitMQ.Client.IConnection CreateConnection() { }
        public RabbitMQ.Client.IConnection CreateConnection(string clientProvidedName) { }
        public RabbitMQ.Client.IConnection CreateConnection(System.Collections.Generic.IList<string> hostnames) { }
        public RabbitMQ.Client.IConnection CreateConnection(System.Collections.Generic.IList<string> hostnames, string clientProvidedName) { }
        public RabbitMQ.Client.IConnection CreateConnection(System.Collections.Generic.IList<RabbitMQ.Client.AmqpTcpEndpoint> endpoints) { }
        public RabbitMQ.Client.IConnection CreateConnection(System.Collections.Generic.IList<RabbitMQ.Client.AmqpTcpEndpoint> endpoints, string clientProvidedName) { }
        public RabbitMQ.Client.IConnection CreateConnection(RabbitMQ.Client.IEndpointResolver endpointResolver, string clientProvidedName) { }
    }
    public class ConnectionFactoryBase
    {
        public System.Func<System.Net.Sockets.AddressFamily, RabbitMQ.Client.ITcpClient> SocketFactory;
        public ConnectionFactoryBase() { }
        public static RabbitMQ.Client.ITcpClient DefaultSocketFactory(System.Net.Sockets.AddressFamily addressFamily) { }
    }
    public class ConsumerWorkService
    {
        public ConsumerWorkService() { }
        public void AddWork(RabbitMQ.Client.IModel model, System.Action fn) { }
        public void StopWork(RabbitMQ.Client.IModel model) { }
        public void StopWork() { }
    }
    public class DefaultBasicConsumer : RabbitMQ.Client.IBasicConsumer
    {
        public System.EventHandler<RabbitMQ.Client.Events.ConsumerEventArgs> m_consumerCancelled;
        public DefaultBasicConsumer() { }
        public DefaultBasicConsumer(RabbitMQ.Client.IModel model) { }
        public string[] ConsumerTags { get; }
        public bool IsRunning { get; set; }
        public RabbitMQ.Client.IModel Model { get; set; }
        public RabbitMQ.Client.ShutdownEventArgs ShutdownReason { get; set; }
        public event System.EventHandler<RabbitMQ.Client.Events.ConsumerEventArgs> ConsumerCancelled;
        public virtual void HandleBasicCancel(string consumerTag) { }
        public virtual void HandleBasicCancelOk(string consumerTag) { }
        public virtual void HandleBasicConsumeOk(string consumerTag) { }
        public virtual void HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, RabbitMQ.Client.IBasicProperties properties, byte[] body) { }
        public virtual void HandleModelShutdown(object model, RabbitMQ.Client.ShutdownEventArgs reason) { }
        public virtual void OnCancel(params string[] consumerTags) { }
    }
    public class DefaultEndpointResolver : RabbitMQ.Client.IEndpointResolver
    {
        public DefaultEndpointResolver(System.Collections.Generic.IEnumerable<RabbitMQ.Client.AmqpTcpEndpoint> tcpEndpoints) { }
        public System.Collections.Generic.IEnumerable<RabbitMQ.Client.AmqpTcpEndpoint> All() { }
    }
    public class static ESLog
    {
        public static void Error(string message, System.Exception ex) { }
        public static void Error(string message, System.Exception ex, params object[] args) { }
        public static void Info(string message) { }
        public static void Info(string message, params object[] args) { }
        public static void Warn(string message) { }
        public static void Warn(string message, params object[] args) { }
    }
    public class static EndpointResolverExtensions
    {
        public static T SelectOne<T>(this RabbitMQ.Client.IEndpointResolver resolver, System.Func<RabbitMQ.Client.AmqpTcpEndpoint, T> selector) { }
    }
    public class static ExchangeType
    {
        public const string Direct = "direct";
        public const string Fanout = "fanout";
        public const string Headers = "headers";
        public const string Topic = "topic";
        public static System.Collections.Generic.ICollection<string> All() { }
    }
    public class ExternalMechanism : RabbitMQ.Client.AuthMechanism
    {
        public ExternalMechanism() { }
        public byte[] handleChallenge(byte[] challenge, RabbitMQ.Client.IConnectionFactory factory) { }
    }
    public class ExternalMechanismFactory : RabbitMQ.Client.AuthMechanismFactory
    {
        public ExternalMechanismFactory() { }
        public string Name { get; }
        public RabbitMQ.Client.AuthMechanism GetInstance() { }
    }
    public class static Headers
    {
        public const string AlternateExchange = "alternate-exchange";
        public const string XDeadLetterExchange = "x-dead-letter-exchange";
        public const string XDeadLetterRoutingKey = "x-dead-letter-routing-key";
        public const string XExpires = "x-expires";
        public const string XMaxLength = "x-max-length";
        public const string XMaxLengthInBytes = "x-max-length-bytes";
        public const string XMaxPriority = "x-max-priority";
        public const string XMessageTTL = "x-message-ttl";
        public const string XOverflow = "x-overflow";
        public const string XPriority = "x-priority";
        public const string XQueueMode = "x-queue-mode";
        public const string XQueueType = "x-queue-type";
        public const string XQuorumInitialGroupSize = "x-quorum-initial-group-size";
        public const string XSingleActiveConsumer = "x-single-active-consumer";
    }
    public interface IAsyncBasicConsumer
    {
        RabbitMQ.Client.IModel Model { get; }
        public event RabbitMQ.Client.Events.AsyncEventHandler<RabbitMQ.Client.Events.ConsumerEventArgs> ConsumerCancelled;
        System.Threading.Tasks.Task HandleBasicCancel(string consumerTag);
        System.Threading.Tasks.Task HandleBasicCancelOk(string consumerTag);
        System.Threading.Tasks.Task HandleBasicConsumeOk(string consumerTag);
        System.Threading.Tasks.Task HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, RabbitMQ.Client.IBasicProperties properties, byte[] body);
        System.Threading.Tasks.Task HandleModelShutdown(object model, RabbitMQ.Client.ShutdownEventArgs reason);
    }
    public interface IAsyncConnectionFactory : RabbitMQ.Client.IConnectionFactory
    {
        bool DispatchConsumersAsync { get; set; }
    }
    public interface IBasicConsumer
    {
        RabbitMQ.Client.IModel Model { get; }
        public event System.EventHandler<RabbitMQ.Client.Events.ConsumerEventArgs> ConsumerCancelled;
        void HandleBasicCancel(string consumerTag);
        void HandleBasicCancelOk(string consumerTag);
        void HandleBasicConsumeOk(string consumerTag);
        void HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, RabbitMQ.Client.IBasicProperties properties, byte[] body);
        void HandleModelShutdown(object model, RabbitMQ.Client.ShutdownEventArgs reason);
    }
    public interface IBasicProperties : RabbitMQ.Client.IContentHeader
    {
        string AppId { get; set; }
        string ClusterId { get; set; }
        string ContentEncoding { get; set; }
        string ContentType { get; set; }
        string CorrelationId { get; set; }
        byte DeliveryMode { get; set; }
        string Expiration { get; set; }
        System.Collections.Generic.IDictionary<string, object> Headers { get; set; }
        string MessageId { get; set; }
        bool Persistent { get; set; }
        byte Priority { get; set; }
        string ReplyTo { get; set; }
        RabbitMQ.Client.PublicationAddress ReplyToAddress { get; set; }
        RabbitMQ.Client.AmqpTimestamp Timestamp { get; set; }
        string Type { get; set; }
        string UserId { get; set; }
        void ClearAppId();
        void ClearClusterId();
        void ClearContentEncoding();
        void ClearContentType();
        void ClearCorrelationId();
        void ClearDeliveryMode();
        void ClearExpiration();
        void ClearHeaders();
        void ClearMessageId();
        void ClearPriority();
        void ClearReplyTo();
        void ClearTimestamp();
        void ClearType();
        void ClearUserId();
        bool IsAppIdPresent();
        bool IsClusterIdPresent();
        bool IsContentEncodingPresent();
        bool IsContentTypePresent();
        bool IsCorrelationIdPresent();
        bool IsDeliveryModePresent();
        bool IsExpirationPresent();
        bool IsHeadersPresent();
        bool IsMessageIdPresent();
        bool IsPriorityPresent();
        bool IsReplyToPresent();
        bool IsTimestampPresent();
        bool IsTypePresent();
        bool IsUserIdPresent();
    }
    public interface IBasicPublishBatch
    {
        void Add(string exchange, string routingKey, bool mandatory, RabbitMQ.Client.IBasicProperties properties, byte[] body);
        void Publish();
    }
    public interface IConnection : RabbitMQ.Client.NetworkConnection, System.IDisposable
    {
        ushort ChannelMax { get; }
        System.Collections.Generic.IDictionary<string, object> ClientProperties { get; }
        string ClientProvidedName { get; }
        RabbitMQ.Client.ShutdownEventArgs CloseReason { get; }
        RabbitMQ.Client.ConsumerWorkService ConsumerWorkService { get; }
        RabbitMQ.Client.AmqpTcpEndpoint Endpoint { get; }
        uint FrameMax { get; }
        System.TimeSpan Heartbeat { get; }
        bool IsOpen { get; }
        RabbitMQ.Client.AmqpTcpEndpoint[] KnownHosts { get; }
        RabbitMQ.Client.IProtocol Protocol { get; }
        System.Collections.Generic.IDictionary<string, object> ServerProperties { get; }
        System.Collections.Generic.IList<RabbitMQ.Client.ShutdownReportEntry> ShutdownReport { get; }
        public event System.EventHandler<RabbitMQ.Client.Events.CallbackExceptionEventArgs> CallbackException;
        public event System.EventHandler<RabbitMQ.Client.Events.ConnectionBlockedEventArgs> ConnectionBlocked;
        public event System.EventHandler<RabbitMQ.Client.Events.ConnectionRecoveryErrorEventArgs> ConnectionRecoveryError;
        public event System.EventHandler<RabbitMQ.Client.ShutdownEventArgs> ConnectionShutdown;
        public event System.EventHandler<System.EventArgs> ConnectionUnblocked;
        public event System.EventHandler<System.EventArgs> RecoverySucceeded;
        void Abort();
        void Abort(ushort reasonCode, string reasonText);
        void Abort(System.TimeSpan timeout);
        void Abort(ushort reasonCode, string reasonText, System.TimeSpan timeout);
        void Close();
        void Close(ushort reasonCode, string reasonText);
        void Close(System.TimeSpan timeout);
        void Close(ushort reasonCode, string reasonText, System.TimeSpan timeout);
        RabbitMQ.Client.IModel CreateModel();
        void HandleConnectionBlocked(string reason);
        void HandleConnectionUnblocked();
        void UpdateSecret(string newSecret, string reason);
    }
    public interface IConnectionFactory
    {
        System.Collections.Generic.IDictionary<string, object> ClientProperties { get; set; }
        string ClientProvidedName { get; set; }
        System.TimeSpan ContinuationTimeout { get; set; }
        System.TimeSpan HandshakeContinuationTimeout { get; set; }
        string Password { get; set; }
        ushort RequestedChannelMax { get; set; }
        uint RequestedFrameMax { get; set; }
        System.TimeSpan RequestedHeartbeat { get; set; }
        System.Uri Uri { get; set; }
        bool UseBackgroundThreadsForIO { get; set; }
        string UserName { get; set; }
        string VirtualHost { get; set; }
        RabbitMQ.Client.AuthMechanismFactory AuthMechanismFactory(System.Collections.Generic.IList<string> mechanismNames);
        RabbitMQ.Client.IConnection CreateConnection();
        RabbitMQ.Client.IConnection CreateConnection(string clientProvidedName);
        RabbitMQ.Client.IConnection CreateConnection(System.Collections.Generic.IList<string> hostnames);
        RabbitMQ.Client.IConnection CreateConnection(System.Collections.Generic.IList<string> hostnames, string clientProvidedName);
        RabbitMQ.Client.IConnection CreateConnection(System.Collections.Generic.IList<RabbitMQ.Client.AmqpTcpEndpoint> endpoints);
        RabbitMQ.Client.IConnection CreateConnection(System.Collections.Generic.IList<RabbitMQ.Client.AmqpTcpEndpoint> endpoints, string clientProvidedName);
    }
    public interface IContentHeader
    {
        ushort ProtocolClassId { get; }
        string ProtocolClassName { get; }
    }
    public interface IEndpointResolver
    {
        System.Collections.Generic.IEnumerable<RabbitMQ.Client.AmqpTcpEndpoint> All();
    }
    public interface IMethod
    {
        ushort ProtocolClassId { get; }
        ushort ProtocolMethodId { get; }
        string ProtocolMethodName { get; }
    }
    public interface IModel : System.IDisposable
    {
        int ChannelNumber { get; }
        RabbitMQ.Client.ShutdownEventArgs CloseReason { get; }
        System.TimeSpan ContinuationTimeout { get; set; }
        RabbitMQ.Client.IBasicConsumer DefaultConsumer { get; set; }
        bool IsClosed { get; }
        bool IsOpen { get; }
        ulong NextPublishSeqNo { get; }
        public event System.EventHandler<RabbitMQ.Client.Events.BasicAckEventArgs> BasicAcks;
        public event System.EventHandler<RabbitMQ.Client.Events.BasicNackEventArgs> BasicNacks;
        public event System.EventHandler<System.EventArgs> BasicRecoverOk;
        public event System.EventHandler<RabbitMQ.Client.Events.BasicReturnEventArgs> BasicReturn;
        public event System.EventHandler<RabbitMQ.Client.Events.CallbackExceptionEventArgs> CallbackException;
        public event System.EventHandler<RabbitMQ.Client.Events.FlowControlEventArgs> FlowControl;
        public event System.EventHandler<RabbitMQ.Client.ShutdownEventArgs> ModelShutdown;
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        void Abort();
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        void Abort(ushort replyCode, string replyText);
        void BasicAck(ulong deliveryTag, bool multiple);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        void BasicCancel(string consumerTag);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        string BasicConsume(string queue, bool autoAck, string consumerTag, bool noLocal, bool exclusive, System.Collections.Generic.IDictionary<string, object> arguments, RabbitMQ.Client.IBasicConsumer consumer);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        RabbitMQ.Client.BasicGetResult BasicGet(string queue, bool autoAck);
        void BasicNack(ulong deliveryTag, bool multiple, bool requeue);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        void BasicPublish(string exchange, string routingKey, bool mandatory, RabbitMQ.Client.IBasicProperties basicProperties, byte[] body);
        void BasicQos(uint prefetchSize, ushort prefetchCount, bool global);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        void BasicRecover(bool requeue);
        void BasicRecoverAsync(bool requeue);
        void BasicReject(ulong deliveryTag, bool requeue);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        void Close();
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        void Close(ushort replyCode, string replyText);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        void ConfirmSelect();
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        uint ConsumerCount(string queue);
        [RabbitMQ.Client.Apigen.Attributes.AmqpContentHeaderFactoryAttribute("basic")]
        RabbitMQ.Client.IBasicProperties CreateBasicProperties();
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        RabbitMQ.Client.IBasicPublishBatch CreateBasicPublishBatch();
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        void ExchangeBind(string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments);
        void ExchangeBindNoWait(string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        void ExchangeDeclare(string exchange, string type, bool durable, bool autoDelete, System.Collections.Generic.IDictionary<string, object> arguments);
        void ExchangeDeclareNoWait(string exchange, string type, bool durable, bool autoDelete, System.Collections.Generic.IDictionary<string, object> arguments);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        void ExchangeDeclarePassive(string exchange);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        void ExchangeDelete(string exchange, bool ifUnused);
        void ExchangeDeleteNoWait(string exchange, bool ifUnused);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        void ExchangeUnbind(string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        void ExchangeUnbindNoWait(string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        uint MessageCount(string queue);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        void QueueBind(string queue, string exchange, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments);
        void QueueBindNoWait(string queue, string exchange, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        RabbitMQ.Client.QueueDeclareOk QueueDeclare(string queue, bool durable, bool exclusive, bool autoDelete, System.Collections.Generic.IDictionary<string, object> arguments);
        void QueueDeclareNoWait(string queue, bool durable, bool exclusive, bool autoDelete, System.Collections.Generic.IDictionary<string, object> arguments);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        RabbitMQ.Client.QueueDeclareOk QueueDeclarePassive(string queue);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        uint QueueDelete(string queue, bool ifUnused, bool ifEmpty);
        void QueueDeleteNoWait(string queue, bool ifUnused, bool ifEmpty);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        uint QueuePurge(string queue);
        void QueueUnbind(string queue, string exchange, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments);
        void TxCommit();
        void TxRollback();
        void TxSelect();
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        bool WaitForConfirms();
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        bool WaitForConfirms(System.TimeSpan timeout);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        bool WaitForConfirms(System.TimeSpan timeout, out bool timedOut);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        void WaitForConfirmsOrDie();
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute(null)]
        void WaitForConfirmsOrDie(System.TimeSpan timeout);
    }
    public class static IModelExensions
    {
        public static string BasicConsume(this RabbitMQ.Client.IModel model, RabbitMQ.Client.IBasicConsumer consumer, string queue, bool autoAck = False, string consumerTag = "", bool noLocal = False, bool exclusive = False, System.Collections.Generic.IDictionary<string, object> arguments = null) { }
        public static string BasicConsume(this RabbitMQ.Client.IModel model, string queue, bool autoAck, RabbitMQ.Client.IBasicConsumer consumer) { }
        public static string BasicConsume(this RabbitMQ.Client.IModel model, string queue, bool autoAck, string consumerTag, RabbitMQ.Client.IBasicConsumer consumer) { }
        public static string BasicConsume(this RabbitMQ.Client.IModel model, string queue, bool autoAck, string consumerTag, System.Collections.Generic.IDictionary<string, object> arguments, RabbitMQ.Client.IBasicConsumer consumer) { }
        public static void BasicPublish(this RabbitMQ.Client.IModel model, RabbitMQ.Client.PublicationAddress addr, RabbitMQ.Client.IBasicProperties basicProperties, byte[] body) { }
        public static void BasicPublish(this RabbitMQ.Client.IModel model, string exchange, string routingKey, RabbitMQ.Client.IBasicProperties basicProperties, byte[] body) { }
        public static void BasicPublish(this RabbitMQ.Client.IModel model, string exchange, string routingKey, bool mandatory = False, RabbitMQ.Client.IBasicProperties basicProperties = null, byte[] body = null) { }
        public static void ExchangeBind(this RabbitMQ.Client.IModel model, string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments = null) { }
        public static void ExchangeBindNoWait(this RabbitMQ.Client.IModel model, string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments = null) { }
        public static void ExchangeDeclare(this RabbitMQ.Client.IModel model, string exchange, string type, bool durable = False, bool autoDelete = False, System.Collections.Generic.IDictionary<string, object> arguments = null) { }
        public static void ExchangeDeclareNoWait(this RabbitMQ.Client.IModel model, string exchange, string type, bool durable = False, bool autoDelete = False, System.Collections.Generic.IDictionary<string, object> arguments = null) { }
        public static void ExchangeDelete(this RabbitMQ.Client.IModel model, string exchange, bool ifUnused = False) { }
        public static void ExchangeDeleteNoWait(this RabbitMQ.Client.IModel model, string exchange, bool ifUnused = False) { }
        public static void ExchangeUnbind(this RabbitMQ.Client.IModel model, string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments = null) { }
        public static void QueueBind(this RabbitMQ.Client.IModel model, string queue, string exchange, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments = null) { }
        public static RabbitMQ.Client.QueueDeclareOk QueueDeclare(this RabbitMQ.Client.IModel model, string queue = "", bool durable = False, bool exclusive = True, bool autoDelete = True, System.Collections.Generic.IDictionary<string, object> arguments = null) { }
        public static uint QueueDelete(this RabbitMQ.Client.IModel model, string queue, bool ifUnused = False, bool ifEmpty = False) { }
        public static void QueueDeleteNoWait(this RabbitMQ.Client.IModel model, string queue, bool ifUnused = False, bool ifEmpty = False) { }
        public static void QueueUnbind(this RabbitMQ.Client.IModel model, string queue, string exchange, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments = null) { }
    }
    public interface IProtocol
    {
        string ApiName { get; }
        int DefaultPort { get; }
        int MajorVersion { get; }
        int MinorVersion { get; }
        int Revision { get; }
        RabbitMQ.Client.IConnection CreateConnection(RabbitMQ.Client.IConnectionFactory factory, bool insist, RabbitMQ.Client.Impl.IFrameHandler frameHandler);
        RabbitMQ.Client.IConnection CreateConnection(RabbitMQ.Client.ConnectionFactory factory, RabbitMQ.Client.Impl.IFrameHandler frameHandler, bool automaticRecoveryEnabled);
        RabbitMQ.Client.IConnection CreateConnection(RabbitMQ.Client.IConnectionFactory factory, bool insist, RabbitMQ.Client.Impl.IFrameHandler frameHandler, string clientProvidedName);
        RabbitMQ.Client.IConnection CreateConnection(RabbitMQ.Client.ConnectionFactory factory, RabbitMQ.Client.Impl.IFrameHandler frameHandler, bool automaticRecoveryEnabled, string clientProvidedName);
        RabbitMQ.Client.IModel CreateModel(RabbitMQ.Client.Impl.ISession session);
    }
    public interface IRecoverable
    {
        public event System.EventHandler<System.EventArgs> Recovery;
    }
    public interface IStreamProperties : RabbitMQ.Client.IContentHeader
    {
        string ContentEncoding { get; set; }
        string ContentType { get; set; }
        System.Collections.Generic.IDictionary<string, object> Headers { get; set; }
        byte Priority { get; set; }
        RabbitMQ.Client.AmqpTimestamp Timestamp { get; set; }
        void ClearContentEncoding();
        void ClearContentType();
        void ClearHeaders();
        void ClearPriority();
        void ClearTimestamp();
        bool IsContentEncodingPresent();
        bool IsContentTypePresent();
        bool IsHeadersPresent();
        bool IsPriorityPresent();
        bool IsTimestampPresent();
    }
    public interface ITcpClient : System.IDisposable
    {
        System.Net.Sockets.Socket Client { get; }
        bool Connected { get; }
        System.TimeSpan ReceiveTimeout { get; set; }
        void Close();
        System.Threading.Tasks.Task ConnectAsync(string host, int port);
        System.IO.Stream GetStream();
    }
    public interface NetworkConnection
    {
        int LocalPort { get; }
        int RemotePort { get; }
    }
    public class PlainMechanism : RabbitMQ.Client.AuthMechanism
    {
        public PlainMechanism() { }
        public byte[] handleChallenge(byte[] challenge, RabbitMQ.Client.IConnectionFactory factory) { }
    }
    public class PlainMechanismFactory : RabbitMQ.Client.AuthMechanismFactory
    {
        public PlainMechanismFactory() { }
        public string Name { get; }
        public RabbitMQ.Client.AuthMechanism GetInstance() { }
    }
    public class ProtocolViolationException : RabbitMQ.Client.Exceptions.RabbitMQClientException
    {
        public ProtocolViolationException(string message) { }
        public ProtocolViolationException(string message, System.Exception inner) { }
        public ProtocolViolationException() { }
    }
    public class static Protocols
    {
        public static RabbitMQ.Client.IProtocol AMQP_0_9_1 { get; }
        public static RabbitMQ.Client.IProtocol DefaultProtocol { get; }
    }
    public class PublicationAddress
    {
        public static readonly System.Text.RegularExpressions.Regex PSEUDO_URI_PARSER;
        public PublicationAddress(string exchangeType, string exchangeName, string routingKey) { }
        public string ExchangeName { get; }
        public string ExchangeType { get; }
        public string RoutingKey { get; }
        public static RabbitMQ.Client.PublicationAddress Parse(string uriLikeString) { }
        public override string ToString() { }
    }
    public class QueueDeclareOk
    {
        public QueueDeclareOk(string queueName, uint messageCount, uint consumerCount) { }
        public uint ConsumerCount { get; }
        public uint MessageCount { get; }
        public string QueueName { get; }
        public static string op_Implicit(RabbitMQ.Client.QueueDeclareOk declareOk) { }
    }
    public class ShutdownEventArgs : System.EventArgs
    {
        public ShutdownEventArgs(RabbitMQ.Client.ShutdownInitiator initiator, ushort replyCode, string replyText, object cause = null) { }
        public ShutdownEventArgs(RabbitMQ.Client.ShutdownInitiator initiator, ushort replyCode, string replyText, ushort classId, ushort methodId, object cause = null) { }
        public object Cause { get; }
        public ushort ClassId { get; }
        public RabbitMQ.Client.ShutdownInitiator Initiator { get; }
        public ushort MethodId { get; }
        public ushort ReplyCode { get; }
        public string ReplyText { get; }
        public override string ToString() { }
    }
    public enum ShutdownInitiator
    {
        Application = 0,
        Library = 1,
        Peer = 2,
    }
    public class ShutdownReportEntry
    {
        public ShutdownReportEntry(string description, System.Exception exception) { }
        public string Description { get; set; }
        public System.Exception Exception { get; set; }
        public override string ToString() { }
    }
    public class SslHelper
    {
        public static System.IO.Stream TcpUpgrade(System.IO.Stream tcpStream, RabbitMQ.Client.SslOption sslOption) { }
    }
    public class SslOption
    {
        public SslOption(string serverName, string certificatePath = "", bool enabled = False) { }
        public SslOption() { }
        public System.Net.Security.SslPolicyErrors AcceptablePolicyErrors { get; set; }
        public string CertPassphrase { get; set; }
        public string CertPath { get; set; }
        public System.Net.Security.LocalCertificateSelectionCallback CertificateSelectionCallback { get; set; }
        public System.Net.Security.RemoteCertificateValidationCallback CertificateValidationCallback { get; set; }
        public System.Security.Cryptography.X509Certificates.X509CertificateCollection Certs { get; set; }
        public bool CheckCertificateRevocation { get; set; }
        public bool Enabled { get; set; }
        public string ServerName { get; set; }
        public System.Security.Authentication.SslProtocols Version { get; set; }
    }
    public class TcpClientAdapter : RabbitMQ.Client.ITcpClient, System.IDisposable
    {
        public TcpClientAdapter(System.Net.Sockets.Socket socket) { }
        public virtual System.Net.Sockets.Socket Client { get; }
        public virtual bool Connected { get; }
        public virtual System.TimeSpan ReceiveTimeout { get; set; }
        public virtual void Close() { }
        public virtual System.Threading.Tasks.Task ConnectAsync(string host, int port) { }
        [System.ObsoleteAttribute("Override Dispose(bool) instead.")]
        public virtual void Dispose() { }
        protected virtual void Dispose(bool disposing) { }
        public virtual System.IO.Stream GetStream() { }
    }
    public class static TcpClientAdapterHelper
    {
        public static System.Net.IPAddress GetMatchingHost(System.Collections.Generic.IReadOnlyCollection<System.Net.IPAddress> addresses, System.Net.Sockets.AddressFamily addressFamily) { }
    }
    public class TopologyRecoveryException : RabbitMQ.Client.Exceptions.RabbitMQClientException
    {
        public TopologyRecoveryException(string message, System.Exception cause) { }
    }
}
namespace RabbitMQ.Client.Apigen.Attributes
{
    public abstract class AmqpApigenAttribute : System.Attribute
    {
        public string m_namespaceName;
        public AmqpApigenAttribute(string namespaceName) { }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Assembly | System.AttributeTargets.Module | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Constructor | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Event | System.AttributeTargets.Interface | System.AttributeTargets.Parameter | System.AttributeTargets.Delegate | System.AttributeTargets.ReturnValue | System.AttributeTargets.GenericParameter | System.AttributeTargets.All, AllowMultiple=true)]
    public class AmqpAsynchronousHandlerAttribute : RabbitMQ.Client.Apigen.Attributes.AmqpApigenAttribute
    {
        public AmqpAsynchronousHandlerAttribute(string namespaceName) { }
    }
    public class AmqpContentBodyMappingAttribute : System.Attribute
    {
        public AmqpContentBodyMappingAttribute() { }
    }
    public class AmqpContentHeaderFactoryAttribute : System.Attribute
    {
        public string m_contentClass;
        public AmqpContentHeaderFactoryAttribute(string contentClass) { }
    }
    public class AmqpContentHeaderMappingAttribute : System.Attribute
    {
        public AmqpContentHeaderMappingAttribute() { }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Assembly | System.AttributeTargets.Module | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Constructor | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Event | System.AttributeTargets.Interface | System.AttributeTargets.Parameter | System.AttributeTargets.Delegate | System.AttributeTargets.ReturnValue | System.AttributeTargets.GenericParameter | System.AttributeTargets.All, AllowMultiple=true)]
    public class AmqpFieldMappingAttribute : RabbitMQ.Client.Apigen.Attributes.AmqpApigenAttribute
    {
        public string m_fieldName;
        public AmqpFieldMappingAttribute(string namespaceName, string fieldName) { }
    }
    public class AmqpForceOneWayAttribute : System.Attribute
    {
        public AmqpForceOneWayAttribute() { }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Assembly | System.AttributeTargets.Module | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Constructor | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Event | System.AttributeTargets.Interface | System.AttributeTargets.Parameter | System.AttributeTargets.Delegate | System.AttributeTargets.ReturnValue | System.AttributeTargets.GenericParameter | System.AttributeTargets.All, AllowMultiple=true)]
    public class AmqpMethodDoNotImplementAttribute : RabbitMQ.Client.Apigen.Attributes.AmqpApigenAttribute
    {
        public AmqpMethodDoNotImplementAttribute(string namespaceName) { }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Assembly | System.AttributeTargets.Module | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Constructor | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Event | System.AttributeTargets.Interface | System.AttributeTargets.Parameter | System.AttributeTargets.Delegate | System.AttributeTargets.ReturnValue | System.AttributeTargets.GenericParameter | System.AttributeTargets.All, AllowMultiple=true)]
    public class AmqpMethodMappingAttribute : RabbitMQ.Client.Apigen.Attributes.AmqpApigenAttribute
    {
        public string m_className;
        public string m_methodName;
        public AmqpMethodMappingAttribute(string namespaceName, string className, string methodName) { }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Assembly | System.AttributeTargets.Module | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Constructor | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Event | System.AttributeTargets.Interface | System.AttributeTargets.Parameter | System.AttributeTargets.Delegate | System.AttributeTargets.ReturnValue | System.AttributeTargets.GenericParameter | System.AttributeTargets.All, AllowMultiple=true)]
    public class AmqpNowaitArgumentAttribute : RabbitMQ.Client.Apigen.Attributes.AmqpApigenAttribute
    {
        public string m_replacementExpression;
        public AmqpNowaitArgumentAttribute(string namespaceName) { }
        public AmqpNowaitArgumentAttribute(string namespaceName, string replacementExpression) { }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Assembly | System.AttributeTargets.Module | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Constructor | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Event | System.AttributeTargets.Interface | System.AttributeTargets.Parameter | System.AttributeTargets.Delegate | System.AttributeTargets.ReturnValue | System.AttributeTargets.GenericParameter | System.AttributeTargets.All, AllowMultiple=true)]
    public class AmqpUnsupportedAttribute : RabbitMQ.Client.Apigen.Attributes.AmqpApigenAttribute
    {
        public AmqpUnsupportedAttribute(string namespaceName) { }
    }
}
namespace RabbitMQ.Client.Content
{
    public class BasicMessageBuilder : RabbitMQ.Client.Content.IMessageBuilder
    {
        public const int DefaultAccumulatorSize = 1024;
        protected System.IO.MemoryStream m_accumulator;
        protected RabbitMQ.Util.NetworkBinaryWriter m_writer;
        public BasicMessageBuilder(RabbitMQ.Client.IModel model) { }
        public BasicMessageBuilder(RabbitMQ.Client.IModel model, int initialAccumulatorSize) { }
        public System.IO.Stream BodyStream { get; }
        public System.Collections.Generic.IDictionary<string, object> Headers { get; }
        public RabbitMQ.Client.IBasicProperties Properties { get; set; }
        public RabbitMQ.Util.NetworkBinaryWriter Writer { get; }
        public virtual byte[] GetContentBody() { }
        public virtual RabbitMQ.Client.IContentHeader GetContentHeader() { }
        public virtual string GetDefaultContentType() { }
        public RabbitMQ.Client.Content.IMessageBuilder RawWrite(byte value) { }
        public RabbitMQ.Client.Content.IMessageBuilder RawWrite(byte[] bytes) { }
        public RabbitMQ.Client.Content.IMessageBuilder RawWrite(byte[] bytes, int offset, int length) { }
    }
    public class BasicMessageReader : RabbitMQ.Client.Content.IMessageReader
    {
        protected RabbitMQ.Util.NetworkBinaryReader m_reader;
        protected System.IO.MemoryStream m_stream;
        public BasicMessageReader(RabbitMQ.Client.IBasicProperties properties, byte[] body) { }
        public byte[] BodyBytes { get; set; }
        public System.IO.Stream BodyStream { get; }
        public System.Collections.Generic.IDictionary<string, object> Headers { get; }
        public RabbitMQ.Client.IBasicProperties Properties { get; set; }
        public RabbitMQ.Util.NetworkBinaryReader Reader { get; }
        public int RawRead() { }
        public int RawRead(byte[] target, int offset, int length) { }
    }
    public class BytesMessageBuilder : RabbitMQ.Client.Content.BasicMessageBuilder, RabbitMQ.Client.Content.IBytesMessageBuilder, RabbitMQ.Client.Content.IMessageBuilder
    {
        public const string MimeType = "application/octet-stream";
        public BytesMessageBuilder(RabbitMQ.Client.IModel model) { }
        public BytesMessageBuilder(RabbitMQ.Client.IModel model, int initialAccumulatorSize) { }
        public override string GetDefaultContentType() { }
        public RabbitMQ.Client.Content.IBytesMessageBuilder Write(byte[] source, int offset, int count) { }
        public RabbitMQ.Client.Content.IBytesMessageBuilder WriteByte(byte value) { }
        public RabbitMQ.Client.Content.IBytesMessageBuilder WriteBytes(byte[] source) { }
        public RabbitMQ.Client.Content.IBytesMessageBuilder WriteChar(char value) { }
        public RabbitMQ.Client.Content.IBytesMessageBuilder WriteDouble(double value) { }
        public RabbitMQ.Client.Content.IBytesMessageBuilder WriteInt16(short value) { }
        public RabbitMQ.Client.Content.IBytesMessageBuilder WriteInt32(int value) { }
        public RabbitMQ.Client.Content.IBytesMessageBuilder WriteInt64(long value) { }
        public RabbitMQ.Client.Content.IBytesMessageBuilder WriteSingle(float value) { }
        public RabbitMQ.Client.Content.IBytesMessageBuilder WriteString(string value) { }
    }
    public class BytesMessageReader : RabbitMQ.Client.Content.BasicMessageReader, RabbitMQ.Client.Content.IBytesMessageReader, RabbitMQ.Client.Content.IMessageReader
    {
        public static readonly string MimeType;
        public BytesMessageReader(RabbitMQ.Client.IBasicProperties properties, byte[] payload) { }
        public int Read(byte[] target, int offset, int count) { }
        public byte ReadByte() { }
        public byte[] ReadBytes(int count) { }
        public char ReadChar() { }
        public double ReadDouble() { }
        public short ReadInt16() { }
        public int ReadInt32() { }
        public long ReadInt64() { }
        public float ReadSingle() { }
        public string ReadString() { }
    }
    public class static BytesWireFormatting
    {
        public static int Read(RabbitMQ.Util.NetworkBinaryReader reader, byte[] target, int offset, int count) { }
        public static byte ReadByte(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static byte[] ReadBytes(RabbitMQ.Util.NetworkBinaryReader reader, int count) { }
        public static char ReadChar(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static double ReadDouble(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static short ReadInt16(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static int ReadInt32(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static long ReadInt64(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static float ReadSingle(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static string ReadString(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static void Write(RabbitMQ.Util.NetworkBinaryWriter writer, byte[] source, int offset, int count) { }
        public static void WriteByte(RabbitMQ.Util.NetworkBinaryWriter writer, byte value) { }
        public static void WriteBytes(RabbitMQ.Util.NetworkBinaryWriter writer, byte[] source) { }
        public static void WriteChar(RabbitMQ.Util.NetworkBinaryWriter writer, char value) { }
        public static void WriteDouble(RabbitMQ.Util.NetworkBinaryWriter writer, double value) { }
        public static void WriteInt16(RabbitMQ.Util.NetworkBinaryWriter writer, short value) { }
        public static void WriteInt32(RabbitMQ.Util.NetworkBinaryWriter writer, int value) { }
        public static void WriteInt64(RabbitMQ.Util.NetworkBinaryWriter writer, long value) { }
        public static void WriteSingle(RabbitMQ.Util.NetworkBinaryWriter writer, float value) { }
        public static void WriteString(RabbitMQ.Util.NetworkBinaryWriter writer, string value) { }
    }
    public interface IBytesMessageBuilder : RabbitMQ.Client.Content.IMessageBuilder
    {
        RabbitMQ.Client.Content.IBytesMessageBuilder Write(byte[] source, int offset, int count);
        RabbitMQ.Client.Content.IBytesMessageBuilder WriteByte(byte value);
        RabbitMQ.Client.Content.IBytesMessageBuilder WriteBytes(byte[] source);
        RabbitMQ.Client.Content.IBytesMessageBuilder WriteChar(char value);
        RabbitMQ.Client.Content.IBytesMessageBuilder WriteDouble(double value);
        RabbitMQ.Client.Content.IBytesMessageBuilder WriteInt16(short value);
        RabbitMQ.Client.Content.IBytesMessageBuilder WriteInt32(int value);
        RabbitMQ.Client.Content.IBytesMessageBuilder WriteInt64(long value);
        RabbitMQ.Client.Content.IBytesMessageBuilder WriteSingle(float value);
        RabbitMQ.Client.Content.IBytesMessageBuilder WriteString(string value);
    }
    public interface IBytesMessageReader : RabbitMQ.Client.Content.IMessageReader
    {
        int Read(byte[] target, int offset, int count);
        byte ReadByte();
        byte[] ReadBytes(int count);
        char ReadChar();
        double ReadDouble();
        short ReadInt16();
        int ReadInt32();
        long ReadInt64();
        float ReadSingle();
        string ReadString();
    }
    public interface IMapMessageBuilder : RabbitMQ.Client.Content.IMessageBuilder
    {
        System.Collections.Generic.IDictionary<string, object> Body { get; }
    }
    public interface IMapMessageReader : RabbitMQ.Client.Content.IMessageReader
    {
        System.Collections.Generic.IDictionary<string, object> Body { get; }
    }
    public interface IMessageBuilder
    {
        System.IO.Stream BodyStream { get; }
        System.Collections.Generic.IDictionary<string, object> Headers { get; }
        byte[] GetContentBody();
        RabbitMQ.Client.IContentHeader GetContentHeader();
        string GetDefaultContentType();
        RabbitMQ.Client.Content.IMessageBuilder RawWrite(byte value);
        RabbitMQ.Client.Content.IMessageBuilder RawWrite(byte[] bytes);
        RabbitMQ.Client.Content.IMessageBuilder RawWrite(byte[] bytes, int offset, int length);
    }
    public interface IMessageReader
    {
        byte[] BodyBytes { get; }
        System.IO.Stream BodyStream { get; }
        System.Collections.Generic.IDictionary<string, object> Headers { get; }
        int RawRead();
        int RawRead(byte[] target, int offset, int length);
    }
    public interface IStreamMessageBuilder : RabbitMQ.Client.Content.IMessageBuilder
    {
        RabbitMQ.Client.Content.IStreamMessageBuilder WriteBool(bool value);
        RabbitMQ.Client.Content.IStreamMessageBuilder WriteByte(byte value);
        RabbitMQ.Client.Content.IStreamMessageBuilder WriteBytes(byte[] source, int offset, int count);
        RabbitMQ.Client.Content.IStreamMessageBuilder WriteBytes(byte[] source);
        RabbitMQ.Client.Content.IStreamMessageBuilder WriteChar(char value);
        RabbitMQ.Client.Content.IStreamMessageBuilder WriteDouble(double value);
        RabbitMQ.Client.Content.IStreamMessageBuilder WriteInt16(short value);
        RabbitMQ.Client.Content.IStreamMessageBuilder WriteInt32(int value);
        RabbitMQ.Client.Content.IStreamMessageBuilder WriteInt64(long value);
        RabbitMQ.Client.Content.IStreamMessageBuilder WriteObject(object value);
        RabbitMQ.Client.Content.IStreamMessageBuilder WriteObjects(params object[] values);
        RabbitMQ.Client.Content.IStreamMessageBuilder WriteSingle(float value);
        RabbitMQ.Client.Content.IStreamMessageBuilder WriteString(string value);
    }
    public interface IStreamMessageReader : RabbitMQ.Client.Content.IMessageReader
    {
        bool ReadBool();
        byte ReadByte();
        byte[] ReadBytes();
        char ReadChar();
        double ReadDouble();
        short ReadInt16();
        int ReadInt32();
        long ReadInt64();
        object ReadObject();
        object[] ReadObjects();
        float ReadSingle();
        string ReadString();
    }
    public class MapMessageBuilder : RabbitMQ.Client.Content.BasicMessageBuilder, RabbitMQ.Client.Content.IMapMessageBuilder, RabbitMQ.Client.Content.IMessageBuilder
    {
        public const string MimeType = "jms/map-message";
        public MapMessageBuilder(RabbitMQ.Client.IModel model) { }
        public MapMessageBuilder(RabbitMQ.Client.IModel model, int initialAccumulatorSize) { }
        public System.Collections.Generic.IDictionary<string, object> Body { get; set; }
        public override byte[] GetContentBody() { }
        public override string GetDefaultContentType() { }
    }
    public class MapMessageReader : RabbitMQ.Client.Content.BasicMessageReader, RabbitMQ.Client.Content.IMapMessageReader, RabbitMQ.Client.Content.IMessageReader
    {
        public const string MimeType = "jms/map-message";
        protected System.Collections.Generic.IDictionary<string, object> m_table;
        public MapMessageReader(RabbitMQ.Client.IBasicProperties properties, byte[] payload) { }
        public System.Collections.Generic.IDictionary<string, object> Body { get; }
    }
    public class static MapWireFormatting
    {
        public static System.Collections.Generic.IDictionary<string, object> ReadMap(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static void WriteMap(RabbitMQ.Util.NetworkBinaryWriter writer, System.Collections.Generic.IDictionary<string, object> table) { }
    }
    public class static PrimitiveParser
    {
        public static System.Exception CreateProtocolViolationException(string targetType, object source) { }
        public static bool ParseBool(string value) { }
        public static byte ParseByte(string value) { }
        public static double ParseDouble(string value) { }
        public static float ParseFloat(string value) { }
        public static int ParseInt(string value) { }
        public static long ParseLong(string value) { }
        public static short ParseShort(string value) { }
    }
    public class StreamMessageBuilder : RabbitMQ.Client.Content.BasicMessageBuilder, RabbitMQ.Client.Content.IMessageBuilder, RabbitMQ.Client.Content.IStreamMessageBuilder
    {
        public const string MimeType = "jms/stream-message";
        public StreamMessageBuilder(RabbitMQ.Client.IModel model) { }
        public StreamMessageBuilder(RabbitMQ.Client.IModel model, int initialAccumulatorSize) { }
        public override string GetDefaultContentType() { }
        public RabbitMQ.Client.Content.IStreamMessageBuilder WriteBool(bool value) { }
        public RabbitMQ.Client.Content.IStreamMessageBuilder WriteByte(byte value) { }
        public RabbitMQ.Client.Content.IStreamMessageBuilder WriteBytes(byte[] source, int offset, int count) { }
        public RabbitMQ.Client.Content.IStreamMessageBuilder WriteBytes(byte[] source) { }
        public RabbitMQ.Client.Content.IStreamMessageBuilder WriteChar(char value) { }
        public RabbitMQ.Client.Content.IStreamMessageBuilder WriteDouble(double value) { }
        public RabbitMQ.Client.Content.IStreamMessageBuilder WriteInt16(short value) { }
        public RabbitMQ.Client.Content.IStreamMessageBuilder WriteInt32(int value) { }
        public RabbitMQ.Client.Content.IStreamMessageBuilder WriteInt64(long value) { }
        public RabbitMQ.Client.Content.IStreamMessageBuilder WriteObject(object value) { }
        public RabbitMQ.Client.Content.IStreamMessageBuilder WriteObjects(params object[] values) { }
        public RabbitMQ.Client.Content.IStreamMessageBuilder WriteSingle(float value) { }
        public RabbitMQ.Client.Content.IStreamMessageBuilder WriteString(string value) { }
    }
    public class StreamMessageReader : RabbitMQ.Client.Content.BasicMessageReader, RabbitMQ.Client.Content.IMessageReader, RabbitMQ.Client.Content.IStreamMessageReader
    {
        public static readonly string MimeType;
        public StreamMessageReader(RabbitMQ.Client.IBasicProperties properties, byte[] payload) { }
        public bool ReadBool() { }
        public byte ReadByte() { }
        public byte[] ReadBytes() { }
        public char ReadChar() { }
        public double ReadDouble() { }
        public short ReadInt16() { }
        public int ReadInt32() { }
        public long ReadInt64() { }
        public object ReadObject() { }
        public object[] ReadObjects() { }
        public float ReadSingle() { }
        public string ReadString() { }
    }
    public class static StreamWireFormatting
    {
        public static bool ReadBool(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static byte ReadByte(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static byte[] ReadBytes(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static char ReadChar(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static double ReadDouble(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static short ReadInt16(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static int ReadInt32(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static long ReadInt64(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static object ReadNonnullObject(string target, RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static object ReadObject(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static float ReadSingle(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static string ReadString(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static string ReadUntypedString(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static void WriteBool(RabbitMQ.Util.NetworkBinaryWriter writer, bool value) { }
        public static void WriteByte(RabbitMQ.Util.NetworkBinaryWriter writer, byte value) { }
        public static void WriteBytes(RabbitMQ.Util.NetworkBinaryWriter writer, byte[] value, int offset, int length) { }
        public static void WriteBytes(RabbitMQ.Util.NetworkBinaryWriter writer, byte[] value) { }
        public static void WriteChar(RabbitMQ.Util.NetworkBinaryWriter writer, char value) { }
        public static void WriteDouble(RabbitMQ.Util.NetworkBinaryWriter writer, double value) { }
        public static void WriteInt16(RabbitMQ.Util.NetworkBinaryWriter writer, short value) { }
        public static void WriteInt32(RabbitMQ.Util.NetworkBinaryWriter writer, int value) { }
        public static void WriteInt64(RabbitMQ.Util.NetworkBinaryWriter writer, long value) { }
        public static void WriteObject(RabbitMQ.Util.NetworkBinaryWriter writer, object value) { }
        public static void WriteSingle(RabbitMQ.Util.NetworkBinaryWriter writer, float value) { }
        public static void WriteString(RabbitMQ.Util.NetworkBinaryWriter writer, string value) { }
        public static void WriteUntypedString(RabbitMQ.Util.NetworkBinaryWriter writer, string value) { }
    }
    public enum StreamWireFormattingTag
    {
        Bool = 1,
        Byte = 2,
        Bytes = 3,
        Int16 = 4,
        Char = 5,
        Int32 = 6,
        Int64 = 7,
        Single = 8,
        Double = 9,
        String = 10,
        Null = 11,
    }
}
namespace RabbitMQ.Client.Events
{
    public delegate System.Threading.Tasks.Task AsyncEventHandler<in TEvent>(object sender, TEvent @event);
    public class AsyncEventingBasicConsumer : RabbitMQ.Client.AsyncDefaultBasicConsumer
    {
        public AsyncEventingBasicConsumer(RabbitMQ.Client.IModel model) { }
        public event RabbitMQ.Client.Events.AsyncEventHandler<RabbitMQ.Client.Events.BasicDeliverEventArgs> Received;
        public event RabbitMQ.Client.Events.AsyncEventHandler<RabbitMQ.Client.Events.ConsumerEventArgs> Registered;
        public event RabbitMQ.Client.Events.AsyncEventHandler<RabbitMQ.Client.ShutdownEventArgs> Shutdown;
        public event RabbitMQ.Client.Events.AsyncEventHandler<RabbitMQ.Client.Events.ConsumerEventArgs> Unregistered;
        public override System.Threading.Tasks.Task HandleBasicCancelOk(string consumerTag) { }
        public override System.Threading.Tasks.Task HandleBasicConsumeOk(string consumerTag) { }
        public override System.Threading.Tasks.Task HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, RabbitMQ.Client.IBasicProperties properties, byte[] body) { }
        public override System.Threading.Tasks.Task HandleModelShutdown(object model, RabbitMQ.Client.ShutdownEventArgs reason) { }
    }
    public abstract class BaseExceptionEventArgs : System.EventArgs
    {
        public BaseExceptionEventArgs(System.Exception exception) { }
        public System.Collections.Generic.IDictionary<string, object> Detail { get; }
        public System.Exception Exception { get; }
        public System.Collections.Generic.IDictionary<string, object> UpdateDetails(System.Collections.Generic.IDictionary<string, object> other) { }
    }
    public class BasicAckEventArgs : System.EventArgs
    {
        public BasicAckEventArgs() { }
        public ulong DeliveryTag { get; set; }
        public bool Multiple { get; set; }
    }
    public class BasicDeliverEventArgs : System.EventArgs
    {
        public BasicDeliverEventArgs() { }
        public BasicDeliverEventArgs(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, RabbitMQ.Client.IBasicProperties properties, byte[] body) { }
        public RabbitMQ.Client.IBasicProperties BasicProperties { get; set; }
        public byte[] Body { get; set; }
        public string ConsumerTag { get; set; }
        public ulong DeliveryTag { get; set; }
        public string Exchange { get; set; }
        public bool Redelivered { get; set; }
        public string RoutingKey { get; set; }
    }
    public class BasicNackEventArgs : System.EventArgs
    {
        public BasicNackEventArgs() { }
        public ulong DeliveryTag { get; set; }
        public bool Multiple { get; set; }
        public bool Requeue { get; set; }
    }
    public class BasicReturnEventArgs : System.EventArgs
    {
        public BasicReturnEventArgs() { }
        public RabbitMQ.Client.IBasicProperties BasicProperties { get; set; }
        public byte[] Body { get; set; }
        public string Exchange { get; set; }
        public ushort ReplyCode { get; set; }
        public string ReplyText { get; set; }
        public string RoutingKey { get; set; }
    }
    public class CallbackExceptionEventArgs : RabbitMQ.Client.Events.BaseExceptionEventArgs
    {
        public CallbackExceptionEventArgs(System.Exception e) { }
        public static RabbitMQ.Client.Events.CallbackExceptionEventArgs Build(System.Exception e, string context) { }
        public static RabbitMQ.Client.Events.CallbackExceptionEventArgs Build(System.Exception e, System.Collections.Generic.IDictionary<string, object> details) { }
    }
    public class ConnectionBlockedEventArgs : System.EventArgs
    {
        public ConnectionBlockedEventArgs(string reason) { }
        public string Reason { get; }
    }
    public sealed class ConnectionRecoveryErrorEventArgs : System.EventArgs
    {
        public ConnectionRecoveryErrorEventArgs(System.Exception ex) { }
        public System.Exception Exception { get; }
    }
    public class ConsumerEventArgs : System.EventArgs
    {
        public ConsumerEventArgs(string[] consumerTags) { }
        public string[] ConsumerTags { get; }
    }
    public sealed class ConsumerTagChangedAfterRecoveryEventArgs : System.EventArgs
    {
        public ConsumerTagChangedAfterRecoveryEventArgs(string tagBefore, string tagAfter) { }
        public string TagAfter { get; }
        public string TagBefore { get; }
    }
    public class EventingBasicConsumer : RabbitMQ.Client.DefaultBasicConsumer
    {
        public EventingBasicConsumer(RabbitMQ.Client.IModel model) { }
        public event System.EventHandler<RabbitMQ.Client.Events.BasicDeliverEventArgs> Received;
        public event System.EventHandler<RabbitMQ.Client.Events.ConsumerEventArgs> Registered;
        public event System.EventHandler<RabbitMQ.Client.ShutdownEventArgs> Shutdown;
        public event System.EventHandler<RabbitMQ.Client.Events.ConsumerEventArgs> Unregistered;
        public override void HandleBasicCancelOk(string consumerTag) { }
        public override void HandleBasicConsumeOk(string consumerTag) { }
        public override void HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, RabbitMQ.Client.IBasicProperties properties, byte[] body) { }
        public override void HandleModelShutdown(object model, RabbitMQ.Client.ShutdownEventArgs reason) { }
    }
    public class FlowControlEventArgs : System.EventArgs
    {
        public FlowControlEventArgs(bool active) { }
        public bool Active { get; }
    }
    public sealed class QueueNameChangedAfterRecoveryEventArgs : System.EventArgs
    {
        public QueueNameChangedAfterRecoveryEventArgs(string nameBefore, string nameAfter) { }
        public string NameAfter { get; }
        public string NameBefore { get; }
    }
    public class RecoveryExceptionEventArgs : RabbitMQ.Client.Events.BaseExceptionEventArgs
    {
        public RecoveryExceptionEventArgs(System.Exception e) { }
    }
}
namespace RabbitMQ.Client.Exceptions
{
    public class AlreadyClosedException : RabbitMQ.Client.Exceptions.OperationInterruptedException
    {
        public AlreadyClosedException(RabbitMQ.Client.ShutdownEventArgs reason) { }
    }
    public class AuthenticationFailureException : RabbitMQ.Client.Exceptions.PossibleAuthenticationFailureException
    {
        public AuthenticationFailureException(string msg) { }
    }
    public class BrokerUnreachableException : System.IO.IOException
    {
        public BrokerUnreachableException(System.Exception Inner) { }
    }
    public class ChannelAllocationException : RabbitMQ.Client.ProtocolViolationException
    {
        public ChannelAllocationException() { }
        public ChannelAllocationException(int channel) { }
        public int Channel { get; }
    }
    public class ConnectFailureException : RabbitMQ.Client.ProtocolViolationException
    {
        public ConnectFailureException(string msg, System.Exception inner) { }
    }
    public class OperationInterruptedException : RabbitMQ.Client.Exceptions.RabbitMQClientException
    {
        public OperationInterruptedException(RabbitMQ.Client.ShutdownEventArgs reason) { }
        public OperationInterruptedException(RabbitMQ.Client.ShutdownEventArgs reason, string prefix) { }
        protected OperationInterruptedException() { }
        protected OperationInterruptedException(string message) { }
        protected OperationInterruptedException(string message, System.Exception inner) { }
        public RabbitMQ.Client.ShutdownEventArgs ShutdownReason { get; set; }
    }
    public class PacketNotRecognizedException : RabbitMQ.Client.Exceptions.RabbitMQClientException
    {
        public PacketNotRecognizedException(int transportHigh, int transportLow, int serverMajor, int serverMinor) { }
        public int ServerMajor { get; }
        public int ServerMinor { get; }
        public int TransportHigh { get; }
        public int TransportLow { get; }
    }
    public class PossibleAuthenticationFailureException : RabbitMQ.Client.Exceptions.RabbitMQClientException
    {
        public PossibleAuthenticationFailureException(string msg, System.Exception inner) { }
        public PossibleAuthenticationFailureException(string msg) { }
    }
    public class ProtocolVersionMismatchException : RabbitMQ.Client.ProtocolViolationException
    {
        public ProtocolVersionMismatchException(int clientMajor, int clientMinor, int serverMajor, int serverMinor) { }
        public int ClientMajor { get; }
        public int ClientMinor { get; }
        public int ServerMajor { get; }
        public int ServerMinor { get; }
    }
    public abstract class RabbitMQClientException : System.Exception
    {
        protected RabbitMQClientException() { }
        protected RabbitMQClientException(string message) { }
        protected RabbitMQClientException(string message, System.Exception innerException) { }
    }
    public class UnexpectedMethodException : RabbitMQ.Client.ProtocolViolationException
    {
        public UnexpectedMethodException(RabbitMQ.Client.IMethod method) { }
        public RabbitMQ.Client.IMethod Method { get; }
    }
    public class UnsupportedMethodException : System.NotSupportedException
    {
        public UnsupportedMethodException(string methodName) { }
        public string MethodName { get; }
    }
    public class UnsupportedMethodFieldException : System.NotSupportedException
    {
        public UnsupportedMethodFieldException(string methodName, string fieldName) { }
        public string FieldName { get; }
        public string MethodName { get; }
    }
    public class WireFormattingException : RabbitMQ.Client.ProtocolViolationException
    {
        public WireFormattingException(string message) { }
        public WireFormattingException(string message, object offender) { }
        public object Offender { get; }
    }
}
namespace RabbitMQ.Client.Framing
{
    public interface IBasicAck : RabbitMQ.Client.IMethod
    {
        ulong DeliveryTag { get; }
        bool Multiple { get; }
    }
    public interface IBasicCancel : RabbitMQ.Client.IMethod
    {
        string ConsumerTag { get; }
        bool Nowait { get; }
    }
    public interface IBasicCancelOk : RabbitMQ.Client.IMethod
    {
        string ConsumerTag { get; }
    }
    public interface IBasicConsume : RabbitMQ.Client.IMethod
    {
        System.Collections.Generic.IDictionary<string, object> Arguments { get; }
        string ConsumerTag { get; }
        bool Exclusive { get; }
        bool NoAck { get; }
        bool NoLocal { get; }
        bool Nowait { get; }
        string Queue { get; }
        ushort Reserved1 { get; }
    }
    public interface IBasicConsumeOk : RabbitMQ.Client.IMethod
    {
        string ConsumerTag { get; }
    }
    public interface IBasicDeliver : RabbitMQ.Client.IMethod
    {
        string ConsumerTag { get; }
        ulong DeliveryTag { get; }
        string Exchange { get; }
        bool Redelivered { get; }
        string RoutingKey { get; }
    }
    public interface IBasicGet : RabbitMQ.Client.IMethod
    {
        bool NoAck { get; }
        string Queue { get; }
        ushort Reserved1 { get; }
    }
    public interface IBasicGetEmpty : RabbitMQ.Client.IMethod
    {
        string Reserved1 { get; }
    }
    public interface IBasicGetOk : RabbitMQ.Client.IMethod
    {
        ulong DeliveryTag { get; }
        string Exchange { get; }
        uint MessageCount { get; }
        bool Redelivered { get; }
        string RoutingKey { get; }
    }
    public interface IBasicNack : RabbitMQ.Client.IMethod
    {
        ulong DeliveryTag { get; }
        bool Multiple { get; }
        bool Requeue { get; }
    }
    public interface IBasicPublish : RabbitMQ.Client.IMethod
    {
        string Exchange { get; }
        bool Immediate { get; }
        bool Mandatory { get; }
        ushort Reserved1 { get; }
        string RoutingKey { get; }
    }
    public interface IBasicQos : RabbitMQ.Client.IMethod
    {
        bool Global { get; }
        ushort PrefetchCount { get; }
        uint PrefetchSize { get; }
    }
    public interface IBasicQosOk : RabbitMQ.Client.IMethod { }
    public interface IBasicRecover : RabbitMQ.Client.IMethod
    {
        bool Requeue { get; }
    }
    public interface IBasicRecoverAsync : RabbitMQ.Client.IMethod
    {
        bool Requeue { get; }
    }
    public interface IBasicRecoverOk : RabbitMQ.Client.IMethod { }
    public interface IBasicReject : RabbitMQ.Client.IMethod
    {
        ulong DeliveryTag { get; }
        bool Requeue { get; }
    }
    public interface IBasicReturn : RabbitMQ.Client.IMethod
    {
        string Exchange { get; }
        ushort ReplyCode { get; }
        string ReplyText { get; }
        string RoutingKey { get; }
    }
    public interface IChannelClose : RabbitMQ.Client.IMethod
    {
        ushort ClassId { get; }
        ushort MethodId { get; }
        ushort ReplyCode { get; }
        string ReplyText { get; }
    }
    public interface IChannelCloseOk : RabbitMQ.Client.IMethod { }
    public interface IChannelFlow : RabbitMQ.Client.IMethod
    {
        bool Active { get; }
    }
    public interface IChannelFlowOk : RabbitMQ.Client.IMethod
    {
        bool Active { get; }
    }
    public interface IChannelOpen : RabbitMQ.Client.IMethod
    {
        string Reserved1 { get; }
    }
    public interface IChannelOpenOk : RabbitMQ.Client.IMethod
    {
        byte[] Reserved1 { get; }
    }
    public interface IConfirmSelect : RabbitMQ.Client.IMethod
    {
        bool Nowait { get; }
    }
    public interface IConfirmSelectOk : RabbitMQ.Client.IMethod { }
    public interface IConnectionBlocked : RabbitMQ.Client.IMethod
    {
        string Reason { get; }
    }
    public interface IConnectionClose : RabbitMQ.Client.IMethod
    {
        ushort ClassId { get; }
        ushort MethodId { get; }
        ushort ReplyCode { get; }
        string ReplyText { get; }
    }
    public interface IConnectionCloseOk : RabbitMQ.Client.IMethod { }
    public interface IConnectionOpen : RabbitMQ.Client.IMethod
    {
        string Reserved1 { get; }
        bool Reserved2 { get; }
        string VirtualHost { get; }
    }
    public interface IConnectionOpenOk : RabbitMQ.Client.IMethod
    {
        string Reserved1 { get; }
    }
    public interface IConnectionSecure : RabbitMQ.Client.IMethod
    {
        byte[] Challenge { get; }
    }
    public interface IConnectionSecureOk : RabbitMQ.Client.IMethod
    {
        byte[] Response { get; }
    }
    public interface IConnectionStart : RabbitMQ.Client.IMethod
    {
        byte[] Locales { get; }
        byte[] Mechanisms { get; }
        System.Collections.Generic.IDictionary<string, object> ServerProperties { get; }
        byte VersionMajor { get; }
        byte VersionMinor { get; }
    }
    public interface IConnectionStartOk : RabbitMQ.Client.IMethod
    {
        System.Collections.Generic.IDictionary<string, object> ClientProperties { get; }
        string Locale { get; }
        string Mechanism { get; }
        byte[] Response { get; }
    }
    public interface IConnectionTune : RabbitMQ.Client.IMethod
    {
        ushort ChannelMax { get; }
        uint FrameMax { get; }
        ushort Heartbeat { get; }
    }
    public interface IConnectionTuneOk : RabbitMQ.Client.IMethod
    {
        ushort ChannelMax { get; }
        uint FrameMax { get; }
        ushort Heartbeat { get; }
    }
    public interface IConnectionUnblocked : RabbitMQ.Client.IMethod { }
    public interface IConnectionUpdateSecret : RabbitMQ.Client.IMethod
    {
        byte[] NewSecret { get; }
        string Reason { get; }
    }
    public interface IConnectionUpdateSecretOk : RabbitMQ.Client.IMethod { }
    public interface IExchangeBind : RabbitMQ.Client.IMethod
    {
        System.Collections.Generic.IDictionary<string, object> Arguments { get; }
        string Destination { get; }
        bool Nowait { get; }
        ushort Reserved1 { get; }
        string RoutingKey { get; }
        string Source { get; }
    }
    public interface IExchangeBindOk : RabbitMQ.Client.IMethod { }
    public interface IExchangeDeclare : RabbitMQ.Client.IMethod
    {
        System.Collections.Generic.IDictionary<string, object> Arguments { get; }
        bool AutoDelete { get; }
        bool Durable { get; }
        string Exchange { get; }
        bool Internal { get; }
        bool Nowait { get; }
        bool Passive { get; }
        ushort Reserved1 { get; }
        string Type { get; }
    }
    public interface IExchangeDeclareOk : RabbitMQ.Client.IMethod { }
    public interface IExchangeDelete : RabbitMQ.Client.IMethod
    {
        string Exchange { get; }
        bool IfUnused { get; }
        bool Nowait { get; }
        ushort Reserved1 { get; }
    }
    public interface IExchangeDeleteOk : RabbitMQ.Client.IMethod { }
    public interface IExchangeUnbind : RabbitMQ.Client.IMethod
    {
        System.Collections.Generic.IDictionary<string, object> Arguments { get; }
        string Destination { get; }
        bool Nowait { get; }
        ushort Reserved1 { get; }
        string RoutingKey { get; }
        string Source { get; }
    }
    public interface IExchangeUnbindOk : RabbitMQ.Client.IMethod { }
    public interface IQueueBind : RabbitMQ.Client.IMethod
    {
        System.Collections.Generic.IDictionary<string, object> Arguments { get; }
        string Exchange { get; }
        bool Nowait { get; }
        string Queue { get; }
        ushort Reserved1 { get; }
        string RoutingKey { get; }
    }
    public interface IQueueBindOk : RabbitMQ.Client.IMethod { }
    public interface IQueueDeclare : RabbitMQ.Client.IMethod
    {
        System.Collections.Generic.IDictionary<string, object> Arguments { get; }
        bool AutoDelete { get; }
        bool Durable { get; }
        bool Exclusive { get; }
        bool Nowait { get; }
        bool Passive { get; }
        string Queue { get; }
        ushort Reserved1 { get; }
    }
    public interface IQueueDeclareOk : RabbitMQ.Client.IMethod
    {
        uint ConsumerCount { get; }
        uint MessageCount { get; }
        string Queue { get; }
    }
    public interface IQueueDelete : RabbitMQ.Client.IMethod
    {
        bool IfEmpty { get; }
        bool IfUnused { get; }
        bool Nowait { get; }
        string Queue { get; }
        ushort Reserved1 { get; }
    }
    public interface IQueueDeleteOk : RabbitMQ.Client.IMethod
    {
        uint MessageCount { get; }
    }
    public interface IQueuePurge : RabbitMQ.Client.IMethod
    {
        bool Nowait { get; }
        string Queue { get; }
        ushort Reserved1 { get; }
    }
    public interface IQueuePurgeOk : RabbitMQ.Client.IMethod
    {
        uint MessageCount { get; }
    }
    public interface IQueueUnbind : RabbitMQ.Client.IMethod
    {
        System.Collections.Generic.IDictionary<string, object> Arguments { get; }
        string Exchange { get; }
        string Queue { get; }
        ushort Reserved1 { get; }
        string RoutingKey { get; }
    }
    public interface IQueueUnbindOk : RabbitMQ.Client.IMethod { }
    public interface ITxCommit : RabbitMQ.Client.IMethod { }
    public interface ITxCommitOk : RabbitMQ.Client.IMethod { }
    public interface ITxRollback : RabbitMQ.Client.IMethod { }
    public interface ITxRollbackOk : RabbitMQ.Client.IMethod { }
    public interface ITxSelect : RabbitMQ.Client.IMethod { }
    public interface ITxSelectOk : RabbitMQ.Client.IMethod { }
}
namespace RabbitMQ.Client.Framing.Impl
{
    public enum ClassId
    {
        Connection = 10,
        Channel = 20,
        Exchange = 40,
        Queue = 50,
        Basic = 60,
        Tx = 90,
        Confirm = 85,
        Invalid = -1,
    }
    public class Connection : RabbitMQ.Client.IConnection, RabbitMQ.Client.NetworkConnection, System.IDisposable
    {
        public Connection(RabbitMQ.Client.IConnectionFactory factory, bool insist, RabbitMQ.Client.Impl.IFrameHandler frameHandler, string clientProvidedName = null) { }
        public ushort ChannelMax { get; }
        public System.Collections.Generic.IDictionary<string, object> ClientProperties { get; set; }
        public string ClientProvidedName { get; }
        public RabbitMQ.Client.ShutdownEventArgs CloseReason { get; }
        public RabbitMQ.Client.ConsumerWorkService ConsumerWorkService { get; }
        public RabbitMQ.Client.AmqpTcpEndpoint Endpoint { get; }
        public uint FrameMax { get; set; }
        public System.TimeSpan Heartbeat { get; set; }
        public System.Guid Id { get; }
        public bool IsOpen { get; }
        public RabbitMQ.Client.AmqpTcpEndpoint[] KnownHosts { get; set; }
        public System.Net.EndPoint LocalEndPoint { get; }
        public int LocalPort { get; }
        public RabbitMQ.Client.Framing.Impl.ProtocolBase Protocol { get; }
        public System.Net.EndPoint RemoteEndPoint { get; }
        public int RemotePort { get; }
        public System.Collections.Generic.IDictionary<string, object> ServerProperties { get; set; }
        public System.Collections.Generic.IList<RabbitMQ.Client.ShutdownReportEntry> ShutdownReport { get; }
        public event System.EventHandler<RabbitMQ.Client.Events.CallbackExceptionEventArgs> CallbackException;
        public event System.EventHandler<RabbitMQ.Client.Events.ConnectionBlockedEventArgs> ConnectionBlocked;
        public event System.EventHandler<RabbitMQ.Client.Events.ConnectionRecoveryErrorEventArgs> ConnectionRecoveryError;
        public event System.EventHandler<RabbitMQ.Client.ShutdownEventArgs> ConnectionShutdown;
        public event System.EventHandler<System.EventArgs> ConnectionUnblocked;
        public event System.EventHandler<System.EventArgs> RecoverySucceeded;
        public void Abort(ushort reasonCode, string reasonText, RabbitMQ.Client.ShutdownInitiator initiator, System.TimeSpan timeout) { }
        public void Abort() { }
        public void Abort(ushort reasonCode, string reasonText) { }
        public void Abort(System.TimeSpan timeout) { }
        public void Abort(ushort reasonCode, string reasonText, System.TimeSpan timeout) { }
        public void Close(RabbitMQ.Client.ShutdownEventArgs reason) { }
        public void Close(RabbitMQ.Client.ShutdownEventArgs reason, bool abort, System.TimeSpan timeout) { }
        public void Close() { }
        public void Close(ushort reasonCode, string reasonText) { }
        public void Close(System.TimeSpan timeout) { }
        public void Close(ushort reasonCode, string reasonText, System.TimeSpan timeout) { }
        public System.Threading.Tasks.Task ClosingLoop() { }
        public RabbitMQ.Client.Impl.Command ConnectionCloseWrapper(ushort reasonCode, string reasonText) { }
        public RabbitMQ.Client.IModel CreateModel() { }
        public RabbitMQ.Client.Impl.ISession CreateSession() { }
        public RabbitMQ.Client.Impl.ISession CreateSession(int channelNumber) { }
        public static System.Collections.Generic.IDictionary<string, object> DefaultClientProperties() { }
        public void EnsureIsOpen() { }
        public void FinishClose() { }
        public void HandleConnectionBlocked(string reason) { }
        public void HandleConnectionUnblocked() { }
        public void HandleDomainUnload(object sender, System.EventArgs ea) { }
        public void HandleMainLoopException(RabbitMQ.Client.ShutdownEventArgs reason) { }
        public bool HardProtocolExceptionHandler(RabbitMQ.Client.Impl.HardProtocolException hpe) { }
        public System.Threading.Tasks.ValueTask HeartbeatReadTimerCallback() { }
        public System.Threading.Tasks.ValueTask HeartbeatWriteTimerCallback() { }
        public void InternalClose(RabbitMQ.Client.ShutdownEventArgs reason) { }
        public void LogCloseError(string error, System.Exception ex) { }
        public System.Threading.Tasks.Task MainLoop() { }
        public System.Threading.Tasks.Task MainLoopIteration() { }
        public void MaybeStartHeartbeatTimers() { }
        public void NotifyHeartbeatListener() { }
        public void NotifyReceivedCloseOk() { }
        public void OnCallbackException(RabbitMQ.Client.Events.CallbackExceptionEventArgs args) { }
        public void OnConnectionBlocked(RabbitMQ.Client.Events.ConnectionBlockedEventArgs args) { }
        public void OnConnectionUnblocked() { }
        public void OnShutdown() { }
        public void Open(bool insist) { }
        public void PrettyPrintShutdownReport() { }
        public void QuiesceChannel(RabbitMQ.Client.Impl.SoftProtocolException pe) { }
        public bool SetCloseReason(RabbitMQ.Client.ShutdownEventArgs reason) { }
        public void StartMainLoop(bool useBackgroundThread) { }
        public void TerminateMainloop() { }
        public override string ToString() { }
        public void UpdateSecret(string newSecret, string reason) { }
        public void WriteFrame(RabbitMQ.Client.Impl.OutboundFrame f) { }
        public void WriteFrameSet(System.Collections.Generic.IList<RabbitMQ.Client.Impl.OutboundFrame> f) { }
    }
    public class static IProtocolExtensions
    {
        public static RabbitMQ.Client.Impl.IFrameHandler CreateFrameHandler(this RabbitMQ.Client.IProtocol protocol, RabbitMQ.Client.AmqpTcpEndpoint endpoint, System.Func<System.Net.Sockets.AddressFamily, RabbitMQ.Client.ITcpClient> socketFactory, System.TimeSpan connectionTimeout, System.TimeSpan readTimeout, System.TimeSpan writeTimeout) { }
    }
    public abstract class ProtocolBase : RabbitMQ.Client.IProtocol
    {
        public System.Collections.Generic.IDictionary<string, bool> Capabilities;
        public ProtocolBase() { }
        public abstract string ApiName { get; }
        public abstract int DefaultPort { get; }
        public abstract int MajorVersion { get; }
        public abstract int MinorVersion { get; }
        public abstract int Revision { get; }
        public RabbitMQ.Client.AmqpVersion Version { get; }
        public bool CanSendWhileClosed(RabbitMQ.Client.Impl.Command cmd) { }
        public void CreateChannelClose(ushort reasonCode, string reasonText, out RabbitMQ.Client.Impl.Command request, out ushort replyClassId, out ushort replyMethodId) { }
        public RabbitMQ.Client.IConnection CreateConnection(RabbitMQ.Client.IConnectionFactory factory, bool insist, RabbitMQ.Client.Impl.IFrameHandler frameHandler) { }
        public RabbitMQ.Client.IConnection CreateConnection(RabbitMQ.Client.IConnectionFactory factory, bool insist, RabbitMQ.Client.Impl.IFrameHandler frameHandler, string clientProvidedName) { }
        public RabbitMQ.Client.IConnection CreateConnection(RabbitMQ.Client.ConnectionFactory factory, RabbitMQ.Client.Impl.IFrameHandler frameHandler, bool automaticRecoveryEnabled) { }
        public RabbitMQ.Client.IConnection CreateConnection(RabbitMQ.Client.ConnectionFactory factory, RabbitMQ.Client.Impl.IFrameHandler frameHandler, bool automaticRecoveryEnabled, string clientProvidedName) { }
        public void CreateConnectionClose(ushort reasonCode, string reasonText, out RabbitMQ.Client.Impl.Command request, out ushort replyClassId, out ushort replyMethodId) { }
        public RabbitMQ.Client.IModel CreateModel(RabbitMQ.Client.Impl.ISession session) { }
        public RabbitMQ.Client.IModel CreateModel(RabbitMQ.Client.Impl.ISession session, RabbitMQ.Client.ConsumerWorkService workService) { }
        public abstract RabbitMQ.Client.Impl.ContentHeaderBase DecodeContentHeaderFrom(RabbitMQ.Util.NetworkBinaryReader reader);
        public abstract RabbitMQ.Client.Impl.MethodBase DecodeMethodFrom(RabbitMQ.Util.NetworkBinaryReader reader);
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
}
namespace RabbitMQ.Client.Impl
{
    public enum AssemblyState
    {
        ExpectingMethod = 0,
        ExpectingContentHeader = 1,
        ExpectingContentBody = 2,
        Complete = 3,
    }
    public class AsyncRpcContinuation : RabbitMQ.Client.Impl.IRpcContinuation
    {
        public AsyncRpcContinuation() { }
        public virtual System.Threading.Tasks.ValueTask<RabbitMQ.Client.Impl.Command> GetReplyAsync(System.Threading.CancellationToken cancellationToken = null) { }
        public virtual System.Threading.Tasks.ValueTask<RabbitMQ.Client.Impl.Command> GetReplyAsync(System.TimeSpan timeout) { }
        public void HandleCommand(RabbitMQ.Client.Impl.Command cmd) { }
        public void HandleModelShutdown(RabbitMQ.Client.ShutdownEventArgs reason) { }
    }
    public abstract class BasicProperties : RabbitMQ.Client.Impl.ContentHeaderBase, RabbitMQ.Client.IBasicProperties, RabbitMQ.Client.IContentHeader
    {
        protected BasicProperties() { }
        public abstract string AppId { get; set; }
        public abstract string ClusterId { get; set; }
        public abstract string ContentEncoding { get; set; }
        public abstract string ContentType { get; set; }
        public abstract string CorrelationId { get; set; }
        public abstract byte DeliveryMode { get; set; }
        public abstract string Expiration { get; set; }
        public abstract System.Collections.Generic.IDictionary<string, object> Headers { get; set; }
        public abstract string MessageId { get; set; }
        public bool Persistent { get; set; }
        public abstract byte Priority { get; set; }
        public abstract string ReplyTo { get; set; }
        public RabbitMQ.Client.PublicationAddress ReplyToAddress { get; set; }
        public abstract RabbitMQ.Client.AmqpTimestamp Timestamp { get; set; }
        public abstract string Type { get; set; }
        public abstract string UserId { get; set; }
        public abstract void ClearAppId();
        public abstract void ClearClusterId();
        public abstract void ClearContentEncoding();
        public abstract void ClearContentType();
        public abstract void ClearCorrelationId();
        public abstract void ClearDeliveryMode();
        public abstract void ClearExpiration();
        public abstract void ClearHeaders();
        public abstract void ClearMessageId();
        public abstract void ClearPriority();
        public abstract void ClearReplyTo();
        public abstract void ClearTimestamp();
        public abstract void ClearType();
        public abstract void ClearUserId();
        public override object Clone() { }
        public abstract bool IsAppIdPresent();
        public abstract bool IsClusterIdPresent();
        public abstract bool IsContentEncodingPresent();
        public abstract bool IsContentTypePresent();
        public abstract bool IsCorrelationIdPresent();
        public abstract bool IsDeliveryModePresent();
        public abstract bool IsExpirationPresent();
        public abstract bool IsHeadersPresent();
        public abstract bool IsMessageIdPresent();
        public abstract bool IsPriorityPresent();
        public abstract bool IsReplyToPresent();
        public abstract bool IsTimestampPresent();
        public abstract bool IsTypePresent();
        public abstract bool IsUserIdPresent();
    }
    public class BasicPublishBatch : RabbitMQ.Client.IBasicPublishBatch
    {
        public void Add(string exchange, string routingKey, bool mandatory, RabbitMQ.Client.IBasicProperties basicProperties, byte[] body) { }
        public void Publish() { }
    }
    public class BodySegmentOutboundFrame : RabbitMQ.Client.Impl.OutboundFrame
    {
        public BodySegmentOutboundFrame(int channel, byte[] body, int offset, int count) { }
        public override void WritePayload(RabbitMQ.Util.PipelineBinaryWriter writer) { }
    }
    public class ChannelErrorException : RabbitMQ.Client.Impl.HardProtocolException
    {
        public ChannelErrorException(int channel) { }
        public int Channel { get; }
        public override ushort ReplyCode { get; }
    }
    public class Command
    {
        public Command(RabbitMQ.Client.Impl.MethodBase method) { }
        public Command(RabbitMQ.Client.Impl.MethodBase method, RabbitMQ.Client.Impl.ContentHeaderBase header, byte[] body) { }
        public byte[] Body { get; }
        public RabbitMQ.Client.Impl.ContentHeaderBase Header { get; }
        public RabbitMQ.Client.Impl.MethodBase Method { get; }
        public static System.Collections.Generic.List<RabbitMQ.Client.Impl.OutboundFrame> CalculateFrames(int channelNumber, RabbitMQ.Client.Framing.Impl.Connection connection, System.Collections.Generic.IList<RabbitMQ.Client.Impl.Command> commands) { }
        public static void CheckEmptyFrameSize() { }
        public void Transmit(int channelNumber, RabbitMQ.Client.Framing.Impl.Connection connection) { }
        public void TransmitAsFrameSet(int channelNumber, RabbitMQ.Client.Framing.Impl.Connection connection) { }
        public void TransmitAsSingleFrame(int channelNumber, RabbitMQ.Client.Framing.Impl.Connection connection) { }
    }
    public class CommandAssembler
    {
        public byte[] m_body;
        public System.IO.MemoryStream m_bodyStream;
        public RabbitMQ.Client.Impl.ContentHeaderBase m_header;
        public RabbitMQ.Client.Impl.MethodBase m_method;
        public RabbitMQ.Client.Framing.Impl.ProtocolBase m_protocol;
        public int m_remainingBodyBytes;
        public RabbitMQ.Client.Impl.AssemblyState m_state;
        public CommandAssembler(RabbitMQ.Client.Framing.Impl.ProtocolBase protocol) { }
        public RabbitMQ.Client.Impl.Command HandleFrame(RabbitMQ.Client.Impl.InboundFrame f) { }
    }
    public class ConnectionSecureOrTune
    {
        public byte[] m_challenge;
        public RabbitMQ.Client.Impl.ConnectionTuneDetails m_tuneDetails;
        public ConnectionSecureOrTune() { }
    }
    public class ConnectionStartDetails
    {
        public byte[] m_locales;
        public byte[] m_mechanisms;
        public System.Collections.Generic.IDictionary<string, object> m_serverProperties;
        public byte m_versionMajor;
        public byte m_versionMinor;
        public ConnectionStartDetails() { }
    }
    public struct ConnectionTuneDetails
    {
        public ushort m_channelMax;
        public uint m_frameMax;
        public ushort m_heartbeatInSeconds;
    }
    public abstract class ContentHeaderBase : RabbitMQ.Client.IContentHeader
    {
        protected ContentHeaderBase() { }
        public abstract ushort ProtocolClassId { get; }
        public abstract string ProtocolClassName { get; }
        public abstract void AppendPropertyDebugStringTo(System.Text.StringBuilder stringBuilder);
        public virtual object Clone() { }
        public ulong ReadFrom(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public abstract void ReadPropertiesFrom(RabbitMQ.Client.Impl.ContentHeaderPropertyReader reader);
        public abstract void WritePropertiesTo(RabbitMQ.Client.Impl.ContentHeaderPropertyWriter writer);
        public void WriteTo(RabbitMQ.Util.NetworkBinaryWriter writer, ulong bodySize) { }
    }
    public class ContentHeaderPropertyReader
    {
        protected ushort m_bitCount;
        protected ushort m_flagWord;
        public ContentHeaderPropertyReader(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public RabbitMQ.Util.NetworkBinaryReader BaseReader { get; }
        public bool ContinuationBitSet { get; }
        public void FinishPresence() { }
        public bool ReadBit() { }
        public void ReadFlagWord() { }
        public uint ReadLong() { }
        public ulong ReadLonglong() { }
        public byte[] ReadLongstr() { }
        public byte ReadOctet() { }
        public bool ReadPresence() { }
        public ushort ReadShort() { }
        public string ReadShortstr() { }
        public System.Collections.Generic.IDictionary<string, object> ReadTable() { }
        public RabbitMQ.Client.AmqpTimestamp ReadTimestamp() { }
    }
    public class ContentHeaderPropertyWriter
    {
        protected int m_bitCount;
        protected ushort m_flagWord;
        public ContentHeaderPropertyWriter(RabbitMQ.Util.NetworkBinaryWriter writer) { }
        public RabbitMQ.Util.NetworkBinaryWriter BaseWriter { get; }
        public void FinishPresence() { }
        public void WriteBit(bool bit) { }
        public void WriteLong(uint val) { }
        public void WriteLonglong(ulong val) { }
        public void WriteLongstr(byte[] val) { }
        public void WriteOctet(byte val) { }
        public void WritePresence(bool present) { }
        public void WriteShort(ushort val) { }
        public void WriteShortstr(string val) { }
        public void WriteTable(System.Collections.Generic.IDictionary<string, object> val) { }
        public void WriteTimestamp(RabbitMQ.Client.AmqpTimestamp val) { }
    }
    public class EmptyOutboundFrame : RabbitMQ.Client.Impl.OutboundFrame
    {
        public EmptyOutboundFrame() { }
        public override void WritePayload(RabbitMQ.Util.PipelineBinaryWriter writer) { }
    }
    public class static ExtensionMethods
    {
        public static T RandomItem<T>(this System.Collections.Generic.IList<T> list) { }
    }
    public class Frame : System.IDisposable
    {
        public Frame(RabbitMQ.Client.Impl.FrameType type, int channel) { }
        public Frame(RabbitMQ.Client.Impl.FrameType type, int channel, byte[] payload, int payloadSize) { }
        public int Channel { get; }
        public byte[] Payload { get; }
        public int PayloadSize { get; }
        public RabbitMQ.Client.Impl.FrameType Type { get; }
        public void Dispose() { }
        public bool IsBody() { }
        public bool IsHeader() { }
        public bool IsHeartbeat() { }
        public bool IsMethod() { }
        public override string ToString() { }
    }
    public enum FrameType
    {
        FrameMethod = 1,
        FrameHeader = 2,
        FrameBody = 3,
        FrameHeartbeat = 8,
        FrameEnd = 206,
        FrameMinSize = 4096,
    }
    public abstract class HardProtocolException : RabbitMQ.Client.Impl.ProtocolException
    {
        protected HardProtocolException(string message) { }
    }
    public class HeaderOutboundFrame : RabbitMQ.Client.Impl.OutboundFrame
    {
        public HeaderOutboundFrame(int channel, RabbitMQ.Client.Impl.ContentHeaderBase header, int bodyLength) { }
        public override void WritePayload(RabbitMQ.Util.PipelineBinaryWriter writer) { }
    }
    public interface IConsumerDispatcher
    {
        bool IsShutdown { get; }
        void HandleBasicCancel(RabbitMQ.Client.IBasicConsumer consumer, string consumerTag);
        void HandleBasicCancelOk(RabbitMQ.Client.IBasicConsumer consumer, string consumerTag);
        void HandleBasicConsumeOk(RabbitMQ.Client.IBasicConsumer consumer, string consumerTag);
        void HandleBasicDeliver(RabbitMQ.Client.IBasicConsumer consumer, string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, RabbitMQ.Client.IBasicProperties basicProperties, byte[] body);
        void HandleModelShutdown(RabbitMQ.Client.IBasicConsumer consumer, RabbitMQ.Client.ShutdownEventArgs reason);
        void Quiesce();
        void Shutdown();
        void Shutdown(RabbitMQ.Client.IModel model);
    }
    public interface IFrameHandler
    {
        RabbitMQ.Client.AmqpTcpEndpoint Endpoint { get; }
        System.Net.EndPoint LocalEndPoint { get; }
        int LocalPort { get; }
        System.TimeSpan ReadTimeout { set; }
        System.Net.EndPoint RemoteEndPoint { get; }
        int RemotePort { get; }
        System.TimeSpan WriteTimeout { set; }
        void Close();
        System.Threading.Tasks.ValueTask<RabbitMQ.Client.Impl.InboundFrame> ReadFrameAsync();
        void SendHeader();
        void WriteFrame(RabbitMQ.Client.Impl.OutboundFrame frame);
        void WriteFrameSet(System.Collections.Generic.IList<RabbitMQ.Client.Impl.OutboundFrame> frames);
    }
    public interface IFullModel : RabbitMQ.Client.IModel, System.IDisposable
    {
        void ConnectionTuneOk(ushort channelMax, uint frameMax, ushort heartbeat);
        void HandleBasicAck(ulong deliveryTag, bool multiple);
        void HandleBasicCancel(string consumerTag, bool nowait);
        void HandleBasicCancelOk(string consumerTag);
        void HandleBasicConsumeOk(string consumerTag);
        void HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, [RabbitMQ.Client.Apigen.Attributes.AmqpContentHeaderMappingAttribute()] RabbitMQ.Client.IBasicProperties basicProperties, [RabbitMQ.Client.Apigen.Attributes.AmqpContentBodyMappingAttribute()] byte[] body);
        void HandleBasicGetEmpty();
        void HandleBasicGetOk(ulong deliveryTag, bool redelivered, string exchange, string routingKey, uint messageCount, [RabbitMQ.Client.Apigen.Attributes.AmqpContentHeaderMappingAttribute()] RabbitMQ.Client.IBasicProperties basicProperties, [RabbitMQ.Client.Apigen.Attributes.AmqpContentBodyMappingAttribute()] byte[] body);
        void HandleBasicNack(ulong deliveryTag, bool multiple, bool requeue);
        void HandleBasicRecoverOk();
        void HandleBasicReturn(ushort replyCode, string replyText, string exchange, string routingKey, [RabbitMQ.Client.Apigen.Attributes.AmqpContentHeaderMappingAttribute()] RabbitMQ.Client.IBasicProperties basicProperties, [RabbitMQ.Client.Apigen.Attributes.AmqpContentBodyMappingAttribute()] byte[] body);
        void HandleChannelClose(ushort replyCode, string replyText, ushort classId, ushort methodId);
        void HandleChannelCloseOk();
        void HandleChannelFlow(bool active);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodMappingAttribute(null, "connection", "blocked")]
        void HandleConnectionBlocked(string reason);
        void HandleConnectionClose(ushort replyCode, string replyText, ushort classId, ushort methodId);
        void HandleConnectionOpenOk([RabbitMQ.Client.Apigen.Attributes.AmqpFieldMappingAttribute("RabbitMQ.Client.Framing", "reserved1")] string knownHosts);
        void HandleConnectionSecure(byte[] challenge);
        void HandleConnectionStart(byte versionMajor, byte versionMinor, System.Collections.Generic.IDictionary<string, object> serverProperties, byte[] mechanisms, byte[] locales);
        void HandleConnectionTune(ushort channelMax, uint frameMax, ushort heartbeat);
        void HandleConnectionUnblocked();
        void HandleQueueDeclareOk(string queue, uint messageCount, uint consumerCount);
        [RabbitMQ.Client.Apigen.Attributes.AmqpForceOneWayAttribute()]
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodMappingAttribute(null, "basic", "cancel")]
        void _Private_BasicCancel(string consumerTag, bool nowait);
        [RabbitMQ.Client.Apigen.Attributes.AmqpForceOneWayAttribute()]
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodMappingAttribute(null, "basic", "consume")]
        void _Private_BasicConsume(string queue, string consumerTag, bool noLocal, [RabbitMQ.Client.Apigen.Attributes.AmqpFieldMappingAttribute(null, "noAck")] bool autoAck, bool exclusive, bool nowait, System.Collections.Generic.IDictionary<string, object> arguments);
        [RabbitMQ.Client.Apigen.Attributes.AmqpForceOneWayAttribute()]
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodMappingAttribute(null, "basic", "get")]
        void _Private_BasicGet(string queue, [RabbitMQ.Client.Apigen.Attributes.AmqpFieldMappingAttribute(null, "noAck")] bool autoAck);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodMappingAttribute(null, "basic", "publish")]
        void _Private_BasicPublish(string exchange, string routingKey, bool mandatory, [RabbitMQ.Client.Apigen.Attributes.AmqpContentHeaderMappingAttribute()] RabbitMQ.Client.IBasicProperties basicProperties, [RabbitMQ.Client.Apigen.Attributes.AmqpContentBodyMappingAttribute()] byte[] body);
        [RabbitMQ.Client.Apigen.Attributes.AmqpForceOneWayAttribute()]
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodMappingAttribute(null, "basic", "recover")]
        void _Private_BasicRecover(bool requeue);
        [RabbitMQ.Client.Apigen.Attributes.AmqpForceOneWayAttribute()]
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodMappingAttribute(null, "channel", "close")]
        void _Private_ChannelClose(ushort replyCode, string replyText, ushort classId, ushort methodId);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodMappingAttribute(null, "channel", "close-ok")]
        void _Private_ChannelCloseOk();
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodMappingAttribute(null, "channel", "flow-ok")]
        void _Private_ChannelFlowOk(bool active);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodMappingAttribute(null, "channel", "open")]
        void _Private_ChannelOpen([RabbitMQ.Client.Apigen.Attributes.AmqpFieldMappingAttribute("RabbitMQ.Client.Framing", "reserved1")] string outOfBand);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodMappingAttribute(null, "confirm", "select")]
        void _Private_ConfirmSelect([RabbitMQ.Client.Apigen.Attributes.AmqpNowaitArgumentAttribute(null)] bool nowait);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodMappingAttribute(null, "connection", "close")]
        void _Private_ConnectionClose(ushort replyCode, string replyText, ushort classId, ushort methodId);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodMappingAttribute(null, "connection", "close-ok")]
        void _Private_ConnectionCloseOk();
        [RabbitMQ.Client.Apigen.Attributes.AmqpForceOneWayAttribute()]
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodMappingAttribute(null, "connection", "open")]
        void _Private_ConnectionOpen(string virtualHost, [RabbitMQ.Client.Apigen.Attributes.AmqpFieldMappingAttribute("RabbitMQ.Client.Framing", "reserved1")] string capabilities, [RabbitMQ.Client.Apigen.Attributes.AmqpFieldMappingAttribute("RabbitMQ.Client.Framing", "reserved2")] bool insist);
        [RabbitMQ.Client.Apigen.Attributes.AmqpForceOneWayAttribute()]
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodMappingAttribute(null, "connection", "secure-ok")]
        void _Private_ConnectionSecureOk(byte[] response);
        [RabbitMQ.Client.Apigen.Attributes.AmqpForceOneWayAttribute()]
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodMappingAttribute(null, "connection", "start-ok")]
        void _Private_ConnectionStartOk(System.Collections.Generic.IDictionary<string, object> clientProperties, string mechanism, byte[] response, string locale);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodMappingAttribute(null, "exchange", "bind")]
        void _Private_ExchangeBind(string destination, string source, string routingKey, [RabbitMQ.Client.Apigen.Attributes.AmqpNowaitArgumentAttribute(null)] bool nowait, System.Collections.Generic.IDictionary<string, object> arguments);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodMappingAttribute(null, "exchange", "declare")]
        void _Private_ExchangeDeclare(string exchange, string type, bool passive, bool durable, bool autoDelete, bool @internal, [RabbitMQ.Client.Apigen.Attributes.AmqpNowaitArgumentAttribute(null)] bool nowait, System.Collections.Generic.IDictionary<string, object> arguments);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodMappingAttribute(null, "exchange", "delete")]
        void _Private_ExchangeDelete(string exchange, bool ifUnused, [RabbitMQ.Client.Apigen.Attributes.AmqpNowaitArgumentAttribute(null)] bool nowait);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodMappingAttribute(null, "exchange", "unbind")]
        void _Private_ExchangeUnbind(string destination, string source, string routingKey, [RabbitMQ.Client.Apigen.Attributes.AmqpNowaitArgumentAttribute(null)] bool nowait, System.Collections.Generic.IDictionary<string, object> arguments);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodMappingAttribute(null, "queue", "bind")]
        void _Private_QueueBind(string queue, string exchange, string routingKey, [RabbitMQ.Client.Apigen.Attributes.AmqpNowaitArgumentAttribute(null)] bool nowait, System.Collections.Generic.IDictionary<string, object> arguments);
        [RabbitMQ.Client.Apigen.Attributes.AmqpForceOneWayAttribute()]
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodMappingAttribute(null, "queue", "declare")]
        void _Private_QueueDeclare(string queue, bool passive, bool durable, bool exclusive, bool autoDelete, [RabbitMQ.Client.Apigen.Attributes.AmqpNowaitArgumentAttribute(null)] bool nowait, System.Collections.Generic.IDictionary<string, object> arguments);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodMappingAttribute(null, "queue", "delete")]
        [return: RabbitMQ.Client.Apigen.Attributes.AmqpFieldMappingAttribute(null, "messageCount")]
        uint _Private_QueueDelete(string queue, bool ifUnused, bool ifEmpty, [RabbitMQ.Client.Apigen.Attributes.AmqpNowaitArgumentAttribute(null, "0xFFFFFFFF")] bool nowait);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodMappingAttribute(null, "queue", "purge")]
        [return: RabbitMQ.Client.Apigen.Attributes.AmqpFieldMappingAttribute(null, "messageCount")]
        uint _Private_QueuePurge(string queue, [RabbitMQ.Client.Apigen.Attributes.AmqpNowaitArgumentAttribute(null, "0xFFFFFFFF")] bool nowait);
        [RabbitMQ.Client.Apigen.Attributes.AmqpMethodMappingAttribute(null, "connection", "update-secret")]
        void _Private_UpdateSecret(byte[] newSecret, string reason);
    }
    public interface IRpcContinuation
    {
        void HandleCommand(RabbitMQ.Client.Impl.Command cmd);
        void HandleModelShutdown(RabbitMQ.Client.ShutdownEventArgs reason);
    }
    public interface ISession
    {
        int ChannelNumber { get; }
        RabbitMQ.Client.ShutdownEventArgs CloseReason { get; }
        System.Action<RabbitMQ.Client.Impl.ISession, RabbitMQ.Client.Impl.Command> CommandReceived { get; set; }
        RabbitMQ.Client.IConnection Connection { get; }
        bool IsOpen { get; }
        public event System.EventHandler<RabbitMQ.Client.ShutdownEventArgs> SessionShutdown;
        void Close(RabbitMQ.Client.ShutdownEventArgs reason);
        void Close(RabbitMQ.Client.ShutdownEventArgs reason, bool notify);
        void HandleFrame(RabbitMQ.Client.Impl.InboundFrame frame);
        void Notify();
        void Transmit(RabbitMQ.Client.Impl.Command cmd);
        void Transmit(System.Collections.Generic.IList<RabbitMQ.Client.Impl.Command> cmd);
    }
    public class InboundFrame : RabbitMQ.Client.Impl.Frame
    {
        public RabbitMQ.Util.NetworkBinaryReader GetReader() { }
        public static System.Threading.Tasks.ValueTask<RabbitMQ.Client.Impl.InboundFrame> ReadFromAsync(RabbitMQ.Util.PipelineBinaryReader reader, System.Threading.CancellationToken cancellationToken = null) { }
    }
    public class MainSession : RabbitMQ.Client.Impl.Session
    {
        public MainSession(RabbitMQ.Client.Framing.Impl.Connection connection) { }
        public System.Action Handler { get; set; }
        public override void HandleFrame(RabbitMQ.Client.Impl.InboundFrame frame) { }
        public void SetSessionClosing(bool closeServerInitiated) { }
        public override void Transmit(RabbitMQ.Client.Impl.Command cmd) { }
    }
    public class MalformedFrameException : RabbitMQ.Client.Impl.HardProtocolException
    {
        public MalformedFrameException(string message) { }
        public override ushort ReplyCode { get; }
    }
    public class MethodArgumentReader
    {
        public MethodArgumentReader(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public RabbitMQ.Util.NetworkBinaryReader BaseReader { get; }
        public bool ReadBit() { }
        public byte[] ReadContent() { }
        public uint ReadLong() { }
        public ulong ReadLonglong() { }
        public byte[] ReadLongstr() { }
        public byte ReadOctet() { }
        public ushort ReadShort() { }
        public string ReadShortstr() { }
        public System.Collections.Generic.IDictionary<string, object> ReadTable() { }
        public RabbitMQ.Client.AmqpTimestamp ReadTimestamp() { }
    }
    public class MethodArgumentWriter
    {
        public MethodArgumentWriter(RabbitMQ.Util.NetworkBinaryWriter writer) { }
        public RabbitMQ.Util.NetworkBinaryWriter BaseWriter { get; }
        public void Flush() { }
        public void WriteBit(bool val) { }
        public void WriteContent(byte[] val) { }
        public void WriteLong(uint val) { }
        public void WriteLonglong(ulong val) { }
        public void WriteLongstr(byte[] val) { }
        public void WriteOctet(byte val) { }
        public void WriteShort(ushort val) { }
        public void WriteShortstr(string val) { }
        public void WriteTable(System.Collections.IDictionary val) { }
        public void WriteTable(System.Collections.Generic.IDictionary<string, object> val) { }
        public void WriteTimestamp(RabbitMQ.Client.AmqpTimestamp val) { }
    }
    public abstract class MethodBase : RabbitMQ.Client.IMethod
    {
        protected MethodBase() { }
        public abstract bool HasContent { get; }
        public abstract ushort ProtocolClassId { get; }
        public abstract ushort ProtocolMethodId { get; }
        public abstract string ProtocolMethodName { get; }
        public abstract void AppendArgumentDebugStringTo(System.Text.StringBuilder stringBuilder);
        public abstract void ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader reader);
        public abstract void WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter writer);
    }
    public class MethodOutboundFrame : RabbitMQ.Client.Impl.OutboundFrame
    {
        public MethodOutboundFrame(int channel, RabbitMQ.Client.Impl.MethodBase method) { }
        public override void WritePayload(RabbitMQ.Util.PipelineBinaryWriter writer) { }
    }
    public abstract class ModelBase : RabbitMQ.Client.IModel, RabbitMQ.Client.IRecoverable, RabbitMQ.Client.Impl.IFullModel, System.IDisposable
    {
        public System.Threading.Tasks.TaskCompletionSource<RabbitMQ.Client.Impl.ConnectionStartDetails> m_connectionStartCell;
        public readonly System.Collections.Generic.IDictionary<string, RabbitMQ.Client.IBasicConsumer> m_consumers;
        public ModelBase(RabbitMQ.Client.Impl.ISession session) { }
        public ModelBase(RabbitMQ.Client.Impl.ISession session, RabbitMQ.Client.ConsumerWorkService workService) { }
        public int ChannelNumber { get; }
        public RabbitMQ.Client.ShutdownEventArgs CloseReason { get; }
        public RabbitMQ.Client.Impl.IConsumerDispatcher ConsumerDispatcher { get; }
        public System.TimeSpan ContinuationTimeout { get; set; }
        public RabbitMQ.Client.IBasicConsumer DefaultConsumer { get; set; }
        public System.TimeSpan HandshakeContinuationTimeout { get; set; }
        public bool IsClosed { get; }
        public bool IsOpen { get; }
        public ulong NextPublishSeqNo { get; }
        public RabbitMQ.Client.Impl.ISession Session { get; }
        public event System.EventHandler<RabbitMQ.Client.Events.BasicAckEventArgs> BasicAcks;
        public event System.EventHandler<RabbitMQ.Client.Events.BasicNackEventArgs> BasicNacks;
        public event System.EventHandler<System.EventArgs> BasicRecoverOk;
        public event System.EventHandler<RabbitMQ.Client.Events.BasicReturnEventArgs> BasicReturn;
        public event System.EventHandler<RabbitMQ.Client.Events.CallbackExceptionEventArgs> CallbackException;
        public event System.EventHandler<RabbitMQ.Client.Events.FlowControlEventArgs> FlowControl;
        public event System.EventHandler<RabbitMQ.Client.ShutdownEventArgs> ModelShutdown;
        public event System.EventHandler<System.EventArgs> Recovery;
        public void Abort() { }
        public void Abort(ushort replyCode, string replyText) { }
        public abstract void BasicAck(ulong deliveryTag, bool multiple);
        public void BasicCancel(string consumerTag) { }
        public string BasicConsume(string queue, bool autoAck, string consumerTag, bool noLocal, bool exclusive, System.Collections.Generic.IDictionary<string, object> arguments, RabbitMQ.Client.IBasicConsumer consumer) { }
        public RabbitMQ.Client.BasicGetResult BasicGet(string queue, bool autoAck) { }
        public abstract void BasicNack(ulong deliveryTag, bool multiple, bool requeue);
        public void BasicPublish(string exchange, string routingKey, bool mandatory, RabbitMQ.Client.IBasicProperties basicProperties, byte[] body) { }
        public abstract void BasicQos(uint prefetchSize, ushort prefetchCount, bool global);
        public void BasicRecover(bool requeue) { }
        public abstract void BasicRecoverAsync(bool requeue);
        public abstract void BasicReject(ulong deliveryTag, bool requeue);
        protected void BroadcastShutdownToConsumers(System.Collections.Generic.IDictionary<string, RabbitMQ.Client.IBasicConsumer> cs, RabbitMQ.Client.ShutdownEventArgs reason) { }
        public System.Threading.Tasks.Task CleanupUnconfirmedTagsAsync() { }
        public void Close(ushort replyCode, string replyText, bool abort) { }
        public void Close(RabbitMQ.Client.ShutdownEventArgs reason, bool abort) { }
        public void Close() { }
        public void Close(ushort replyCode, string replyText) { }
        public void ConfirmSelect() { }
        public string ConnectionOpen(string virtualHost, string capabilities, bool insist) { }
        public RabbitMQ.Client.Impl.ConnectionSecureOrTune ConnectionSecureOk(byte[] response) { }
        public RabbitMQ.Client.Impl.ConnectionSecureOrTune ConnectionStartOk(System.Collections.Generic.IDictionary<string, object> clientProperties, string mechanism, byte[] response, string locale) { }
        public abstract void ConnectionTuneOk(ushort channelMax, uint frameMax, ushort heartbeat);
        public uint ConsumerCount(string queue) { }
        public abstract RabbitMQ.Client.IBasicProperties CreateBasicProperties();
        public RabbitMQ.Client.IBasicPublishBatch CreateBasicPublishBatch() { }
        public abstract bool DispatchAsynchronous(RabbitMQ.Client.Impl.Command cmd);
        protected virtual void Dispose(bool disposing) { }
        public void Enqueue(RabbitMQ.Client.Impl.IRpcContinuation k) { }
        public void ExchangeBind(string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments) { }
        public void ExchangeBindNoWait(string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments) { }
        public void ExchangeDeclare(string exchange, string type, bool durable, bool autoDelete, System.Collections.Generic.IDictionary<string, object> arguments) { }
        public void ExchangeDeclareNoWait(string exchange, string type, bool durable, bool autoDelete, System.Collections.Generic.IDictionary<string, object> arguments) { }
        public void ExchangeDeclarePassive(string exchange) { }
        public void ExchangeDelete(string exchange, bool ifUnused) { }
        public void ExchangeDeleteNoWait(string exchange, bool ifUnused) { }
        public void ExchangeUnbind(string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments) { }
        public void ExchangeUnbindNoWait(string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments) { }
        public void FinishClose() { }
        public void HandleBasicAck(ulong deliveryTag, bool multiple) { }
        public void HandleBasicCancel(string consumerTag, bool nowait) { }
        public void HandleBasicCancelOk(string consumerTag) { }
        public void HandleBasicConsumeOk(string consumerTag) { }
        public virtual void HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, RabbitMQ.Client.IBasicProperties basicProperties, byte[] body) { }
        public void HandleBasicGetEmpty() { }
        public virtual void HandleBasicGetOk(ulong deliveryTag, bool redelivered, string exchange, string routingKey, uint messageCount, RabbitMQ.Client.IBasicProperties basicProperties, byte[] body) { }
        public void HandleBasicNack(ulong deliveryTag, bool multiple, bool requeue) { }
        public void HandleBasicRecoverOk() { }
        public void HandleBasicReturn(ushort replyCode, string replyText, string exchange, string routingKey, RabbitMQ.Client.IBasicProperties basicProperties, byte[] body) { }
        public void HandleChannelClose(ushort replyCode, string replyText, ushort classId, ushort methodId) { }
        public void HandleChannelCloseOk() { }
        public void HandleChannelFlow(bool active) { }
        public void HandleCommand(RabbitMQ.Client.Impl.ISession session, RabbitMQ.Client.Impl.Command cmd) { }
        public void HandleConnectionBlocked(string reason) { }
        public void HandleConnectionClose(ushort replyCode, string replyText, ushort classId, ushort methodId) { }
        public void HandleConnectionOpenOk(string knownHosts) { }
        public void HandleConnectionSecure(byte[] challenge) { }
        public void HandleConnectionStart(byte versionMajor, byte versionMinor, System.Collections.Generic.IDictionary<string, object> serverProperties, byte[] mechanisms, byte[] locales) { }
        public void HandleConnectionTune(ushort channelMax, uint frameMax, ushort heartbeatInSeconds) { }
        public void HandleConnectionUnblocked() { }
        public void HandleQueueDeclareOk(string queue, uint messageCount, uint consumerCount) { }
        protected void Initialise(RabbitMQ.Client.Impl.ISession session) { }
        public uint MessageCount(string queue) { }
        public RabbitMQ.Client.Impl.MethodBase ModelRpc(RabbitMQ.Client.Impl.MethodBase method, RabbitMQ.Client.Impl.ContentHeaderBase header, byte[] body) { }
        public System.Threading.Tasks.ValueTask<RabbitMQ.Client.Impl.MethodBase> ModelRpcAsync(RabbitMQ.Client.Impl.MethodBase method, RabbitMQ.Client.Impl.ContentHeaderBase header, byte[] body) { }
        public void ModelSend(RabbitMQ.Client.Impl.MethodBase method, RabbitMQ.Client.Impl.ContentHeaderBase header, byte[] body) { }
        public virtual void OnBasicAck(RabbitMQ.Client.Events.BasicAckEventArgs args) { }
        public virtual void OnBasicNack(RabbitMQ.Client.Events.BasicNackEventArgs args) { }
        public virtual void OnBasicRecoverOk(System.EventArgs args) { }
        public virtual void OnBasicReturn(RabbitMQ.Client.Events.BasicReturnEventArgs args) { }
        public virtual void OnCallbackException(RabbitMQ.Client.Events.CallbackExceptionEventArgs args) { }
        public virtual void OnFlowControl(RabbitMQ.Client.Events.FlowControlEventArgs args) { }
        public virtual void OnModelShutdown(RabbitMQ.Client.ShutdownEventArgs reason) { }
        public void OnSessionShutdown(object sender, RabbitMQ.Client.ShutdownEventArgs reason) { }
        public void QueueBind(string queue, string exchange, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments) { }
        public void QueueBindNoWait(string queue, string exchange, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments) { }
        public RabbitMQ.Client.QueueDeclareOk QueueDeclare(string queue, bool durable, bool exclusive, bool autoDelete, System.Collections.Generic.IDictionary<string, object> arguments) { }
        public void QueueDeclareNoWait(string queue, bool durable, bool exclusive, bool autoDelete, System.Collections.Generic.IDictionary<string, object> arguments) { }
        public RabbitMQ.Client.QueueDeclareOk QueueDeclarePassive(string queue) { }
        public uint QueueDelete(string queue, bool ifUnused, bool ifEmpty) { }
        public void QueueDeleteNoWait(string queue, bool ifUnused, bool ifEmpty) { }
        public uint QueuePurge(string queue) { }
        public abstract void QueueUnbind(string queue, string exchange, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments);
        public bool SetCloseReason(RabbitMQ.Client.ShutdownEventArgs reason) { }
        public override string ToString() { }
        public void TransmitAndEnqueue(RabbitMQ.Client.Impl.Command cmd, RabbitMQ.Client.Impl.IRpcContinuation k) { }
        public abstract void TxCommit();
        public abstract void TxRollback();
        public abstract void TxSelect();
        public void UpdateSecret(string newSecret, string reason) { }
        public bool WaitForConfirms(System.TimeSpan timeout, out bool timedOut) { }
        public bool WaitForConfirms() { }
        public bool WaitForConfirms(System.TimeSpan timeout) { }
        [return: System.Runtime.CompilerServices.TupleElementNamesAttribute(new string[] {
                "onlyAcksReceived",
                "timedOut"})]
        public System.Threading.Tasks.Task<System.ValueTuple<bool, bool>> WaitForConfirmsAsync(System.TimeSpan timeout) { }
        public System.Threading.Tasks.Task<bool> WaitForConfirmsAsync() { }
        public void WaitForConfirmsOrDie() { }
        public void WaitForConfirmsOrDie(System.TimeSpan timeout) { }
        public System.Threading.Tasks.Task WaitForConfirmsOrDieAsync() { }
        public System.Threading.Tasks.Task WaitForConfirmsOrDieAsync(System.TimeSpan timeout) { }
        public abstract void _Private_BasicCancel(string consumerTag, bool nowait);
        public abstract void _Private_BasicConsume(string queue, string consumerTag, bool noLocal, bool autoAck, bool exclusive, bool nowait, System.Collections.Generic.IDictionary<string, object> arguments);
        public abstract void _Private_BasicGet(string queue, bool autoAck);
        public abstract void _Private_BasicPublish(string exchange, string routingKey, bool mandatory, RabbitMQ.Client.IBasicProperties basicProperties, byte[] body);
        public abstract void _Private_BasicRecover(bool requeue);
        public abstract void _Private_ChannelClose(ushort replyCode, string replyText, ushort classId, ushort methodId);
        public abstract void _Private_ChannelCloseOk();
        public abstract void _Private_ChannelFlowOk(bool active);
        public abstract void _Private_ChannelOpen(string outOfBand);
        public abstract void _Private_ConfirmSelect(bool nowait);
        public abstract void _Private_ConnectionClose(ushort replyCode, string replyText, ushort classId, ushort methodId);
        public abstract void _Private_ConnectionCloseOk();
        public abstract void _Private_ConnectionOpen(string virtualHost, string capabilities, bool insist);
        public abstract void _Private_ConnectionSecureOk(byte[] response);
        public abstract void _Private_ConnectionStartOk(System.Collections.Generic.IDictionary<string, object> clientProperties, string mechanism, byte[] response, string locale);
        public abstract void _Private_ExchangeBind(string destination, string source, string routingKey, bool nowait, System.Collections.Generic.IDictionary<string, object> arguments);
        public abstract void _Private_ExchangeDeclare(string exchange, string type, bool passive, bool durable, bool autoDelete, bool @internal, bool nowait, System.Collections.Generic.IDictionary<string, object> arguments);
        public abstract void _Private_ExchangeDelete(string exchange, bool ifUnused, bool nowait);
        public abstract void _Private_ExchangeUnbind(string destination, string source, string routingKey, bool nowait, System.Collections.Generic.IDictionary<string, object> arguments);
        public abstract void _Private_QueueBind(string queue, string exchange, string routingKey, bool nowait, System.Collections.Generic.IDictionary<string, object> arguments);
        public abstract void _Private_QueueDeclare(string queue, bool passive, bool durable, bool exclusive, bool autoDelete, bool nowait, System.Collections.Generic.IDictionary<string, object> arguments);
        public abstract uint _Private_QueueDelete(string queue, bool ifUnused, bool ifEmpty, bool nowait);
        public abstract uint _Private_QueuePurge(string queue, bool nowait);
        public abstract void _Private_UpdateSecret(byte[] newSecret, string reason);
        protected virtual void handleAckNack(ulong deliveryTag, bool multiple, bool isNack) { }
        public class BasicConsumerRpcContinuation : RabbitMQ.Client.Impl.SimpleBlockingRpcContinuation
        {
            public RabbitMQ.Client.IBasicConsumer m_consumer;
            public string m_consumerTag;
            public BasicConsumerRpcContinuation() { }
        }
        public class BasicGetRpcContinuation : RabbitMQ.Client.Impl.SimpleBlockingRpcContinuation
        {
            public RabbitMQ.Client.BasicGetResult m_result;
            public BasicGetRpcContinuation() { }
        }
        public class ConnectionOpenContinuation : RabbitMQ.Client.Impl.SimpleBlockingRpcContinuation
        {
            public string m_host;
            public string m_knownHosts;
            public bool m_redirect;
            public ConnectionOpenContinuation() { }
        }
        public class ConnectionStartRpcContinuation : RabbitMQ.Client.Impl.SimpleBlockingRpcContinuation
        {
            public RabbitMQ.Client.Impl.ConnectionSecureOrTune m_result;
            public ConnectionStartRpcContinuation() { }
        }
        public class QueueDeclareRpcContinuation : RabbitMQ.Client.Impl.SimpleBlockingRpcContinuation
        {
            public RabbitMQ.Client.QueueDeclareOk m_result;
            public QueueDeclareRpcContinuation() { }
        }
    }
    public abstract class OutboundFrame : RabbitMQ.Client.Impl.Frame
    {
        public OutboundFrame(RabbitMQ.Client.Impl.FrameType type, int channel) { }
        public abstract void WritePayload(RabbitMQ.Util.PipelineBinaryWriter writer);
        public void WriteTo(RabbitMQ.Util.PipelineBinaryWriter writer) { }
    }
    public abstract class ProtocolException : RabbitMQ.Client.Exceptions.RabbitMQClientException
    {
        protected ProtocolException(string message) { }
        public abstract ushort ReplyCode { get; }
        public virtual RabbitMQ.Client.ShutdownEventArgs ShutdownReason { get; }
    }
    public class QuiescingSession : RabbitMQ.Client.Impl.SessionBase
    {
        public RabbitMQ.Client.ShutdownEventArgs m_reason;
        public QuiescingSession(RabbitMQ.Client.Framing.Impl.Connection connection, int channelNumber, RabbitMQ.Client.ShutdownEventArgs reason) { }
        protected RabbitMQ.Client.Impl.Command CreateChannelCloseOk() { }
        public override void HandleFrame(RabbitMQ.Client.Impl.InboundFrame frame) { }
    }
    public class RpcContinuationQueue
    {
        public RpcContinuationQueue() { }
        public void Enqueue(RabbitMQ.Client.Impl.IRpcContinuation k) { }
        public void HandleModelShutdown(RabbitMQ.Client.ShutdownEventArgs reason) { }
        public RabbitMQ.Client.Impl.IRpcContinuation Next() { }
    }
    public class Session : RabbitMQ.Client.Impl.SessionBase
    {
        public Session(RabbitMQ.Client.Framing.Impl.Connection connection, int channelNumber) { }
        public override void HandleFrame(RabbitMQ.Client.Impl.InboundFrame frame) { }
    }
    public abstract class SessionBase : RabbitMQ.Client.Impl.ISession
    {
        public SessionBase(RabbitMQ.Client.Framing.Impl.Connection connection, int channelNumber) { }
        public int ChannelNumber { get; }
        public RabbitMQ.Client.ShutdownEventArgs CloseReason { get; set; }
        public System.Action<RabbitMQ.Client.Impl.ISession, RabbitMQ.Client.Impl.Command> CommandReceived { get; set; }
        public RabbitMQ.Client.Framing.Impl.Connection Connection { get; }
        public bool IsOpen { get; }
        public event System.EventHandler<RabbitMQ.Client.ShutdownEventArgs> SessionShutdown;
        public void Close(RabbitMQ.Client.ShutdownEventArgs reason) { }
        public void Close(RabbitMQ.Client.ShutdownEventArgs reason, bool notify) { }
        public abstract void HandleFrame(RabbitMQ.Client.Impl.InboundFrame frame);
        public void Notify() { }
        public virtual void OnCommandReceived(RabbitMQ.Client.Impl.Command cmd) { }
        public virtual void OnConnectionShutdown(object conn, RabbitMQ.Client.ShutdownEventArgs reason) { }
        public virtual void OnSessionShutdown(RabbitMQ.Client.ShutdownEventArgs reason) { }
        public override string ToString() { }
        public virtual void Transmit(RabbitMQ.Client.Impl.Command cmd) { }
        public virtual void Transmit(System.Collections.Generic.IList<RabbitMQ.Client.Impl.Command> commands) { }
    }
    public class SessionManager
    {
        public readonly ushort ChannelMax;
        public SessionManager(RabbitMQ.Client.Framing.Impl.Connection connection, ushort channelMax) { }
        [System.ObsoleteAttribute("Please explicitly close connections instead.")]
        public bool AutoClose { get; set; }
        public int Count { get; }
        public void AutoCloseConnection() { }
        public void CheckAutoClose() { }
        public RabbitMQ.Client.Impl.ISession Create() { }
        public RabbitMQ.Client.Impl.ISession Create(int channelNumber) { }
        public RabbitMQ.Client.Impl.ISession CreateInternal(int channelNumber) { }
        public void HandleSessionShutdown(object sender, RabbitMQ.Client.ShutdownEventArgs reason) { }
        public RabbitMQ.Client.Impl.ISession Lookup(int number) { }
        public RabbitMQ.Client.Impl.ISession Swap(int channelNumber, RabbitMQ.Client.Impl.ISession replacement) { }
    }
    public class ShutdownContinuation
    {
        public readonly RabbitMQ.Util.BlockingCell<RabbitMQ.Client.ShutdownEventArgs> m_cell;
        public ShutdownContinuation() { }
        public virtual void OnConnectionShutdown(object sender, RabbitMQ.Client.ShutdownEventArgs reason) { }
        public virtual void OnModelShutdown(RabbitMQ.Client.IModel sender, RabbitMQ.Client.ShutdownEventArgs reason) { }
        public virtual RabbitMQ.Client.ShutdownEventArgs Wait() { }
        public RabbitMQ.Client.ShutdownEventArgs Wait(System.TimeSpan timeout) { }
    }
    public class SimpleBlockingRpcContinuation : RabbitMQ.Client.Impl.IRpcContinuation
    {
        public readonly RabbitMQ.Util.BlockingCell<RabbitMQ.Util.Either<RabbitMQ.Client.Impl.Command, RabbitMQ.Client.ShutdownEventArgs>> m_cell;
        public SimpleBlockingRpcContinuation() { }
        public virtual RabbitMQ.Client.Impl.Command GetReply() { }
        public virtual RabbitMQ.Client.Impl.Command GetReply(System.TimeSpan timeout) { }
        public virtual void HandleCommand(RabbitMQ.Client.Impl.Command cmd) { }
        public virtual void HandleModelShutdown(RabbitMQ.Client.ShutdownEventArgs reason) { }
    }
    public class SocketFrameHandler : RabbitMQ.Client.Impl.IFrameHandler
    {
        public SocketFrameHandler(RabbitMQ.Client.AmqpTcpEndpoint endpoint, System.Func<System.Net.Sockets.AddressFamily, RabbitMQ.Client.ITcpClient> socketFactory, System.TimeSpan connectionTimeout, System.TimeSpan readTimeout, System.TimeSpan writeTimeout) { }
        public RabbitMQ.Client.AmqpTcpEndpoint Endpoint { get; set; }
        public System.Net.EndPoint LocalEndPoint { get; }
        public int LocalPort { get; }
        public System.TimeSpan ReadTimeout { set; }
        public System.Net.EndPoint RemoteEndPoint { get; }
        public int RemotePort { get; }
        public System.TimeSpan WriteTimeout { get; set; }
        public void Close() { }
        public System.Threading.Tasks.ValueTask<RabbitMQ.Client.Impl.InboundFrame> ReadFrameAsync() { }
        public void SendHeader() { }
        public void WriteFrame(RabbitMQ.Client.Impl.OutboundFrame frame) { }
        public void WriteFrameSet(System.Collections.Generic.IList<RabbitMQ.Client.Impl.OutboundFrame> frames) { }
    }
    public abstract class SoftProtocolException : RabbitMQ.Client.Impl.ProtocolException
    {
        protected SoftProtocolException(int channelNumber, string message) { }
        public int Channel { get; }
    }
    public abstract class StreamProperties : RabbitMQ.Client.Impl.ContentHeaderBase, RabbitMQ.Client.IContentHeader, RabbitMQ.Client.IStreamProperties
    {
        protected StreamProperties() { }
        public abstract string ContentEncoding { get; set; }
        public abstract string ContentType { get; set; }
        public abstract System.Collections.Generic.IDictionary<string, object> Headers { get; set; }
        public abstract byte Priority { get; set; }
        public abstract RabbitMQ.Client.AmqpTimestamp Timestamp { get; set; }
        public abstract void ClearContentEncoding();
        public abstract void ClearContentType();
        public abstract void ClearHeaders();
        public abstract void ClearPriority();
        public abstract void ClearTimestamp();
        public override object Clone() { }
        public abstract bool IsContentEncodingPresent();
        public abstract bool IsContentTypePresent();
        public abstract bool IsHeadersPresent();
        public abstract bool IsPriorityPresent();
        public abstract bool IsTimestampPresent();
    }
    public class SyntaxError : RabbitMQ.Client.Impl.HardProtocolException
    {
        public SyntaxError(string message) { }
        public override ushort ReplyCode { get; }
    }
    public class UnexpectedFrameException : RabbitMQ.Client.Impl.HardProtocolException
    {
        public RabbitMQ.Client.Impl.Frame m_frame;
        public UnexpectedFrameException(RabbitMQ.Client.Impl.Frame frame) { }
        public RabbitMQ.Client.Impl.Frame Frame { get; }
        public override ushort ReplyCode { get; }
    }
    public class UnknownClassOrMethodException : RabbitMQ.Client.Impl.HardProtocolException
    {
        public UnknownClassOrMethodException(ushort classId, ushort methodId) { }
        public ushort ClassId { get; }
        public ushort MethodId { get; }
        public override ushort ReplyCode { get; }
        public override string ToString() { }
    }
    public class WireFormatting
    {
        public WireFormatting() { }
        public static decimal AmqpToDecimal(byte scale, uint unsignedMantissa) { }
        public static void DecimalToAmqp(decimal value, out byte scale, out int mantissa) { }
        public static System.Collections.IList ReadArray(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static decimal ReadDecimal(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static object ReadFieldValue(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static uint ReadLong(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static ulong ReadLonglong(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static byte[] ReadLongstr(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static byte ReadOctet(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static ushort ReadShort(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static string ReadShortstr(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static System.Collections.Generic.IDictionary<string, object> ReadTable(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static RabbitMQ.Client.AmqpTimestamp ReadTimestamp(RabbitMQ.Util.NetworkBinaryReader reader) { }
        public static void WriteArray(RabbitMQ.Util.NetworkBinaryWriter writer, System.Collections.IList val) { }
        public static void WriteDecimal(RabbitMQ.Util.NetworkBinaryWriter writer, decimal value) { }
        public static void WriteFieldValue(RabbitMQ.Util.NetworkBinaryWriter writer, object value) { }
        public static void WriteLong(RabbitMQ.Util.NetworkBinaryWriter writer, uint val) { }
        public static void WriteLonglong(RabbitMQ.Util.NetworkBinaryWriter writer, ulong val) { }
        public static void WriteLongstr(RabbitMQ.Util.NetworkBinaryWriter writer, byte[] val, int length) { }
        public static void WriteOctet(RabbitMQ.Util.NetworkBinaryWriter writer, byte val) { }
        public static void WriteShort(RabbitMQ.Util.NetworkBinaryWriter writer, ushort val) { }
        public static void WriteShortstr(RabbitMQ.Util.NetworkBinaryWriter writer, string val) { }
        public static void WriteTable(RabbitMQ.Util.NetworkBinaryWriter writer, System.Collections.IDictionary val) { }
        public static void WriteTable(RabbitMQ.Util.NetworkBinaryWriter writer, System.Collections.Generic.IDictionary<string, object> val) { }
        public static void WriteTimestamp(RabbitMQ.Util.NetworkBinaryWriter writer, RabbitMQ.Client.AmqpTimestamp val) { }
    }
}
namespace RabbitMQ.Client.Logging
{
    [System.Diagnostics.Tracing.EventSourceAttribute(Name="rabbitmq-dotnet-client")]
    public sealed class RabbitMqClientEventSource : System.Diagnostics.Tracing.EventSource
    {
        public static RabbitMQ.Client.Logging.RabbitMqClientEventSource Log;
        public RabbitMqClientEventSource() { }
        [System.Diagnostics.Tracing.EventAttribute(3, Keywords=System.Diagnostics.Tracing.EventKeywords.None | System.Diagnostics.Tracing.EventKeywords.All, Level=System.Diagnostics.Tracing.EventLevel.Error, Message="ERROR")]
        public void Error(string message, RabbitMQ.Client.Logging.RabbitMqExceptionDetail ex) { }
        [System.Diagnostics.Tracing.NonEventAttribute()]
        public void Error(string message, System.Exception ex) { }
        [System.Diagnostics.Tracing.EventAttribute(1, Keywords=System.Diagnostics.Tracing.EventKeywords.None | System.Diagnostics.Tracing.EventKeywords.All, Level=System.Diagnostics.Tracing.EventLevel.Informational, Message="INFO")]
        public void Info(string message) { }
        [System.Diagnostics.Tracing.EventAttribute(2, Keywords=System.Diagnostics.Tracing.EventKeywords.None | System.Diagnostics.Tracing.EventKeywords.All, Level=System.Diagnostics.Tracing.EventLevel.Warning, Message="WARN")]
        public void Warn(string message) { }
        public class Keywords
        {
            public const System.Diagnostics.Tracing.EventKeywords Log = 1;
            public Keywords() { }
        }
    }
    public sealed class RabbitMqConsoleEventListener : System.Diagnostics.Tracing.EventListener, System.IDisposable
    {
        public RabbitMqConsoleEventListener() { }
        public override void Dispose() { }
        protected override void OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs eventData) { }
    }
    [System.Diagnostics.Tracing.EventDataAttribute()]
    public class RabbitMqExceptionDetail
    {
        public RabbitMqExceptionDetail(System.Exception ex) { }
        public RabbitMqExceptionDetail(System.Collections.Generic.IDictionary<string, object> ex) { }
        public string InnerException { get; }
        public string Message { get; }
        public string StackTrace { get; }
        public string Type { get; }
        public override string ToString() { }
    }
}
namespace RabbitMQ.Util
{
    public class BlockingCell<T>
    {
        public System.EventHandler<T> ContinueUsingValue;
        public BlockingCell() { }
        public void ContinueWithValue(T value) { }
        public T WaitForValue(System.TimeSpan timeout) { }
        public T WaitForValue() { }
    }
    public class static DebugUtil
    {
        public static void Dump(byte[] bytes) { }
        public static void Dump(byte[] bytes, System.IO.TextWriter writer) { }
        public static void DumpKeyValue(string key, object value, System.IO.TextWriter writer, int indent) { }
        public static void DumpProperties(object value, System.IO.TextWriter writer, int indent) { }
    }
    public enum EitherAlternative
    {
        Left = 0,
        Right = 1,
    }
    public class Either<L, R>
    {
        public RabbitMQ.Util.EitherAlternative Alternative { get; }
        public L LeftValue { get; }
        public R RightValue { get; }
        public static RabbitMQ.Util.Either<L, R> Left(L value) { }
        public static RabbitMQ.Util.Either<L, R> Right(R value) { }
    }
    public class IntAllocator
    {
        public IntAllocator(int start, int end) { }
        public int Allocate() { }
        public void Free(int id) { }
        public bool Reserve(int id) { }
        public class IntervalList
        {
            public int End;
            public RabbitMQ.Util.IntAllocator.IntervalList Next;
            public int Start;
            public IntervalList(int start, int end) { }
            public static RabbitMQ.Util.IntAllocator.IntervalList FromArray(int[] xs, int length) { }
            public static RabbitMQ.Util.IntAllocator.IntervalList Merge(RabbitMQ.Util.IntAllocator.IntervalList x, RabbitMQ.Util.IntAllocator.IntervalList y) { }
        }
    }
    public class static InterlockedEx
    {
        public static ulong Decrement(ref uint location) { }
        public static ulong Decrement(ref ulong location) { }
        public static ulong Increment(ref uint location) { }
        public static ulong Increment(ref ulong location) { }
    }
    public class NetworkBinaryReader : System.IO.BinaryReader
    {
        public NetworkBinaryReader(System.IO.Stream input) { }
        public NetworkBinaryReader(System.IO.Stream input, System.Text.Encoding encoding) { }
        public override double ReadDouble() { }
        public override short ReadInt16() { }
        public override int ReadInt32() { }
        public override long ReadInt64() { }
        public override float ReadSingle() { }
        public override ushort ReadUInt16() { }
        public override uint ReadUInt32() { }
        public override ulong ReadUInt64() { }
    }
    public class NetworkBinaryWriter : System.IO.BinaryWriter
    {
        public NetworkBinaryWriter(System.IO.Stream output) { }
        public NetworkBinaryWriter(System.IO.Stream output, System.Text.Encoding encoding) { }
        public override void Write(short i) { }
        public override void Write(ushort i) { }
        public override void Write(int i) { }
        public override void Write(uint i) { }
        public override void Write(long i) { }
        public override void Write(ulong i) { }
        public override void Write(float f) { }
        public override void Write(double d) { }
    }
    public class static PipeReaderExtensions
    {
        public static void AdvanceReaderIfNotEmpty(this System.IO.Pipelines.PipeReader reader, System.IO.Pipelines.ReadResult result) { }
        public static System.Threading.Tasks.ValueTask<System.Buffers.ReadOnlySequence<byte>> ReadMinimumSize<T>(this System.IO.Pipelines.PipeReader reader, System.Threading.CancellationToken cancellationToken = null)
            where T :  struct { }
    }
    public class PipelineBinaryReader
    {
        public PipelineBinaryReader(System.IO.Pipelines.PipeReader reader) { }
        public System.Threading.Tasks.ValueTask<byte> ReadByteAsync(System.Threading.CancellationToken cancellationToken = null) { }
        public System.Threading.Tasks.ValueTask ReadBytesAsync(System.Memory<byte> buffer, System.Threading.CancellationToken cancellationToken = null) { }
        public System.Threading.Tasks.ValueTask<double> ReadDoubleBigEndianAsync(System.Threading.CancellationToken cancellationToken = null) { }
        public System.Threading.Tasks.ValueTask<short> ReadInt16BigEndianAsync(System.Threading.CancellationToken cancellationToken = null) { }
        public System.Threading.Tasks.ValueTask<int> ReadInt32BigEndianAsync(System.Threading.CancellationToken cancellationToken = null) { }
        public System.Threading.Tasks.ValueTask<long> ReadInt64BigEndianAsync(System.Threading.CancellationToken cancellationToken = null) { }
        public System.Threading.Tasks.ValueTask<float> ReadSingleBigEndianAsync(System.Threading.CancellationToken cancellationToken = null) { }
        public System.Threading.Tasks.ValueTask<ushort> ReadUInt16BigEndianAsync(System.Threading.CancellationToken cancellationToken = null) { }
        public System.Threading.Tasks.ValueTask<uint> ReadUInt32BigEndianAsync(System.Threading.CancellationToken cancellationToken = null) { }
        public System.Threading.Tasks.ValueTask<ulong> ReadUInt64BigEndianAsync(System.Threading.CancellationToken cancellationToken = null) { }
    }
    public class PipelineBinaryWriter
    {
        public PipelineBinaryWriter(System.IO.Pipelines.PipeWriter reader) { }
        public System.IO.Pipelines.FlushResult Flush() { }
        public System.Threading.Tasks.ValueTask<System.IO.Pipelines.FlushResult> FlushAsync(System.Threading.CancellationToken cancellationToken = null) { }
        public void Write(double val) { }
        public void Write(float val) { }
        public void Write(short val) { }
        public void Write(ushort val) { }
        public void Write(int val) { }
        public void Write(uint val) { }
        public void Write(long val) { }
        public void Write(ulong val) { }
        public void Write(System.ReadOnlySpan<byte> val) { }
        public void Write(byte val) { }
        public void Write(System.ReadOnlySpan<byte> val, int offset, int length) { }
    }
    public class static PooledMemoryStream
    {
        public static System.IO.MemoryStream GetMemoryStream([System.Runtime.CompilerServices.CallerMemberNameAttribute()] string memberName = "", [System.Runtime.CompilerServices.CallerFilePathAttribute()] string sourceFilePath = "", [System.Runtime.CompilerServices.CallerLineNumberAttribute()] int sourceLineNumber = 0) { }
        public static System.IO.MemoryStream GetMemoryStream(int initialSize, [System.Runtime.CompilerServices.CallerMemberNameAttribute()] string memberName = "", [System.Runtime.CompilerServices.CallerFilePathAttribute()] string sourceFilePath = "", [System.Runtime.CompilerServices.CallerLineNumberAttribute()] int sourceLineNumber = 0) { }
    }
    public class static ReadOnlySequenceExtensions
    {
        public static byte ReadByte(this System.Buffers.ReadOnlySequence<byte> slice) { }
        public static void ReadBytes(this System.Buffers.ReadOnlySequence<byte> slice, System.Span<byte> span) { }
        public static double ReadDoubleBigEndian(this System.Buffers.ReadOnlySequence<byte> slice) { }
        public static short ReadInt16BigEndian(this System.Buffers.ReadOnlySequence<byte> slice) { }
        public static int ReadInt32BigEndian(this System.Buffers.ReadOnlySequence<byte> slice) { }
        public static long ReadInt64BigEndian(this System.Buffers.ReadOnlySequence<byte> slice) { }
        public static float ReadSingleBigEndian(this System.Buffers.ReadOnlySequence<byte> slice) { }
        public static ushort ReadUInt16BigEndian(this System.Buffers.ReadOnlySequence<byte> slice) { }
        public static uint ReadUInt32BigEndian(this System.Buffers.ReadOnlySequence<byte> slice) { }
        public static ulong ReadUInt64BigEndian(this System.Buffers.ReadOnlySequence<byte> slice) { }
    }
    public class SetQueue<T>
    {
        public SetQueue() { }
        public void Clear() { }
        public bool Contains(T item) { }
        public T Dequeue() { }
        public bool Enqueue(T item) { }
        public bool IsEmpty() { }
        public bool Remove(T item) { }
    }
    public class SharedQueue : RabbitMQ.Util.SharedQueue<object>
    {
        public SharedQueue() { }
    }
    public struct SharedQueueEnumerator<T> : System.Collections.Generic.IEnumerator<T>, System.Collections.IEnumerator, System.IDisposable
    {
        public SharedQueueEnumerator(RabbitMQ.Util.SharedQueue<T> queue) { }
        public void Dispose() { }
    }
    public class SharedQueue<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
    {
        protected bool m_isOpen;
        protected System.Collections.Generic.Queue<T> m_queue;
        public SharedQueue() { }
        public void Close() { }
        public T Dequeue() { }
        public bool Dequeue(System.TimeSpan timeout, out T result) { }
        public T DequeueNoWait(T defaultValue) { }
        public void Enqueue(T o) { }
    }
}
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"Benchmarks, PublicKey=00240000048000009400000006020000002400005253413100040000010001008d20ec856aeeb8c3153a77faa2d80e6e43b5db93224a20cc7ae384f65f142e89730e2ff0fcc5d578bbe96fa98a7196c77329efdee4579b3814c0789e5a39b51df6edd75b602a33ceabdfcf19a3feb832f31d8254168cd7ba5700dfbca301fbf8db614ba41ba18474de0a5f4c2d51c995bc3636c641c8cbe76f45717bfcb943b5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"Unit, PublicKey=00240000048000009400000006020000002400005253413100040000010001008d20ec856aeeb8c3153a77faa2d80e6e43b5db93224a20cc7ae384f65f142e89730e2ff0fcc5d578bbe96fa98a7196c77329efdee4579b3814c0789e5a39b51df6edd75b602a33ceabdfcf19a3feb832f31d8254168cd7ba5700dfbca301fbf8db614ba41ba18474de0a5f4c2d51c995bc3636c641c8cbe76f45717bfcb943b5")]
namespace RabbitMQ.Client
{
    public class AmqpTcpEndpoint
    {
        public const int DefaultAmqpSslPort = 5671;
        public const int UseDefaultPort = -1;
        public AmqpTcpEndpoint() { }
        public AmqpTcpEndpoint(System.Uri uri) { }
        public AmqpTcpEndpoint(string hostName, int portOrMinusOne = -1) { }
        public AmqpTcpEndpoint(System.Uri uri, RabbitMQ.Client.SslOption ssl) { }
        public AmqpTcpEndpoint(string hostName, int portOrMinusOne, RabbitMQ.Client.SslOption ssl) { }
        public AmqpTcpEndpoint(string hostName, int portOrMinusOne, RabbitMQ.Client.SslOption ssl, uint maxMessageSize) { }
        public System.Net.Sockets.AddressFamily AddressFamily { get; set; }
        public string HostName { get; set; }
        public uint MaxMessageSize { get; }
        public int Port { get; set; }
        public RabbitMQ.Client.IProtocol Protocol { get; }
        public RabbitMQ.Client.SslOption Ssl { get; set; }
        public object Clone() { }
        public RabbitMQ.Client.AmqpTcpEndpoint CloneWithHostname(string hostname) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static RabbitMQ.Client.AmqpTcpEndpoint Parse(string address) { }
        public static RabbitMQ.Client.AmqpTcpEndpoint[] ParseMultiple(string addresses) { }
    }
    public readonly struct AmqpTimestamp : System.IEquatable<RabbitMQ.Client.AmqpTimestamp>
    {
        public AmqpTimestamp(long unixTime) { }
        public long UnixTime { get; }
        public bool Equals(RabbitMQ.Client.AmqpTimestamp other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static bool operator !=(RabbitMQ.Client.AmqpTimestamp left, RabbitMQ.Client.AmqpTimestamp right) { }
        public static bool operator ==(RabbitMQ.Client.AmqpTimestamp left, RabbitMQ.Client.AmqpTimestamp right) { }
    }
    public class AsyncDefaultBasicConsumer : RabbitMQ.Client.IAsyncBasicConsumer, RabbitMQ.Client.IBasicConsumer
    {
        public AsyncDefaultBasicConsumer() { }
        public AsyncDefaultBasicConsumer(RabbitMQ.Client.IChannel channel) { }
        public RabbitMQ.Client.IChannel Channel { get; set; }
        public string[] ConsumerTags { get; }
        public bool IsRunning { get; set; }
        public RabbitMQ.Client.ShutdownEventArgs ShutdownReason { get; set; }
        public event RabbitMQ.Client.Events.AsyncEventHandler<RabbitMQ.Client.Events.ConsumerEventArgs> ConsumerCancelled;
        public virtual System.Threading.Tasks.Task HandleBasicCancel(string consumerTag) { }
        public virtual System.Threading.Tasks.Task HandleBasicCancelOk(string consumerTag) { }
        public virtual System.Threading.Tasks.Task HandleBasicConsumeOk(string consumerTag) { }
        public virtual System.Threading.Tasks.Task HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, in RabbitMQ.Client.ReadOnlyBasicProperties properties, System.ReadOnlyMemory<byte> body) { }
        public virtual System.Threading.Tasks.Task HandleChannelShutdown(object channel, RabbitMQ.Client.ShutdownEventArgs reason) { }
        public virtual System.Threading.Tasks.Task OnCancel(params string[] consumerTags) { }
    }
    public class BasicCredentialsProvider : RabbitMQ.Client.ICredentialsProvider
    {
        public BasicCredentialsProvider(string name, string userName, string password) { }
        public string Name { get; }
        public string Password { get; }
        public string UserName { get; }
        public System.TimeSpan? ValidUntil { get; }
        public void Refresh() { }
    }
    public sealed class BasicGetResult : System.IDisposable
    {
        public BasicGetResult(ulong deliveryTag, bool redelivered, string exchange, string routingKey, uint messageCount, in RabbitMQ.Client.ReadOnlyBasicProperties basicProperties, System.ReadOnlyMemory<byte> body) { }
        public BasicGetResult(ulong deliveryTag, bool redelivered, string exchange, string routingKey, uint messageCount, in RabbitMQ.Client.ReadOnlyBasicProperties basicProperties, System.ReadOnlyMemory<byte> body, byte[] rentedArray) { }
        public RabbitMQ.Client.ReadOnlyBasicProperties BasicProperties { get; }
        public System.ReadOnlyMemory<byte> Body { get; }
        public ulong DeliveryTag { get; }
        public string Exchange { get; }
        public uint MessageCount { get; }
        public bool Redelivered { get; }
        public string RoutingKey { get; }
        public void Dispose() { }
    }
    public struct BasicProperties : RabbitMQ.Client.IAmqpHeader, RabbitMQ.Client.IAmqpWriteable, RabbitMQ.Client.IBasicProperties, RabbitMQ.Client.IReadOnlyBasicProperties
    {
        public BasicProperties(in RabbitMQ.Client.ReadOnlyBasicProperties input) { }
        public string? AppId { get; set; }
        public string? ClusterId { get; set; }
        public string? ContentEncoding { get; set; }
        public string? ContentType { get; set; }
        public string? CorrelationId { get; set; }
        public RabbitMQ.Client.DeliveryModes DeliveryMode { get; set; }
        public string? Expiration { get; set; }
        public System.Collections.Generic.IDictionary<string, object?>? Headers { get; set; }
        public string? MessageId { get; set; }
        public bool Persistent { get; set; }
        public byte Priority { get; set; }
        public string? ReplyTo { get; set; }
        public RabbitMQ.Client.PublicationAddress? ReplyToAddress { get; set; }
        public RabbitMQ.Client.AmqpTimestamp Timestamp { get; set; }
        public string? Type { get; set; }
        public string? UserId { get; set; }
        public void ClearAppId() { }
        public void ClearClusterId() { }
        public void ClearContentEncoding() { }
        public void ClearContentType() { }
        public void ClearCorrelationId() { }
        public void ClearDeliveryMode() { }
        public void ClearExpiration() { }
        public void ClearHeaders() { }
        public void ClearMessageId() { }
        public void ClearPriority() { }
        public void ClearReplyTo() { }
        public void ClearTimestamp() { }
        public void ClearType() { }
        public void ClearUserId() { }
        public bool IsAppIdPresent() { }
        public bool IsClusterIdPresent() { }
        public bool IsContentEncodingPresent() { }
        public bool IsContentTypePresent() { }
        public bool IsCorrelationIdPresent() { }
        public bool IsDeliveryModePresent() { }
        public bool IsExpirationPresent() { }
        public bool IsHeadersPresent() { }
        public bool IsMessageIdPresent() { }
        public bool IsPriorityPresent() { }
        public bool IsReplyToPresent() { }
        public bool IsTimestampPresent() { }
        public bool IsTypePresent() { }
        public bool IsUserIdPresent() { }
    }
    public class BinaryTableValue
    {
        public BinaryTableValue() { }
        public BinaryTableValue(byte[] bytes) { }
        public byte[] Bytes { get; set; }
    }
    public sealed class CachedString
    {
        public readonly System.ReadOnlyMemory<byte> Bytes;
        public readonly string Value;
        public static readonly RabbitMQ.Client.CachedString Empty;
        public CachedString(System.ReadOnlyMemory<byte> bytes) { }
        public CachedString(string value) { }
        public CachedString(string value, System.ReadOnlyMemory<byte> bytes) { }
    }
    public sealed class ConnectionConfig
    {
        public RabbitMQ.Client.ICredentialsProvider CredentialsProvider;
        public RabbitMQ.Client.ICredentialsRefresher CredentialsRefresher;
        public System.Collections.Generic.IList<RabbitMQ.Client.IAuthMechanismFactory> AuthMechanisms { get; }
        public System.Collections.Generic.IDictionary<string, object?> ClientProperties { get; }
        public string? ClientProvidedName { get; }
        public System.TimeSpan ContinuationTimeout { get; }
        public int DispatchConsumerConcurrency { get; }
        public bool DispatchConsumersAsync { get; }
        public System.TimeSpan HandshakeContinuationTimeout { get; }
        public System.TimeSpan HeartbeatInterval { get; }
        public ushort MaxChannelCount { get; }
        public uint MaxFrameSize { get; }
        public System.TimeSpan NetworkRecoveryInterval { get; }
        public string Password { get; }
        public System.TimeSpan RequestedConnectionTimeout { get; }
        public bool TopologyRecoveryEnabled { get; }
        public RabbitMQ.Client.TopologyRecoveryExceptionHandler TopologyRecoveryExceptionHandler { get; }
        public RabbitMQ.Client.TopologyRecoveryFilter TopologyRecoveryFilter { get; }
        public string UserName { get; }
        public string VirtualHost { get; }
    }
    public sealed class ConnectionFactory : RabbitMQ.Client.ConnectionFactoryBase, RabbitMQ.Client.IConnectionFactory
    {
        public const ushort DefaultChannelMax = 2047;
        public const uint DefaultFrameMax = 0u;
        public const uint DefaultMaxMessageSize = 134217728u;
        public const string DefaultPass = "guest";
        public const string DefaultUser = "guest";
        public const string DefaultVHost = "/";
        public const uint MaximumMaxMessageSize = 536870912u;
        public static readonly System.Collections.Generic.IList<RabbitMQ.Client.IAuthMechanismFactory> DefaultAuthMechanisms;
        public static readonly System.TimeSpan DefaultConnectionTimeout;
        public static readonly RabbitMQ.Client.ICredentialsRefresher DefaultCredentialsRefresher;
        public static readonly System.TimeSpan DefaultHeartbeat;
        public ConnectionFactory() { }
        public System.Security.Authentication.SslProtocols AmqpUriSslProtocols { get; set; }
        public System.Collections.Generic.IList<RabbitMQ.Client.IAuthMechanismFactory> AuthMechanisms { get; set; }
        public bool AutomaticRecoveryEnabled { get; set; }
        public System.Collections.Generic.IDictionary<string, object> ClientProperties { get; set; }
        public string ClientProvidedName { get; set; }
        public int ConsumerDispatchConcurrency { get; set; }
        public System.TimeSpan ContinuationTimeout { get; set; }
        public RabbitMQ.Client.ICredentialsProvider CredentialsProvider { get; set; }
        public RabbitMQ.Client.ICredentialsRefresher CredentialsRefresher { get; set; }
        public bool DispatchConsumersAsync { get; set; }
        public RabbitMQ.Client.AmqpTcpEndpoint Endpoint { get; set; }
        public System.Func<System.Collections.Generic.IEnumerable<RabbitMQ.Client.AmqpTcpEndpoint>, RabbitMQ.Client.IEndpointResolver> EndpointResolverFactory { get; set; }
        public System.TimeSpan HandshakeContinuationTimeout { get; set; }
        public string HostName { get; set; }
        public uint MaxMessageSize { get; set; }
        public System.TimeSpan NetworkRecoveryInterval { get; set; }
        public string Password { get; set; }
        public int Port { get; set; }
        public ushort RequestedChannelMax { get; set; }
        public System.TimeSpan RequestedConnectionTimeout { get; set; }
        public uint RequestedFrameMax { get; set; }
        public System.TimeSpan RequestedHeartbeat { get; set; }
        public System.TimeSpan SocketReadTimeout { get; set; }
        public System.TimeSpan SocketWriteTimeout { get; set; }
        public RabbitMQ.Client.SslOption Ssl { get; set; }
        public bool TopologyRecoveryEnabled { get; set; }
        public RabbitMQ.Client.TopologyRecoveryExceptionHandler TopologyRecoveryExceptionHandler { get; set; }
        public RabbitMQ.Client.TopologyRecoveryFilter TopologyRecoveryFilter { get; set; }
        public System.Uri Uri { get; set; }
        public string UserName { get; set; }
        public string VirtualHost { get; set; }
        public static System.Net.Sockets.AddressFamily DefaultAddressFamily { get; set; }
        public static System.Security.Authentication.SslProtocols DefaultAmqpUriSslProtocols { get; set; }
        public RabbitMQ.Client.IAuthMechanismFactory AuthMechanismFactory(System.Collections.Generic.IList<string> mechanismNames) { }
        public RabbitMQ.Client.IConnection CreateConnection() { }
        public RabbitMQ.Client.IConnection CreateConnection(System.Collections.Generic.IList<RabbitMQ.Client.AmqpTcpEndpoint> endpoints) { }
        public RabbitMQ.Client.IConnection CreateConnection(System.Collections.Generic.IList<string> hostnames) { }
        public RabbitMQ.Client.IConnection CreateConnection(string clientProvidedName) { }
        public RabbitMQ.Client.IConnection CreateConnection(RabbitMQ.Client.IEndpointResolver endpointResolver, string clientProvidedName) { }
        public RabbitMQ.Client.IConnection CreateConnection(System.Collections.Generic.IList<RabbitMQ.Client.AmqpTcpEndpoint> endpoints, string clientProvidedName) { }
        public RabbitMQ.Client.IConnection CreateConnection(System.Collections.Generic.IList<string> hostnames, string clientProvidedName) { }
    }
    public class ConnectionFactoryBase
    {
        public System.Func<System.Net.Sockets.AddressFamily, RabbitMQ.Client.ITcpClient> SocketFactory;
        public ConnectionFactoryBase() { }
        public static RabbitMQ.Client.ITcpClient DefaultSocketFactory(System.Net.Sockets.AddressFamily addressFamily) { }
    }
    public static class Constants
    {
        public const int AccessRefused = 403;
        public const int ChannelError = 504;
        public const int CommandInvalid = 503;
        public const int ConnectionForced = 320;
        public const int ContentTooLarge = 311;
        public const int FrameBody = 3;
        public const int FrameEnd = 206;
        public const int FrameError = 501;
        public const int FrameHeader = 2;
        public const int FrameHeartbeat = 8;
        public const int FrameMethod = 1;
        public const int FrameMinSize = 4096;
        public const int InternalError = 541;
        public const int InvalidPath = 402;
        public const int NoConsumers = 313;
        public const int NoRoute = 312;
        public const int NotAllowed = 530;
        public const int NotFound = 404;
        public const int NotImplemented = 540;
        public const int PreconditionFailed = 406;
        public const int ReplySuccess = 200;
        public const int ResourceError = 506;
        public const int ResourceLocked = 405;
        public const int SyntaxError = 502;
        public const int UnexpectedFrame = 505;
    }
    public class DefaultBasicConsumer : RabbitMQ.Client.IBasicConsumer
    {
        public DefaultBasicConsumer() { }
        public DefaultBasicConsumer(RabbitMQ.Client.IChannel channel) { }
        public RabbitMQ.Client.IChannel Channel { get; set; }
        public string[] ConsumerTags { get; }
        public bool IsRunning { get; set; }
        public RabbitMQ.Client.ShutdownEventArgs ShutdownReason { get; set; }
        public event System.EventHandler<RabbitMQ.Client.Events.ConsumerEventArgs> ConsumerCancelled;
        public virtual void HandleBasicCancel(string consumerTag) { }
        public virtual void HandleBasicCancelOk(string consumerTag) { }
        public virtual void HandleBasicConsumeOk(string consumerTag) { }
        public virtual void HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, in RabbitMQ.Client.ReadOnlyBasicProperties properties, System.ReadOnlyMemory<byte> body) { }
        public virtual void HandleChannelShutdown(object channel, RabbitMQ.Client.ShutdownEventArgs reason) { }
        public virtual void OnCancel(params string[] consumerTags) { }
    }
    public class DefaultEndpointResolver : RabbitMQ.Client.IEndpointResolver
    {
        public DefaultEndpointResolver(System.Collections.Generic.IEnumerable<RabbitMQ.Client.AmqpTcpEndpoint> tcpEndpoints) { }
        public System.Collections.Generic.IEnumerable<RabbitMQ.Client.AmqpTcpEndpoint> All() { }
    }
    public enum DeliveryModes : byte
    {
        Transient = 1,
        Persistent = 2,
    }
    public static class EndpointResolverExtensions
    {
        public static T SelectOne<T>(this RabbitMQ.Client.IEndpointResolver resolver, System.Func<RabbitMQ.Client.AmqpTcpEndpoint, T> selector) { }
    }
    public static class ExchangeType
    {
        public const string Direct = "direct";
        public const string Fanout = "fanout";
        public const string Headers = "headers";
        public const string Topic = "topic";
        public static System.Collections.Generic.ICollection<string> All() { }
    }
    public class ExternalMechanism : RabbitMQ.Client.IAuthMechanism
    {
        public ExternalMechanism() { }
        public byte[] handleChallenge(byte[] challenge, RabbitMQ.Client.ConnectionConfig config) { }
    }
    public class ExternalMechanismFactory : RabbitMQ.Client.IAuthMechanismFactory
    {
        public ExternalMechanismFactory() { }
        public string Name { get; }
        public RabbitMQ.Client.IAuthMechanism GetInstance() { }
    }
    public static class Headers
    {
        public const string AlternateExchange = "alternate-exchange";
        public const string XDeadLetterExchange = "x-dead-letter-exchange";
        public const string XDeadLetterRoutingKey = "x-dead-letter-routing-key";
        public const string XExpires = "x-expires";
        public const string XMaxAge = "x-max-age";
        public const string XMaxLength = "x-max-length";
        public const string XMaxLengthInBytes = "x-max-length-bytes";
        public const string XMaxPriority = "x-max-priority";
        public const string XMessageTTL = "x-message-ttl";
        public const string XOverflow = "x-overflow";
        public const string XPriority = "x-priority";
        public const string XQueueMode = "x-queue-mode";
        public const string XQueueType = "x-queue-type";
        public const string XQuorumInitialGroupSize = "x-quorum-initial-group-size";
        public const string XSingleActiveConsumer = "x-single-active-consumer";
        public const string XStreamMaxSegmentSizeInBytes = "x-stream-max-segment-size-bytes";
        public const string XStreamOffset = "x-stream-offset";
    }
    public interface IAmqpHeader : RabbitMQ.Client.IAmqpWriteable
    {
        ushort ProtocolClassId { get; }
    }
    public interface IAmqpWriteable
    {
        int GetRequiredBufferSize();
        int WriteTo(System.Span<byte> span);
    }
    public interface IAsyncBasicConsumer
    {
        RabbitMQ.Client.IChannel Channel { get; }
        event RabbitMQ.Client.Events.AsyncEventHandler<RabbitMQ.Client.Events.ConsumerEventArgs> ConsumerCancelled;
        System.Threading.Tasks.Task HandleBasicCancel(string consumerTag);
        System.Threading.Tasks.Task HandleBasicCancelOk(string consumerTag);
        System.Threading.Tasks.Task HandleBasicConsumeOk(string consumerTag);
        System.Threading.Tasks.Task HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, in RabbitMQ.Client.ReadOnlyBasicProperties properties, System.ReadOnlyMemory<byte> body);
        System.Threading.Tasks.Task HandleChannelShutdown(object channel, RabbitMQ.Client.ShutdownEventArgs reason);
    }
    public interface IAuthMechanism
    {
        byte[] handleChallenge(byte[] challenge, RabbitMQ.Client.ConnectionConfig config);
    }
    public interface IAuthMechanismFactory
    {
        string Name { get; }
        RabbitMQ.Client.IAuthMechanism GetInstance();
    }
    public interface IBasicConsumer
    {
        RabbitMQ.Client.IChannel Channel { get; }
        event System.EventHandler<RabbitMQ.Client.Events.ConsumerEventArgs> ConsumerCancelled;
        void HandleBasicCancel(string consumerTag);
        void HandleBasicCancelOk(string consumerTag);
        void HandleBasicConsumeOk(string consumerTag);
        void HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, in RabbitMQ.Client.ReadOnlyBasicProperties properties, System.ReadOnlyMemory<byte> body);
        void HandleChannelShutdown(object channel, RabbitMQ.Client.ShutdownEventArgs reason);
    }
    public interface IBasicProperties : RabbitMQ.Client.IReadOnlyBasicProperties
    {
        new string? AppId { get; set; }
        new string? ClusterId { get; set; }
        new string? ContentEncoding { get; set; }
        new string? ContentType { get; set; }
        new string? CorrelationId { get; set; }
        new RabbitMQ.Client.DeliveryModes DeliveryMode { get; set; }
        new string? Expiration { get; set; }
        new System.Collections.Generic.IDictionary<string, object?>? Headers { get; set; }
        new string? MessageId { get; set; }
        new bool Persistent { get; set; }
        new byte Priority { get; set; }
        new string? ReplyTo { get; set; }
        new RabbitMQ.Client.PublicationAddress? ReplyToAddress { get; set; }
        new RabbitMQ.Client.AmqpTimestamp Timestamp { get; set; }
        new string? Type { get; set; }
        new string? UserId { get; set; }
        void ClearAppId();
        void ClearClusterId();
        void ClearContentEncoding();
        void ClearContentType();
        void ClearCorrelationId();
        void ClearDeliveryMode();
        void ClearExpiration();
        void ClearHeaders();
        void ClearMessageId();
        void ClearPriority();
        void ClearReplyTo();
        void ClearTimestamp();
        void ClearType();
        void ClearUserId();
    }
    public interface IChannel : System.IDisposable
    {
        int ChannelNumber { get; }
        RabbitMQ.Client.ShutdownEventArgs CloseReason { get; }
        System.TimeSpan ContinuationTimeout { get; set; }
        string CurrentQueue { get; }
        RabbitMQ.Client.IBasicConsumer DefaultConsumer { get; set; }
        bool IsClosed { get; }
        bool IsOpen { get; }
        ulong NextPublishSeqNo { get; }
        event System.EventHandler<RabbitMQ.Client.Events.BasicAckEventArgs> BasicAcks;
        event System.EventHandler<RabbitMQ.Client.Events.BasicNackEventArgs> BasicNacks;
        event System.EventHandler<System.EventArgs> BasicRecoverOk;
        event System.EventHandler<RabbitMQ.Client.Events.BasicReturnEventArgs> BasicReturn;
        event System.EventHandler<RabbitMQ.Client.Events.CallbackExceptionEventArgs> CallbackException;
        event System.EventHandler<RabbitMQ.Client.ShutdownEventArgs> ChannelShutdown;
        event System.EventHandler<RabbitMQ.Client.Events.FlowControlEventArgs> FlowControl;
        void BasicAck(ulong deliveryTag, bool multiple);
        System.Threading.Tasks.ValueTask BasicAckAsync(ulong deliveryTag, bool multiple);
        void BasicCancel(string consumerTag);
        System.Threading.Tasks.ValueTask BasicCancelAsync(string consumerTag);
        void BasicCancelNoWait(string consumerTag);
        string BasicConsume(string queue, bool autoAck, string consumerTag, bool noLocal, bool exclusive, System.Collections.Generic.IDictionary<string, object> arguments, RabbitMQ.Client.IBasicConsumer consumer);
        System.Threading.Tasks.ValueTask<string> BasicConsumeAsync(string queue, bool autoAck, string consumerTag, bool noLocal, bool exclusive, System.Collections.Generic.IDictionary<string, object> arguments, RabbitMQ.Client.IBasicConsumer consumer);
        RabbitMQ.Client.BasicGetResult BasicGet(string queue, bool autoAck);
        void BasicNack(ulong deliveryTag, bool multiple, bool requeue);
        void BasicPublish<TProperties>(RabbitMQ.Client.CachedString exchange, RabbitMQ.Client.CachedString routingKey, in TProperties basicProperties, System.ReadOnlyMemory<byte> body = default, bool mandatory = false)
            where TProperties : RabbitMQ.Client.IReadOnlyBasicProperties, RabbitMQ.Client.IAmqpHeader;
        void BasicPublish<TProperties>(string exchange, string routingKey, in TProperties basicProperties, System.ReadOnlyMemory<byte> body = default, bool mandatory = false)
            where TProperties : RabbitMQ.Client.IReadOnlyBasicProperties, RabbitMQ.Client.IAmqpHeader;
        System.Threading.Tasks.ValueTask BasicPublishAsync<TProperties>(RabbitMQ.Client.CachedString exchange, RabbitMQ.Client.CachedString routingKey, in TProperties basicProperties, System.ReadOnlyMemory<byte> body = default, bool mandatory = false)
            where TProperties : RabbitMQ.Client.IReadOnlyBasicProperties, RabbitMQ.Client.IAmqpHeader;
        System.Threading.Tasks.ValueTask BasicPublishAsync<TProperties>(string exchange, string routingKey, in TProperties basicProperties, System.ReadOnlyMemory<byte> body = default, bool mandatory = false)
            where TProperties : RabbitMQ.Client.IReadOnlyBasicProperties, RabbitMQ.Client.IAmqpHeader;
        void BasicQos(uint prefetchSize, ushort prefetchCount, bool global);
        System.Threading.Tasks.ValueTask BasicQosAsync(uint prefetchSize, ushort prefetchCount, bool global);
        [System.Obsolete]
        void BasicRecover(bool requeue);
        [System.Obsolete]
        void BasicRecoverAsync(bool requeue);
        void BasicReject(ulong deliveryTag, bool requeue);
        System.Threading.Tasks.ValueTask BasicRejectAsync(ulong deliveryTag, bool requeue);
        void Close(ushort replyCode, string replyText, bool abort);
        void ConfirmSelect();
        uint ConsumerCount(string queue);
        void ExchangeBind(string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments);
        System.Threading.Tasks.ValueTask ExchangeBindAsync(string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments);
        void ExchangeBindNoWait(string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments);
        void ExchangeDeclare(string exchange, string type, bool durable, bool autoDelete, System.Collections.Generic.IDictionary<string, object> arguments);
        System.Threading.Tasks.ValueTask ExchangeDeclareAsync(string exchange, string type, bool passive, bool durable, bool autoDelete, System.Collections.Generic.IDictionary<string, object> arguments);
        void ExchangeDeclareNoWait(string exchange, string type, bool durable, bool autoDelete, System.Collections.Generic.IDictionary<string, object> arguments);
        void ExchangeDeclarePassive(string exchange);
        void ExchangeDelete(string exchange, bool ifUnused);
        System.Threading.Tasks.ValueTask ExchangeDeleteAsync(string exchange, bool ifUnused);
        void ExchangeDeleteNoWait(string exchange, bool ifUnused);
        void ExchangeUnbind(string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments);
        System.Threading.Tasks.ValueTask ExchangeUnbindAsync(string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments);
        void ExchangeUnbindNoWait(string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments);
        uint MessageCount(string queue);
        void QueueBind(string queue, string exchange, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments);
        System.Threading.Tasks.ValueTask QueueBindAsync(string queue, string exchange, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments);
        void QueueBindNoWait(string queue, string exchange, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments);
        RabbitMQ.Client.QueueDeclareOk QueueDeclare(string queue, bool durable, bool exclusive, bool autoDelete, System.Collections.Generic.IDictionary<string, object> arguments);
        System.Threading.Tasks.ValueTask<RabbitMQ.Client.QueueDeclareOk> QueueDeclareAsync(string queue, bool passive, bool durable, bool exclusive, bool autoDelete, System.Collections.Generic.IDictionary<string, object> arguments);
        void QueueDeclareNoWait(string queue, bool durable, bool exclusive, bool autoDelete, System.Collections.Generic.IDictionary<string, object> arguments);
        RabbitMQ.Client.QueueDeclareOk QueueDeclarePassive(string queue);
        uint QueueDelete(string queue, bool ifUnused, bool ifEmpty);
        System.Threading.Tasks.ValueTask<uint> QueueDeleteAsync(string queue, bool ifUnused, bool ifEmpty);
        void QueueDeleteNoWait(string queue, bool ifUnused, bool ifEmpty);
        uint QueuePurge(string queue);
        void QueueUnbind(string queue, string exchange, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments);
        void TxCommit();
        void TxRollback();
        void TxSelect();
        System.Threading.Tasks.Task<bool> WaitForConfirmsAsync(System.Threading.CancellationToken token = default);
        System.Threading.Tasks.Task WaitForConfirmsOrDieAsync(System.Threading.CancellationToken token = default);
    }
    public static class IChannelExtensions
    {
        public static void Abort(this RabbitMQ.Client.IChannel channel) { }
        public static void Abort(this RabbitMQ.Client.IChannel channel, ushort replyCode, string replyText) { }
        public static string BasicConsume(this RabbitMQ.Client.IChannel channel, string queue, bool autoAck, RabbitMQ.Client.IBasicConsumer consumer) { }
        public static string BasicConsume(this RabbitMQ.Client.IChannel channel, string queue, bool autoAck, string consumerTag, RabbitMQ.Client.IBasicConsumer consumer) { }
        public static string BasicConsume(this RabbitMQ.Client.IChannel channel, string queue, bool autoAck, string consumerTag, System.Collections.Generic.IDictionary<string, object> arguments, RabbitMQ.Client.IBasicConsumer consumer) { }
        public static string BasicConsume(this RabbitMQ.Client.IChannel channel, RabbitMQ.Client.IBasicConsumer consumer, string queue, bool autoAck = false, string consumerTag = "", bool noLocal = false, bool exclusive = false, System.Collections.Generic.IDictionary<string, object> arguments = null) { }
        public static void BasicPublish(this RabbitMQ.Client.IChannel channel, RabbitMQ.Client.CachedString exchange, RabbitMQ.Client.CachedString routingKey, System.ReadOnlyMemory<byte> body = default, bool mandatory = false) { }
        public static void BasicPublish(this RabbitMQ.Client.IChannel channel, string exchange, string routingKey, System.ReadOnlyMemory<byte> body = default, bool mandatory = false) { }
        public static void BasicPublish<T>(this RabbitMQ.Client.IChannel channel, RabbitMQ.Client.PublicationAddress addr, in T basicProperties, System.ReadOnlyMemory<byte> body)
            where T : RabbitMQ.Client.IReadOnlyBasicProperties, RabbitMQ.Client.IAmqpHeader { }
        public static System.Threading.Tasks.ValueTask BasicPublishAsync(this RabbitMQ.Client.IChannel channel, RabbitMQ.Client.CachedString exchange, RabbitMQ.Client.CachedString routingKey, System.ReadOnlyMemory<byte> body = default, bool mandatory = false) { }
        public static System.Threading.Tasks.ValueTask BasicPublishAsync(this RabbitMQ.Client.IChannel channel, string exchange, string routingKey, System.ReadOnlyMemory<byte> body = default, bool mandatory = false) { }
        public static void Close(this RabbitMQ.Client.IChannel channel) { }
        public static void Close(this RabbitMQ.Client.IChannel channel, ushort replyCode, string replyText) { }
        public static void ExchangeBind(this RabbitMQ.Client.IChannel channel, string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments = null) { }
        public static void ExchangeBindNoWait(this RabbitMQ.Client.IChannel channel, string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments = null) { }
        public static void ExchangeDeclare(this RabbitMQ.Client.IChannel channel, string exchange, string type, bool durable = false, bool autoDelete = false, System.Collections.Generic.IDictionary<string, object> arguments = null) { }
        public static void ExchangeDeclareNoWait(this RabbitMQ.Client.IChannel channel, string exchange, string type, bool durable = false, bool autoDelete = false, System.Collections.Generic.IDictionary<string, object> arguments = null) { }
        public static void ExchangeDelete(this RabbitMQ.Client.IChannel channel, string exchange, bool ifUnused = false) { }
        public static void ExchangeDeleteNoWait(this RabbitMQ.Client.IChannel channel, string exchange, bool ifUnused = false) { }
        public static void ExchangeUnbind(this RabbitMQ.Client.IChannel channel, string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments = null) { }
        public static void QueueBind(this RabbitMQ.Client.IChannel channel, string queue, string exchange, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments = null) { }
        public static RabbitMQ.Client.QueueDeclareOk QueueDeclare(this RabbitMQ.Client.IChannel channel, string queue = "", bool durable = false, bool exclusive = true, bool autoDelete = true, System.Collections.Generic.IDictionary<string, object> arguments = null) { }
        public static uint QueueDelete(this RabbitMQ.Client.IChannel channel, string queue, bool ifUnused = false, bool ifEmpty = false) { }
        public static void QueueDeleteNoWait(this RabbitMQ.Client.IChannel channel, string queue, bool ifUnused = false, bool ifEmpty = false) { }
        public static void QueueUnbind(this RabbitMQ.Client.IChannel channel, string queue, string exchange, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments = null) { }
    }
    public interface IConnection : RabbitMQ.Client.INetworkConnection, System.IDisposable
    {
        ushort ChannelMax { get; }
        System.Collections.Generic.IDictionary<string, object> ClientProperties { get; }
        string ClientProvidedName { get; }
        RabbitMQ.Client.ShutdownEventArgs CloseReason { get; }
        RabbitMQ.Client.AmqpTcpEndpoint Endpoint { get; }
        uint FrameMax { get; }
        System.TimeSpan Heartbeat { get; }
        bool IsOpen { get; }
        RabbitMQ.Client.IProtocol Protocol { get; }
        System.Collections.Generic.IDictionary<string, object> ServerProperties { get; }
        System.Collections.Generic.IList<RabbitMQ.Client.ShutdownReportEntry> ShutdownReport { get; }
        event System.EventHandler<RabbitMQ.Client.Events.CallbackExceptionEventArgs> CallbackException;
        event System.EventHandler<RabbitMQ.Client.Events.ConnectionBlockedEventArgs> ConnectionBlocked;
        event System.EventHandler<RabbitMQ.Client.Events.ConnectionRecoveryErrorEventArgs> ConnectionRecoveryError;
        event System.EventHandler<RabbitMQ.Client.ShutdownEventArgs> ConnectionShutdown;
        event System.EventHandler<System.EventArgs> ConnectionUnblocked;
        event System.EventHandler<RabbitMQ.Client.Events.ConsumerTagChangedAfterRecoveryEventArgs> ConsumerTagChangeAfterRecovery;
        event System.EventHandler<RabbitMQ.Client.Events.QueueNameChangedAfterRecoveryEventArgs> QueueNameChangeAfterRecovery;
        event System.EventHandler<RabbitMQ.Client.Events.RecoveringConsumerEventArgs> RecoveringConsumer;
        event System.EventHandler<System.EventArgs> RecoverySucceeded;
        void Close(ushort reasonCode, string reasonText, System.TimeSpan timeout, bool abort);
        RabbitMQ.Client.IChannel CreateChannel();
        void UpdateSecret(string newSecret, string reason);
    }
    public static class IConnectionExtensions
    {
        public static void Abort(this RabbitMQ.Client.IConnection connection) { }
        public static void Abort(this RabbitMQ.Client.IConnection connection, System.TimeSpan timeout) { }
        public static void Abort(this RabbitMQ.Client.IConnection connection, ushort reasonCode, string reasonText) { }
        public static void Abort(this RabbitMQ.Client.IConnection connection, ushort reasonCode, string reasonText, System.TimeSpan timeout) { }
        public static void Close(this RabbitMQ.Client.IConnection connection) { }
        public static void Close(this RabbitMQ.Client.IConnection connection, System.TimeSpan timeout) { }
        public static void Close(this RabbitMQ.Client.IConnection connection, ushort reasonCode, string reasonText) { }
        public static void Close(this RabbitMQ.Client.IConnection connection, ushort reasonCode, string reasonText, System.TimeSpan timeout) { }
    }
    public interface IConnectionFactory
    {
        System.Collections.Generic.IDictionary<string, object> ClientProperties { get; set; }
        string ClientProvidedName { get; set; }
        int ConsumerDispatchConcurrency { get; set; }
        System.TimeSpan ContinuationTimeout { get; set; }
        RabbitMQ.Client.ICredentialsProvider CredentialsProvider { get; set; }
        RabbitMQ.Client.ICredentialsRefresher CredentialsRefresher { get; set; }
        bool DispatchConsumersAsync { get; set; }
        System.TimeSpan HandshakeContinuationTimeout { get; set; }
        string Password { get; set; }
        ushort RequestedChannelMax { get; set; }
        uint RequestedFrameMax { get; set; }
        System.TimeSpan RequestedHeartbeat { get; set; }
        System.Uri Uri { get; set; }
        string UserName { get; set; }
        string VirtualHost { get; set; }
        RabbitMQ.Client.IAuthMechanismFactory AuthMechanismFactory(System.Collections.Generic.IList<string> mechanismNames);
        RabbitMQ.Client.IConnection CreateConnection();
        RabbitMQ.Client.IConnection CreateConnection(System.Collections.Generic.IList<RabbitMQ.Client.AmqpTcpEndpoint> endpoints);
        RabbitMQ.Client.IConnection CreateConnection(System.Collections.Generic.IList<string> hostnames);
        RabbitMQ.Client.IConnection CreateConnection(string clientProvidedName);
        RabbitMQ.Client.IConnection CreateConnection(System.Collections.Generic.IList<RabbitMQ.Client.AmqpTcpEndpoint> endpoints, string clientProvidedName);
        RabbitMQ.Client.IConnection CreateConnection(System.Collections.Generic.IList<string> hostnames, string clientProvidedName);
    }
    public interface ICredentialsProvider
    {
        string Name { get; }
        string Password { get; }
        string UserName { get; }
        System.TimeSpan? ValidUntil { get; }
        void Refresh();
    }
    public interface ICredentialsRefresher
    {
        RabbitMQ.Client.ICredentialsProvider Register(RabbitMQ.Client.ICredentialsProvider provider, RabbitMQ.Client.ICredentialsRefresher.NotifyCredentialRefreshed callback);
        bool Unregister(RabbitMQ.Client.ICredentialsProvider provider);
        public delegate void NotifyCredentialRefreshed(bool succesfully);
    }
    public interface IEndpointResolver
    {
        System.Collections.Generic.IEnumerable<RabbitMQ.Client.AmqpTcpEndpoint> All();
    }
    public interface INetworkConnection
    {
        int LocalPort { get; }
        int RemotePort { get; }
    }
    public interface IProtocol
    {
        string ApiName { get; }
        int DefaultPort { get; }
        int MajorVersion { get; }
        int MinorVersion { get; }
        int Revision { get; }
    }
    public interface IReadOnlyBasicProperties
    {
        string? AppId { get; }
        string? ClusterId { get; }
        string? ContentEncoding { get; }
        string? ContentType { get; }
        string? CorrelationId { get; }
        RabbitMQ.Client.DeliveryModes DeliveryMode { get; }
        string? Expiration { get; }
        System.Collections.Generic.IDictionary<string, object?>? Headers { get; }
        string? MessageId { get; }
        bool Persistent { get; }
        byte Priority { get; }
        string? ReplyTo { get; }
        RabbitMQ.Client.PublicationAddress? ReplyToAddress { get; }
        RabbitMQ.Client.AmqpTimestamp Timestamp { get; }
        string? Type { get; }
        string? UserId { get; }
        bool IsAppIdPresent();
        bool IsClusterIdPresent();
        bool IsContentEncodingPresent();
        bool IsContentTypePresent();
        bool IsCorrelationIdPresent();
        bool IsDeliveryModePresent();
        bool IsExpirationPresent();
        bool IsHeadersPresent();
        bool IsMessageIdPresent();
        bool IsPriorityPresent();
        bool IsReplyToPresent();
        bool IsTimestampPresent();
        bool IsTypePresent();
        bool IsUserIdPresent();
    }
    public interface IRecordedBinding
    {
        System.Collections.Generic.IDictionary<string, object>? Arguments { get; }
        string Destination { get; }
        string RoutingKey { get; }
        string Source { get; }
    }
    public interface IRecordedConsumer
    {
        System.Collections.Generic.IDictionary<string, object>? Arguments { get; }
        bool AutoAck { get; }
        string ConsumerTag { get; }
        bool Exclusive { get; }
        string Queue { get; }
    }
    public interface IRecordedExchange
    {
        System.Collections.Generic.IDictionary<string, object>? Arguments { get; }
        bool AutoDelete { get; }
        bool Durable { get; }
        string Name { get; }
        string Type { get; }
    }
    public interface IRecordedQueue
    {
        System.Collections.Generic.IDictionary<string, object>? Arguments { get; }
        bool AutoDelete { get; }
        bool Durable { get; }
        bool Exclusive { get; }
        bool IsServerNamed { get; }
        string Name { get; }
    }
    public interface IRecoverable
    {
        event System.EventHandler<System.EventArgs> Recovery;
    }
    public interface ITcpClient : System.IDisposable
    {
        System.Net.Sockets.Socket Client { get; }
        bool Connected { get; }
        System.TimeSpan ReceiveTimeout { get; set; }
        void Close();
        System.Threading.Tasks.Task ConnectAsync(System.Net.IPAddress host, int port);
        System.Threading.Tasks.Task ConnectAsync(string host, int port);
        System.Net.Sockets.NetworkStream GetStream();
    }
    public class PlainMechanism : RabbitMQ.Client.IAuthMechanism
    {
        public PlainMechanism() { }
        public byte[] handleChallenge(byte[] challenge, RabbitMQ.Client.ConnectionConfig config) { }
    }
    public class PlainMechanismFactory : RabbitMQ.Client.IAuthMechanismFactory
    {
        public PlainMechanismFactory() { }
        public string Name { get; }
        public RabbitMQ.Client.IAuthMechanism GetInstance() { }
    }
    public static class Protocols
    {
        public static RabbitMQ.Client.IProtocol AMQP_0_9_1 { get; }
        public static RabbitMQ.Client.IProtocol DefaultProtocol { get; }
    }
    public class PublicationAddress
    {
        public static readonly System.Text.RegularExpressions.Regex PSEUDO_URI_PARSER;
        public PublicationAddress(string exchangeType, string exchangeName, string routingKey) { }
        public string ExchangeName { get; }
        public string ExchangeType { get; }
        public string RoutingKey { get; }
        public override string ToString() { }
        public static RabbitMQ.Client.PublicationAddress Parse(string uriLikeString) { }
        public static bool TryParse(string uriLikeString, out RabbitMQ.Client.PublicationAddress result) { }
    }
    public class QueueDeclareOk
    {
        public QueueDeclareOk(string queueName, uint messageCount, uint consumerCount) { }
        public uint ConsumerCount { get; }
        public uint MessageCount { get; }
        public string QueueName { get; }
        public static string op_Implicit(RabbitMQ.Client.QueueDeclareOk declareOk) { }
    }
    public readonly struct ReadOnlyBasicProperties : RabbitMQ.Client.IReadOnlyBasicProperties
    {
        public ReadOnlyBasicProperties(System.ReadOnlySpan<byte> span) { }
        public string? AppId { get; }
        public string? ClusterId { get; }
        public string? ContentEncoding { get; }
        public string? ContentType { get; }
        public string? CorrelationId { get; }
        public RabbitMQ.Client.DeliveryModes DeliveryMode { get; }
        public string? Expiration { get; }
        public System.Collections.Generic.IDictionary<string, object?>? Headers { get; }
        public string? MessageId { get; }
        public bool Persistent { get; }
        public byte Priority { get; }
        public string? ReplyTo { get; }
        public RabbitMQ.Client.PublicationAddress? ReplyToAddress { get; }
        public RabbitMQ.Client.AmqpTimestamp Timestamp { get; }
        public string? Type { get; }
        public string? UserId { get; }
        public bool IsAppIdPresent() { }
        public bool IsClusterIdPresent() { }
        public bool IsContentEncodingPresent() { }
        public bool IsContentTypePresent() { }
        public bool IsCorrelationIdPresent() { }
        public bool IsDeliveryModePresent() { }
        public bool IsExpirationPresent() { }
        public bool IsHeadersPresent() { }
        public bool IsMessageIdPresent() { }
        public bool IsPriorityPresent() { }
        public bool IsReplyToPresent() { }
        public bool IsTimestampPresent() { }
        public bool IsTypePresent() { }
        public bool IsUserIdPresent() { }
    }
    public class ShutdownEventArgs : System.EventArgs
    {
        public ShutdownEventArgs(RabbitMQ.Client.ShutdownInitiator initiator, ushort replyCode, string replyText, object cause = null) { }
        public ShutdownEventArgs(RabbitMQ.Client.ShutdownInitiator initiator, ushort replyCode, string replyText, ushort classId, ushort methodId, object cause = null) { }
        public object Cause { get; }
        public ushort ClassId { get; }
        public RabbitMQ.Client.ShutdownInitiator Initiator { get; }
        public ushort MethodId { get; }
        public ushort ReplyCode { get; }
        public string ReplyText { get; }
        public override string ToString() { }
    }
    public enum ShutdownInitiator
    {
        Application = 0,
        Library = 1,
        Peer = 2,
    }
    public class ShutdownReportEntry
    {
        public ShutdownReportEntry(string description, System.Exception exception) { }
        public string Description { get; set; }
        public System.Exception Exception { get; set; }
        public override string ToString() { }
    }
    public class SslOption
    {
        public SslOption() { }
        public SslOption(string serverName, string certificatePath = "", bool enabled = false) { }
        public System.Net.Security.SslPolicyErrors AcceptablePolicyErrors { get; set; }
        public string CertPassphrase { get; set; }
        public string CertPath { get; set; }
        public System.Net.Security.LocalCertificateSelectionCallback CertificateSelectionCallback { get; set; }
        public System.Net.Security.RemoteCertificateValidationCallback CertificateValidationCallback { get; set; }
        public System.Security.Cryptography.X509Certificates.X509CertificateCollection Certs { get; set; }
        public bool CheckCertificateRevocation { get; set; }
        public bool Enabled { get; set; }
        public string ServerName { get; set; }
        public System.Security.Authentication.SslProtocols Version { get; set; }
    }
    public class TimerBasedCredentialRefresher : RabbitMQ.Client.ICredentialsRefresher
    {
        public TimerBasedCredentialRefresher() { }
        public RabbitMQ.Client.ICredentialsProvider Register(RabbitMQ.Client.ICredentialsProvider provider, RabbitMQ.Client.ICredentialsRefresher.NotifyCredentialRefreshed callback) { }
        public bool Unregister(RabbitMQ.Client.ICredentialsProvider provider) { }
    }
    [System.Diagnostics.Tracing.EventSource(Name="TimerBasedCredentialRefresher")]
    public class TimerBasedCredentialRefresherEventSource : System.Diagnostics.Tracing.EventSource
    {
        public TimerBasedCredentialRefresherEventSource() { }
        public static RabbitMQ.Client.TimerBasedCredentialRefresherEventSource Log { get; }
        [System.Diagnostics.Tracing.Event(5)]
        public void RefreshedCredentials(string name, bool succesfully) { }
        [System.Diagnostics.Tracing.Event(1)]
        public void Registered(string name) { }
        [System.Diagnostics.Tracing.Event(3)]
        public void ScheduledTimer(string name, double interval) { }
        [System.Diagnostics.Tracing.Event(4)]
        public void TriggeredTimer(string name) { }
        [System.Diagnostics.Tracing.Event(2)]
        public void Unregistered(string name) { }
    }
    public class TopologyRecoveryExceptionHandler
    {
        public TopologyRecoveryExceptionHandler() { }
        public System.Func<RabbitMQ.Client.IRecordedBinding, System.Exception, bool> BindingRecoveryExceptionCondition { get; set; }
        public System.Action<RabbitMQ.Client.IRecordedBinding, System.Exception, RabbitMQ.Client.IConnection> BindingRecoveryExceptionHandler { get; set; }
        public System.Func<RabbitMQ.Client.IRecordedConsumer, System.Exception, bool> ConsumerRecoveryExceptionCondition { get; set; }
        public System.Action<RabbitMQ.Client.IRecordedConsumer, System.Exception, RabbitMQ.Client.IConnection> ConsumerRecoveryExceptionHandler { get; set; }
        public System.Func<RabbitMQ.Client.IRecordedExchange, System.Exception, bool> ExchangeRecoveryExceptionCondition { get; set; }
        public System.Action<RabbitMQ.Client.IRecordedExchange, System.Exception, RabbitMQ.Client.IConnection> ExchangeRecoveryExceptionHandler { get; set; }
        public System.Func<RabbitMQ.Client.IRecordedQueue, System.Exception, bool> QueueRecoveryExceptionCondition { get; set; }
        public System.Action<RabbitMQ.Client.IRecordedQueue, System.Exception, RabbitMQ.Client.IConnection> QueueRecoveryExceptionHandler { get; set; }
    }
    public class TopologyRecoveryFilter
    {
        public TopologyRecoveryFilter() { }
        public System.Func<RabbitMQ.Client.IRecordedBinding, bool> BindingFilter { get; set; }
        public System.Func<RabbitMQ.Client.IRecordedConsumer, bool> ConsumerFilter { get; set; }
        public System.Func<RabbitMQ.Client.IRecordedExchange, bool> ExchangeFilter { get; set; }
        public System.Func<RabbitMQ.Client.IRecordedQueue, bool> QueueFilter { get; set; }
    }
}
namespace RabbitMQ.Client.Events
{
    public delegate System.Threading.Tasks.Task AsyncEventHandler<in TEvent>(object sender, TEvent @event);
    public class AsyncEventingBasicConsumer : RabbitMQ.Client.AsyncDefaultBasicConsumer
    {
        public AsyncEventingBasicConsumer(RabbitMQ.Client.IChannel channel) { }
        public event RabbitMQ.Client.Events.AsyncEventHandler<RabbitMQ.Client.Events.BasicDeliverEventArgs> Received;
        public event RabbitMQ.Client.Events.AsyncEventHandler<RabbitMQ.Client.Events.ConsumerEventArgs> Registered;
        public event RabbitMQ.Client.Events.AsyncEventHandler<RabbitMQ.Client.ShutdownEventArgs> Shutdown;
        public event RabbitMQ.Client.Events.AsyncEventHandler<RabbitMQ.Client.Events.ConsumerEventArgs> Unregistered;
        public override System.Threading.Tasks.Task HandleBasicCancelOk(string consumerTag) { }
        public override System.Threading.Tasks.Task HandleBasicConsumeOk(string consumerTag) { }
        public override System.Threading.Tasks.Task HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, in RabbitMQ.Client.ReadOnlyBasicProperties properties, System.ReadOnlyMemory<byte> body) { }
        public override System.Threading.Tasks.Task HandleChannelShutdown(object channel, RabbitMQ.Client.ShutdownEventArgs reason) { }
    }
    public abstract class BaseExceptionEventArgs : System.EventArgs
    {
        protected BaseExceptionEventArgs(System.Collections.Generic.IDictionary<string, object> detail, System.Exception exception) { }
        public System.Collections.Generic.IDictionary<string, object> Detail { get; }
        public System.Exception Exception { get; }
    }
    public class BasicAckEventArgs : System.EventArgs
    {
        public BasicAckEventArgs() { }
        public ulong DeliveryTag { get; set; }
        public bool Multiple { get; set; }
    }
    public class BasicDeliverEventArgs : System.EventArgs
    {
        public BasicDeliverEventArgs() { }
        public BasicDeliverEventArgs(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, in RabbitMQ.Client.ReadOnlyBasicProperties properties, System.ReadOnlyMemory<byte> body) { }
        public RabbitMQ.Client.ReadOnlyBasicProperties BasicProperties { get; set; }
        public System.ReadOnlyMemory<byte> Body { get; set; }
        public string ConsumerTag { get; set; }
        public ulong DeliveryTag { get; set; }
        public string Exchange { get; set; }
        public bool Redelivered { get; set; }
        public string RoutingKey { get; set; }
    }
    public class BasicNackEventArgs : System.EventArgs
    {
        public BasicNackEventArgs() { }
        public ulong DeliveryTag { get; set; }
        public bool Multiple { get; set; }
        public bool Requeue { get; set; }
    }
    public class BasicReturnEventArgs : System.EventArgs
    {
        public BasicReturnEventArgs() { }
        public RabbitMQ.Client.ReadOnlyBasicProperties BasicProperties { get; set; }
        public System.ReadOnlyMemory<byte> Body { get; set; }
        public string Exchange { get; set; }
        public ushort ReplyCode { get; set; }
        public string ReplyText { get; set; }
        public string RoutingKey { get; set; }
    }
    public class CallbackExceptionEventArgs : RabbitMQ.Client.Events.BaseExceptionEventArgs
    {
        public CallbackExceptionEventArgs(System.Collections.Generic.IDictionary<string, object> detail, System.Exception exception) { }
        public static RabbitMQ.Client.Events.CallbackExceptionEventArgs Build(System.Exception e, string context) { }
        public static RabbitMQ.Client.Events.CallbackExceptionEventArgs Build(System.Exception e, string context, object consumer) { }
    }
    public class ConnectionBlockedEventArgs : System.EventArgs
    {
        public ConnectionBlockedEventArgs(string reason) { }
        public string Reason { get; }
    }
    public sealed class ConnectionRecoveryErrorEventArgs : System.EventArgs
    {
        public ConnectionRecoveryErrorEventArgs(System.Exception ex) { }
        public System.Exception Exception { get; }
    }
    public class ConsumerEventArgs : System.EventArgs
    {
        public ConsumerEventArgs(string[] consumerTags) { }
        public string[] ConsumerTags { get; }
    }
    public sealed class ConsumerTagChangedAfterRecoveryEventArgs : System.EventArgs
    {
        public ConsumerTagChangedAfterRecoveryEventArgs(string tagBefore, string tagAfter) { }
        public string TagAfter { get; }
        public string TagBefore { get; }
    }
    public class EventingBasicConsumer : RabbitMQ.Client.DefaultBasicConsumer
    {
        public EventingBasicConsumer(RabbitMQ.Client.IChannel channel) { }
        public event System.EventHandler<RabbitMQ.Client.Events.BasicDeliverEventArgs> Received;
        public event System.EventHandler<RabbitMQ.Client.Events.ConsumerEventArgs> Registered;
        public event System.EventHandler<RabbitMQ.Client.ShutdownEventArgs> Shutdown;
        public event System.EventHandler<RabbitMQ.Client.Events.ConsumerEventArgs> Unregistered;
        public override void HandleBasicCancelOk(string consumerTag) { }
        public override void HandleBasicConsumeOk(string consumerTag) { }
        public override void HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, in RabbitMQ.Client.ReadOnlyBasicProperties properties, System.ReadOnlyMemory<byte> body) { }
        public override void HandleChannelShutdown(object channel, RabbitMQ.Client.ShutdownEventArgs reason) { }
    }
    public class FlowControlEventArgs : System.EventArgs
    {
        public FlowControlEventArgs(bool active) { }
        public bool Active { get; }
    }
    public sealed class QueueNameChangedAfterRecoveryEventArgs : System.EventArgs
    {
        public QueueNameChangedAfterRecoveryEventArgs(string nameBefore, string nameAfter) { }
        public string NameAfter { get; }
        public string NameBefore { get; }
    }
    public class RecoveringConsumerEventArgs
    {
        public RecoveringConsumerEventArgs(string consumerTag, System.Collections.Generic.IDictionary<string, object> consumerArguments) { }
        public System.Collections.Generic.IDictionary<string, object> ConsumerArguments { get; }
        public string ConsumerTag { get; }
    }
}
namespace RabbitMQ.Client.Exceptions
{
    [System.Serializable]
    public class AlreadyClosedException : RabbitMQ.Client.Exceptions.OperationInterruptedException
    {
        public AlreadyClosedException(RabbitMQ.Client.ShutdownEventArgs reason) { }
    }
    [System.Serializable]
    public class AuthenticationFailureException : RabbitMQ.Client.Exceptions.PossibleAuthenticationFailureException
    {
        public AuthenticationFailureException(string msg) { }
    }
    [System.Serializable]
    public class BrokerUnreachableException : System.IO.IOException
    {
        public BrokerUnreachableException(System.Exception Inner) { }
    }
    [System.Serializable]
    public class ChannelAllocationException : RabbitMQ.Client.Exceptions.ProtocolViolationException
    {
        public ChannelAllocationException() { }
        public ChannelAllocationException(int channel) { }
        public int Channel { get; }
    }
    [System.Serializable]
    public class ConnectFailureException : RabbitMQ.Client.Exceptions.ProtocolViolationException
    {
        public ConnectFailureException(string msg, System.Exception inner) { }
    }
    public abstract class HardProtocolException : RabbitMQ.Client.Exceptions.ProtocolException
    {
        protected readonly bool _canShutdownCleanly;
        protected HardProtocolException(string message) { }
        protected HardProtocolException(string message, bool canShutdownCleanly) { }
        public bool CanShutdownCleanly { get; }
    }
    public class MalformedFrameException : RabbitMQ.Client.Exceptions.HardProtocolException
    {
        public MalformedFrameException(string message) { }
        public MalformedFrameException(string message, bool canShutdownCleanly) { }
        public override ushort ReplyCode { get; }
    }
    [System.Serializable]
    public class OperationInterruptedException : RabbitMQ.Client.Exceptions.RabbitMQClientException
    {
        protected OperationInterruptedException() { }
        public OperationInterruptedException(RabbitMQ.Client.ShutdownEventArgs reason) { }
        protected OperationInterruptedException(string message) { }
        public OperationInterruptedException(RabbitMQ.Client.ShutdownEventArgs reason, string prefix) { }
        protected OperationInterruptedException(string message, System.Exception inner) { }
        public RabbitMQ.Client.ShutdownEventArgs ShutdownReason { get; set; }
    }
    [System.Serializable]
    public class PacketNotRecognizedException : RabbitMQ.Client.Exceptions.RabbitMQClientException
    {
        public PacketNotRecognizedException(int transportHigh, int transportLow, int serverMajor, int serverMinor) { }
        public int ServerMajor { get; }
        public int ServerMinor { get; }
        public int TransportHigh { get; }
        public int TransportLow { get; }
    }
    [System.Serializable]
    public class PossibleAuthenticationFailureException : RabbitMQ.Client.Exceptions.RabbitMQClientException
    {
        public PossibleAuthenticationFailureException(string msg) { }
        public PossibleAuthenticationFailureException(string msg, System.Exception inner) { }
    }
    public abstract class ProtocolException : RabbitMQ.Client.Exceptions.RabbitMQClientException
    {
        protected ProtocolException(string message) { }
        public abstract ushort ReplyCode { get; }
        public virtual RabbitMQ.Client.ShutdownEventArgs ShutdownReason { get; }
    }
    [System.Serializable]
    public class ProtocolVersionMismatchException : RabbitMQ.Client.Exceptions.ProtocolViolationException
    {
        public ProtocolVersionMismatchException(int clientMajor, int clientMinor, int serverMajor, int serverMinor) { }
        public int ClientMajor { get; }
        public int ClientMinor { get; }
        public int ServerMajor { get; }
        public int ServerMinor { get; }
    }
    [System.Serializable]
    public class ProtocolViolationException : RabbitMQ.Client.Exceptions.RabbitMQClientException
    {
        public ProtocolViolationException() { }
        public ProtocolViolationException(string message) { }
        public ProtocolViolationException(string message, System.Exception inner) { }
    }
    [System.Serializable]
    public abstract class RabbitMQClientException : System.Exception
    {
        protected RabbitMQClientException() { }
        protected RabbitMQClientException(string message) { }
        protected RabbitMQClientException(string message, System.Exception innerException) { }
    }
    public class SyntaxErrorException : RabbitMQ.Client.Exceptions.HardProtocolException
    {
        public SyntaxErrorException(string message) { }
        public override ushort ReplyCode { get; }
    }
    public class TopologyRecoveryException : RabbitMQ.Client.Exceptions.RabbitMQClientException
    {
        public TopologyRecoveryException(string message, System.Exception cause) { }
    }
    public class UnexpectedFrameException : RabbitMQ.Client.Exceptions.HardProtocolException
    {
        public override ushort ReplyCode { get; }
    }
    [System.Serializable]
    public class UnexpectedMethodException : RabbitMQ.Client.Exceptions.ProtocolViolationException
    {
        public ushort ExpectedProtocolClassId { get; }
        public ushort ExpectedProtocolMethodId { get; }
        public string ExpectedProtocolMethodName { get; }
        public ushort ProtocolClassId { get; }
        public ushort ProtocolMethodId { get; }
        public string ProtocolMethodName { get; }
    }
    public class UnknownClassOrMethodException : RabbitMQ.Client.Exceptions.HardProtocolException
    {
        public UnknownClassOrMethodException(ushort classId, ushort methodId) { }
        public ushort ClassId { get; }
        public ushort MethodId { get; }
        public override ushort ReplyCode { get; }
        public override string ToString() { }
    }
    [System.Serializable]
    public class WireFormattingException : RabbitMQ.Client.Exceptions.ProtocolViolationException
    {
        public WireFormattingException(string message) { }
        public WireFormattingException(string message, object offender) { }
        public object Offender { get; }
    }
}
namespace RabbitMQ.Client.Logging
{
    [System.Diagnostics.Tracing.EventData]
    public class RabbitMqExceptionDetail
    {
        public RabbitMqExceptionDetail(System.Collections.Generic.IDictionary<string, object> ex) { }
        public RabbitMqExceptionDetail(System.Exception ex) { }
        public string InnerException { get; }
        public string Message { get; }
        public string StackTrace { get; }
        public string Type { get; }
        public override string ToString() { }
    }
}
// Autogenerated code. Do not edit.

// This source code is dual-licensed under the Apache License, version
// 2.0, and the Mozilla Public License, version 1.1.
//
// The APL v2.0:
//
//---------------------------------------------------------------------------
//   Copyright (c) 2007-2020 VMware, Inc.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       https://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//---------------------------------------------------------------------------
//
// The MPL v1.1:
//
//---------------------------------------------------------------------------
//   The contents of this file are subject to the Mozilla Public License
//   Version 1.1 (the "License"); you may not use this file except in
//   compliance with the License. You may obtain a copy of the License at
//   https://www.rabbitmq.com/mpl.html
//
//   Software distributed under the License is distributed on an "AS IS"
//   basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//   License for the specific language governing rights and limitations
//   under the License.
//
//   The Original Code is RabbitMQ.
//
//   The Initial Developer of the Original Code is Pivotal Software, Inc.
//   Copyright (c) 2007-2020 VMware, Inc.  All rights reserved.
//---------------------------------------------------------------------------

using System.Collections.Generic;
using System.Text;

using RabbitMQ.Client.Impl;
namespace RabbitMQ.Client.Framing.Impl
{
    /// <summary>Autogenerated type. Private implementation class - do not use directly.</summary>
    internal sealed class ConnectionStart : Client.Impl.MethodBase, IConnectionStart
    {

        public byte _versionMajor;
        public byte _versionMinor;
        public IDictionary<string, object> _serverProperties;
        public byte[] _mechanisms;
        public byte[] _locales;

        byte IConnectionStart.VersionMajor => _versionMajor;
        byte IConnectionStart.VersionMinor => _versionMinor;
        IDictionary<string, object> IConnectionStart.ServerProperties => _serverProperties;
        byte[] IConnectionStart.Mechanisms => _mechanisms;
        byte[] IConnectionStart.Locales => _locales;

        public ConnectionStart() { }
        public ConnectionStart(byte @VersionMajor, byte @VersionMinor, IDictionary<string, object> @ServerProperties, byte[] @Mechanisms, byte[] @Locales)
        {
            _versionMajor = @VersionMajor;
            _versionMinor = @VersionMinor;
            _serverProperties = @ServerProperties;
            _mechanisms = @Mechanisms;
            _locales = @Locales;
        }

        public override uint ProtocolCommandId => MethodConstants.ConnectionStart;
        public override string ProtocolMethodName => "connection.start";
        public override bool HasContent => false;

        public override void ReadArgumentsFrom(ref Client.Impl.MethodArgumentReader reader)
        {
            _versionMajor = reader.ReadOctet();
            _versionMinor = reader.ReadOctet();
            _serverProperties = reader.ReadTable();
            _mechanisms = reader.ReadLongstr();
            _locales = reader.ReadLongstr();
        }

        public override void WriteArgumentsTo(ref Client.Impl.MethodArgumentWriter writer)
        {
            writer.WriteOctet(_versionMajor);
            writer.WriteOctet(_versionMinor);
            writer.WriteTable(_serverProperties);
            writer.WriteLongstr(_mechanisms);
            writer.WriteLongstr(_locales);
        }

        public override int GetRequiredBufferSize()
        {
            int bufferSize = 0;
            bufferSize++; // _versionMajor in bytes
            bufferSize++; // _versionMinor in bytes
            bufferSize += WireFormatting.GetTableByteCount(_serverProperties); // _serverProperties in bytes
            bufferSize += 4 + _mechanisms.Length; // _mechanisms in bytes
            bufferSize += 4 + _locales.Length; // _locales in bytes
            return bufferSize;
        }

        public override void AppendArgumentDebugStringTo(StringBuilder sb)
        {
            sb.Append("(");
            sb.Append(_versionMajor); sb.Append(",");
            sb.Append(_versionMinor); sb.Append(",");
            sb.Append(_serverProperties); sb.Append(",");
            sb.Append(_mechanisms); sb.Append(",");
            sb.Append(_locales);
            sb.Append(")");
        }
    }
}

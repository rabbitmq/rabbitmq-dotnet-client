// Autogenerated code. Do not edit.

// This source code is dual-licensed under the Apache License, version
// 2.0, and the Mozilla Public License, version 1.1.
//
// The APL v2.0:
//
//---------------------------------------------------------------------------
//   Copyright (c) 2007-2020 VMware, Inc.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       https://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//---------------------------------------------------------------------------
//
// The MPL v1.1:
//
//---------------------------------------------------------------------------
//   The contents of this file are subject to the Mozilla Public License
//   Version 1.1 (the "License"); you may not use this file except in
//   compliance with the License. You may obtain a copy of the License at
//   https://www.rabbitmq.com/mpl.html
//
//   Software distributed under the License is distributed on an "AS IS"
//   basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//   License for the specific language governing rights and limitations
//   under the License.
//
//   The Original Code is RabbitMQ.
//
//   The Initial Developer of the Original Code is Pivotal Software, Inc.
//   Copyright (c) 2007-2020 VMware, Inc.  All rights reserved.
//---------------------------------------------------------------------------

using System.Text;
namespace RabbitMQ.Client.Framing.Impl
{
    /// <summary>Autogenerated type. Private implementation class - do not use directly.</summary>
    internal sealed class BasicReturn : Client.Impl.MethodBase, IBasicReturn
    {

        public ushort _replyCode;
        public string _replyText;
        public string _exchange;
        public string _routingKey;

        ushort IBasicReturn.ReplyCode => _replyCode;
        string IBasicReturn.ReplyText => _replyText;
        string IBasicReturn.Exchange => _exchange;
        string IBasicReturn.RoutingKey => _routingKey;

        public BasicReturn() { }
        public BasicReturn(ushort @ReplyCode, string @ReplyText, string @Exchange, string @RoutingKey)
        {
            _replyCode = @ReplyCode;
            _replyText = @ReplyText;
            _exchange = @Exchange;
            _routingKey = @RoutingKey;
        }

        public override uint ProtocolCommandId => MethodConstants.BasicReturn;
        public override string ProtocolMethodName => "basic.return";
        public override bool HasContent => true;

        public override void ReadArgumentsFrom(ref Client.Impl.MethodArgumentReader reader)
        {
            _replyCode = reader.ReadShort();
            _replyText = reader.ReadShortstr();
            _exchange = reader.ReadShortstr();
            _routingKey = reader.ReadShortstr();
        }

        public override void WriteArgumentsTo(ref Client.Impl.MethodArgumentWriter writer)
        {
            writer.WriteShort(_replyCode);
            writer.WriteShortstr(_replyText);
            writer.WriteShortstr(_exchange);
            writer.WriteShortstr(_routingKey);
        }

        public override int GetRequiredBufferSize()
        {
            int bufferSize = 0;
            bufferSize += 2; // _replyCode in bytes
            bufferSize += 1 + Encoding.UTF8.GetByteCount(_replyText); // _replyText in bytes
            bufferSize += 1 + Encoding.UTF8.GetByteCount(_exchange); // _exchange in bytes
            bufferSize += 1 + Encoding.UTF8.GetByteCount(_routingKey); // _routingKey in bytes
            return bufferSize;
        }

        public override void AppendArgumentDebugStringTo(StringBuilder sb)
        {
            sb.Append("(");
            sb.Append(_replyCode); sb.Append(",");
            sb.Append(_replyText); sb.Append(",");
            sb.Append(_exchange); sb.Append(",");
            sb.Append(_routingKey);
            sb.Append(")");
        }
    }
}

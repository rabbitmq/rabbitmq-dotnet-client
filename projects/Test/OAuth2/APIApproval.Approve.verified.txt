[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"Benchmarks, PublicKey=00240000048000009400000006020000002400005253413100040000010001008d20ec856aeeb8c3153a77faa2d80e6e43b5db93224a20cc7ae384f65f142e89730e2ff0fcc5d578bbe96fa98a7196c77329efdee4579b3814c0789e5a39b51df6edd75b602a33ceabdfcf19a3feb832f31d8254168cd7ba5700dfbca301fbf8db614ba41ba18474de0a5f4c2d51c995bc3636c641c8cbe76f45717bfcb943b5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"Unit, PublicKey=00240000048000009400000006020000002400005253413100040000010001008d20ec856aeeb8c3153a77faa2d80e6e43b5db93224a20cc7ae384f65f142e89730e2ff0fcc5d578bbe96fa98a7196c77329efdee4579b3814c0789e5a39b51df6edd75b602a33ceabdfcf19a3feb832f31d8254168cd7ba5700dfbca301fbf8db614ba41ba18474de0a5f4c2d51c995bc3636c641c8cbe76f45717bfcb943b5")]
namespace RabbitMQ.Client.OAuth2
{
    public interface IOAuth2Client
    {
        RabbitMQ.Client.OAuth2.IToken RefreshToken(RabbitMQ.Client.OAuth2.IToken token);
        RabbitMQ.Client.OAuth2.IToken RequestToken();
    }
    public interface IToken
    {
        string AccessToken { get; }
        System.TimeSpan ExpiresIn { get; }
        string RefreshToken { get; }
        bool hasExpired { get; }
    }
    public class JsonToken
    {
        public JsonToken() { }
        public JsonToken(string access_token, string refresh_token, long expires_in) { }
        public JsonToken(string access_token, string refresh_token, System.TimeSpan expires_in_span) { }
        public string access_token { get; set; }
        public long expires_in { get; set; }
        public string refresh_token { get; set; }
    }
    public class OAuth2ClientBuilder
    {
        public OAuth2ClientBuilder(string clientId, string clientSecret, System.Uri tokenEndpoint) { }
        public RabbitMQ.Client.OAuth2.OAuth2ClientBuilder AddRequestParameter(string param, string paramValue) { }
        public RabbitMQ.Client.OAuth2.IOAuth2Client Build() { }
        public RabbitMQ.Client.OAuth2.OAuth2ClientBuilder SetHttpClientHandler(System.Net.Http.HttpClientHandler handler) { }
        public RabbitMQ.Client.OAuth2.OAuth2ClientBuilder SetScope(string scope) { }
    }
    public class OAuth2ClientCredentialsProvider : RabbitMQ.Client.ICredentialsProvider
    {
        public OAuth2ClientCredentialsProvider(string name, RabbitMQ.Client.OAuth2.IOAuth2Client oAuth2Client) { }
        public string Name { get; }
        public string Password { get; }
        public string UserName { get; }
        public System.TimeSpan? ValidUntil { get; }
        public void Refresh() { }
    }
    public class Token : RabbitMQ.Client.OAuth2.IToken
    {
        public Token(RabbitMQ.Client.OAuth2.JsonToken json) { }
        public string AccessToken { get; }
        public System.TimeSpan ExpiresIn { get; }
        public string RefreshToken { get; }
    }
}
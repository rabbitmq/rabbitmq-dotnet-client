// Autogenerated code. Do not edit.

// This source code is dual-licensed under the Apache License, version
// 2.0, and the Mozilla Public License, version 1.1.
//
// The APL v2.0:
//
//---------------------------------------------------------------------------
//   Copyright (c) 2007-2020 VMware, Inc.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       https://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//---------------------------------------------------------------------------
//
// The MPL v1.1:
//
//---------------------------------------------------------------------------
//   The contents of this file are subject to the Mozilla Public License
//   Version 1.1 (the "License"); you may not use this file except in
//   compliance with the License. You may obtain a copy of the License at
//   https://www.rabbitmq.com/mpl.html
//
//   Software distributed under the License is distributed on an "AS IS"
//   basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//   License for the specific language governing rights and limitations
//   under the License.
//
//   The Original Code is RabbitMQ.
//
//   The Initial Developer of the Original Code is Pivotal Software, Inc.
//   Copyright (c) 2007-2020 VMware, Inc.  All rights reserved.
//---------------------------------------------------------------------------

using System;

using RabbitMQ.Client.Framing.Impl;
namespace RabbitMQ.Client.Framing
{
    internal sealed class Protocol : RabbitMQ.Client.Framing.Impl.ProtocolBase
    {
        ///<summary>Protocol major version (= 0)</summary>
        public override int MajorVersion => 0;

        ///<summary>Protocol minor version (= 9)</summary>
        public override int MinorVersion => 9;

        ///<summary>Protocol revision (= 1)</summary>
        public override int Revision => 1;

        ///<summary>Protocol API name (= :AMQP_0_9_1)</summary>
        public override string ApiName => ":AMQP_0_9_1";

        ///<summary>Default TCP port (= 5672)</summary>
        public override int DefaultPort => 5672;

        internal override Client.Impl.MethodBase DecodeMethodFrom(ReadOnlyMemory<byte> memory)
        {
            ushort classId = Util.NetworkOrderDeserializer.ReadUInt16(memory.Span);
            ushort methodId = Util.NetworkOrderDeserializer.ReadUInt16(memory.Slice(2).Span);
            Client.Impl.MethodBase result = DecodeMethodFrom((uint)(classId << 16) | methodId);
            if (result != null)
            {
                Client.Impl.MethodArgumentReader reader = new Client.Impl.MethodArgumentReader(memory.Slice(4));
                result.ReadArgumentsFrom(ref reader);
                return result;
            }

            throw new Client.Exceptions.UnknownClassOrMethodException(classId, methodId);
        }

        internal Client.Impl.MethodBase DecodeMethodFrom(uint commandId)
        {
            return commandId switch
            {
                MethodConstants.ConnectionStart => new Impl.ConnectionStart(),
                MethodConstants.ConnectionStartOk => new Impl.ConnectionStartOk(),
                MethodConstants.ConnectionSecure => new Impl.ConnectionSecure(),
                MethodConstants.ConnectionSecureOk => new Impl.ConnectionSecureOk(),
                MethodConstants.ConnectionTune => new Impl.ConnectionTune(),
                MethodConstants.ConnectionTuneOk => new Impl.ConnectionTuneOk(),
                MethodConstants.ConnectionOpen => new Impl.ConnectionOpen(),
                MethodConstants.ConnectionOpenOk => new Impl.ConnectionOpenOk(),
                MethodConstants.ConnectionClose => new Impl.ConnectionClose(),
                MethodConstants.ConnectionCloseOk => new Impl.ConnectionCloseOk(),
                MethodConstants.ConnectionBlocked => new Impl.ConnectionBlocked(),
                MethodConstants.ConnectionUnblocked => new Impl.ConnectionUnblocked(),
                MethodConstants.ConnectionUpdateSecret => new Impl.ConnectionUpdateSecret(),
                MethodConstants.ConnectionUpdateSecretOk => new Impl.ConnectionUpdateSecretOk(),
                MethodConstants.ChannelOpen => new Impl.ChannelOpen(),
                MethodConstants.ChannelOpenOk => new Impl.ChannelOpenOk(),
                MethodConstants.ChannelFlow => new Impl.ChannelFlow(),
                MethodConstants.ChannelFlowOk => new Impl.ChannelFlowOk(),
                MethodConstants.ChannelClose => new Impl.ChannelClose(),
                MethodConstants.ChannelCloseOk => new Impl.ChannelCloseOk(),
                MethodConstants.ExchangeDeclare => new Impl.ExchangeDeclare(),
                MethodConstants.ExchangeDeclareOk => new Impl.ExchangeDeclareOk(),
                MethodConstants.ExchangeDelete => new Impl.ExchangeDelete(),
                MethodConstants.ExchangeDeleteOk => new Impl.ExchangeDeleteOk(),
                MethodConstants.ExchangeBind => new Impl.ExchangeBind(),
                MethodConstants.ExchangeBindOk => new Impl.ExchangeBindOk(),
                MethodConstants.ExchangeUnbind => new Impl.ExchangeUnbind(),
                MethodConstants.ExchangeUnbindOk => new Impl.ExchangeUnbindOk(),
                MethodConstants.QueueDeclare => new Impl.QueueDeclare(),
                MethodConstants.QueueDeclareOk => new Impl.QueueDeclareOk(),
                MethodConstants.QueueBind => new Impl.QueueBind(),
                MethodConstants.QueueBindOk => new Impl.QueueBindOk(),
                MethodConstants.QueueUnbind => new Impl.QueueUnbind(),
                MethodConstants.QueueUnbindOk => new Impl.QueueUnbindOk(),
                MethodConstants.QueuePurge => new Impl.QueuePurge(),
                MethodConstants.QueuePurgeOk => new Impl.QueuePurgeOk(),
                MethodConstants.QueueDelete => new Impl.QueueDelete(),
                MethodConstants.QueueDeleteOk => new Impl.QueueDeleteOk(),
                MethodConstants.BasicQos => new Impl.BasicQos(),
                MethodConstants.BasicQosOk => new Impl.BasicQosOk(),
                MethodConstants.BasicConsume => new Impl.BasicConsume(),
                MethodConstants.BasicConsumeOk => new Impl.BasicConsumeOk(),
                MethodConstants.BasicCancel => new Impl.BasicCancel(),
                MethodConstants.BasicCancelOk => new Impl.BasicCancelOk(),
                MethodConstants.BasicPublish => new Impl.BasicPublish(),
                MethodConstants.BasicReturn => new Impl.BasicReturn(),
                MethodConstants.BasicDeliver => new Impl.BasicDeliver(),
                MethodConstants.BasicGet => new Impl.BasicGet(),
                MethodConstants.BasicGetOk => new Impl.BasicGetOk(),
                MethodConstants.BasicGetEmpty => new Impl.BasicGetEmpty(),
                MethodConstants.BasicAck => new Impl.BasicAck(),
                MethodConstants.BasicReject => new Impl.BasicReject(),
                MethodConstants.BasicRecoverAsync => new Impl.BasicRecoverAsync(),
                MethodConstants.BasicRecover => new Impl.BasicRecover(),
                MethodConstants.BasicRecoverOk => new Impl.BasicRecoverOk(),
                MethodConstants.BasicNack => new Impl.BasicNack(),
                MethodConstants.TxSelect => new Impl.TxSelect(),
                MethodConstants.TxSelectOk => new Impl.TxSelectOk(),
                MethodConstants.TxCommit => new Impl.TxCommit(),
                MethodConstants.TxCommitOk => new Impl.TxCommitOk(),
                MethodConstants.TxRollback => new Impl.TxRollback(),
                MethodConstants.TxRollbackOk => new Impl.TxRollbackOk(),
                MethodConstants.ConfirmSelect => new Impl.ConfirmSelect(),
                MethodConstants.ConfirmSelectOk => new Impl.ConfirmSelectOk(),
                _ => null,
            };
        }


        internal override Client.Impl.ContentHeaderBase DecodeContentHeaderFrom(ushort classId)
        {
            switch (classId)
            {
                case 60: return new BasicProperties();
                default: throw new Client.Exceptions.UnknownClassOrMethodException(classId, 0);
            }
        }
    }
}

// Autogenerated code. Do not edit.

// This source code is dual-licensed under the Apache License, version
// 2.0, and the Mozilla Public License, version 1.1.
//
// The APL v2.0:
//
//---------------------------------------------------------------------------
//   Copyright (c) 2007-2020 VMware, Inc.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       https://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//---------------------------------------------------------------------------
//
// The MPL v1.1:
//
//---------------------------------------------------------------------------
//   The contents of this file are subject to the Mozilla Public License
//   Version 1.1 (the "License"); you may not use this file except in
//   compliance with the License. You may obtain a copy of the License at
//   https://www.rabbitmq.com/mpl.html
//
//   Software distributed under the License is distributed on an "AS IS"
//   basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//   License for the specific language governing rights and limitations
//   under the License.
//
//   The Original Code is RabbitMQ.
//
//   The Initial Developer of the Original Code is Pivotal Software, Inc.
//   Copyright (c) 2007-2020 VMware, Inc.  All rights reserved.
//---------------------------------------------------------------------------

using System.Text;
namespace RabbitMQ.Client.Framing.Impl
{
    /// <summary>Autogenerated type. Private implementation class - do not use directly.</summary>
    internal sealed class QueuePurge : Client.Impl.MethodBase, IQueuePurge
    {

        public ushort _reserved1;
        public string _queue;
        public bool _nowait;

        ushort IQueuePurge.Reserved1 => _reserved1;
        string IQueuePurge.Queue => _queue;
        bool IQueuePurge.Nowait => _nowait;

        public QueuePurge() { }
        public QueuePurge(ushort @Reserved1, string @Queue, bool @Nowait)
        {
            _reserved1 = @Reserved1;
            _queue = @Queue;
            _nowait = @Nowait;
        }

        public override uint ProtocolCommandId => MethodConstants.QueuePurge;
        public override string ProtocolMethodName => "queue.purge";
        public override bool HasContent => false;

        public override void ReadArgumentsFrom(ref Client.Impl.MethodArgumentReader reader)
        {
            _reserved1 = reader.ReadShort();
            _queue = reader.ReadShortstr();
            _nowait = reader.ReadBit();
        }

        public override void WriteArgumentsTo(ref Client.Impl.MethodArgumentWriter writer)
        {
            writer.WriteShort(_reserved1);
            writer.WriteShortstr(_queue);
            writer.WriteBit(_nowait);
        }

        public override int GetRequiredBufferSize()
        {
            int bufferSize = 0;
            bufferSize += 2; // _reserved1 in bytes
            bufferSize += 1 + Encoding.UTF8.GetByteCount(_queue); // _queue in bytes
            bufferSize += 1; // number of bit fields in bytes
            return bufferSize;
        }

        public override void AppendArgumentDebugStringTo(StringBuilder sb)
        {
            sb.Append("(");
            sb.Append(_reserved1); sb.Append(",");
            sb.Append(_queue); sb.Append(",");
            sb.Append(_nowait);
            sb.Append(")");
        }
    }
}
